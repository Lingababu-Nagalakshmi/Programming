Index: Linux_Commands/Linux_commands.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>what is operating system?\r\n-> Operating system is an interface b/w user and the computer hardware.\r\n\r\ntypes of operating systems:\r\n\r\n-> single user -> single task OS -> MS-DOS\r\n-> single user -> multitasking OS --> windows 98 vista, seven etc..\r\n-> Multi User - Multitasking OS -> UNIX, LINUX etx.\r\n\r\n\r\nwhat is UNIX principles: \r\n\r\n1. everthing is file\r\n2. Configuration data stored in text\r\n3. Small, single-purpose programs\r\n4 avoid user interface\r\n5. Ability to chain programs together to perform complex tasks.\r\n\r\nHow we talk with Hardware?\r\n------------------------------\r\n\r\nFile Systems\r\n-----------------------------\r\n\r\n/ it is parent director or ROOT directory\r\n\r\n/root  it is home dir for root user(super user)\r\n\r\n/home it is home dir for other users\r\n\r\n/boot  it contains bootable file for Linux, GRUB \r\n\r\n/etc it contains all configuration files \r\n     /etc/passwd userinfo\r\n     /etc/dhcpd.conf   DHCP server\r\n\r\n/usr by default softwares are installed in /usr dir\r\n\r\n/opt it is optional dir for /usr\r\n     it contains third party software \r\n\r\n\r\n/bin it contains commands used by all users ( Binary files)\r\n\r\n/sbin it contains cmds used by only super user(ROOT) (super users binary files)\r\n\r\n\r\n/dev its contains device files -> like /dev/hda \r\n\r\n/proc it contains process file and its not permanent, they keep changing\r\n       acts as Virtual Dir.\r\n\r\n/var its contains variable data like mails and log files.\r\n\r\n/mnt it is default mount point for any partition \r\n\r\n\r\n/media all of removable media like pen drive, CD-ROM.\r\n\r\n/lib it contains library files which are used by OS.\r\n\r\n-----------------------------------------------\r\n\r\nhow to create file ?\r\n\r\n$ touch <filename> \r\n\r\nTo read a file \r\n\r\n$ cat <filename>\r\n\r\ncreating a dir \r\n-------------------\r\n$ mkdir shane\r\n\r\nmaking multiple dir inside a dir\r\n\r\n$ mkdir -p Kernel/{Linux/{advlinux,linuxstore},Aix/{hacmp,lpar},Storage/{san,netapp}}\r\n\r\nCopying files into dir\r\n-------------------------\r\n\r\n$ cp <filename> <dest>\r\n     <scr>  <dest>\r\n$ cp * or . <dest>\r\n\r\n------------------------\r\nMoving files from one location to other\r\n-----------------------------------------\r\n\r\n$ mv <filename> <dest>\r\n\r\nRenaming the file\r\n-------------------\r\n\r\n$ mv <oldname> <newname>\r\n\r\n$ mv <old dir name> <new dir name>\r\n\r\nRemoving the file\r\n--------------------\r\n$ rm \r\n$ rm -f\r\n$ rm -rf ( r stands for recursive and f stands for forcefully.\r\n\r\nVIM Editor or NANO \r\n-----------------------\r\n\r\nVI -> Visual display Editor \r\nVIM -> Visual display edior improved\r\n\r\ngedit, emacs\r\n\r\n-> i = to begin insert mode at the cursor postion\r\n-> I = to insert at the begining of line\r\n-> a = to append to next words letter\r\n-> A = to append at the end of the line\r\n-> o = to insert a new line below the cursor postion\r\n-> O = new line above the coursor postion\r\n-> gg = to go to the beginning of the page\r\n-> G = end of the page\r\n-> w = to move the cursor forward, word by word (nw or 5W words) \r\n-> b = backward of the cursor (nb or 5B words)\r\n-> u = to undo last changes(word)\r\n-> U = to undo the pervious changes\r\n-> ctrl+r = to redo the changes\r\n-> yy = to copy a line ( nyy or 5yy or 4yy lines)\r\n-> p = to paste line below the cursor postion\r\n-> P = paste line above the cursor postion.\r\n-> dw = to delete the word letter by letter( like backspace)\r\n-> x = to delete the letter by letter (DEL key)\r\n-> dd = to delete the entire line ( ndd or 3dd)\r\n-> / = to search a word in the file\r\n\r\nExtended mode: \r\n----------------------\r\n\r\n-> ESC + :W -> to save the changes\r\n-> ESC + :q -> to quit( without saving)\r\n-> ESC + :wq -> save and quit\r\n-> ESC + :w! -> save forcefully\r\n-> ESC + wq! -> save and quit forcefully\r\n-> ESC + :x -> to save and quit\r\n-> ESC + :X -> to give password to the file and remove password\r\n-> ESC + :20(n) -> it will go to 20th line\r\n\r\nlisting files and dir's\r\n------------------------\r\n$ ls -> list the files names\r\n$ ls -l long listing of the file\r\n$ ls -al -> it will show the all long list files\r\n$ ls -l <filename> -> to see the permissions of the particular file\r\n\r\n-----------------------------------------------\r\n\r\nFilter Commands:\r\n---------------------\r\n \r\n$ less - ex: less /etc/passwd \r\n$ more - ex: more /etc/passwd \r\n$ head - it used to show the top 10 lines for file. ex: head /etc/passwd\r\n$ tail - it used to show the last 10 lines of the file. ex: tail /etc/passwd\r\n$ sort - output will be in numberic or alphabatic order \r\n$ cut - the cut command is used to pic the given expression (in columns) and display the output \r\n          # cut -d -f file ( where d stands for delimiter ex: :, \" \"  and f stands for field)\r\n$ sed - sed 's/yum/setting/g' <filename>\r\n\r\n----------------------------------------------------\r\n\r\nRedirection is a process where we can copy the output of any commands, files into a new file.\r\n\r\n# ls -a > /root/list.txt or to append the output ls -a >> /root/list.txt\r\n\r\n----------------------------------------------\r\n\r\nfind: is used to find the files or dir path, it is exactly like the find option in our windows.\r\n\r\n-name: for searching a file with its name\r\n-inum: ffor searching a file with particular inode number.\r\n-type: searching a particular type of file\r\n-user: files whose owner is particular user\r\n-group: files belonging to particular group \r\n\r\n----------------------------------------------------------------\r\nFile Permission: \r\n\r\nthree levels: \r\n1. owner or user level \r\n2. Group level\r\n3. others level\r\n\r\n----------------------------\r\n\r\nread = 4\r\nwrite = 2\r\nexecute = 1 \r\n\r\n\r\nchmod u+x <file> adding execute permission to user only\r\n\r\nchmod go-wx <file> (removing the write and execute permission of the file)\r\n\r\nchmod +x <file>\r\n\r\n-----------------------------------------------------------------------------\r\nMounting \r\n-------\r\n\r\n# mount <device name> <dir name (mount point)> \r\n\r\n\r\n$ mount /dev/sda7 /kernel \r\n\r\n$ vi /etc/fstab  ( path to mount)\r\n----------------------------------------------------------------------\r\nuser\r\n-------\r\n\r\nadduser <name>\r\n\r\npasswd <username>\r\n-------------------\r\n1. super user or root user: root user is powerful user. he is the administrator user.\r\n\r\n2. System user: System users are the users created by the software or application \r\n\r\n3. Normal user: like shane, rahul, \r\n\r\n---------------------------------------------------------\r\n\r\nservice\r\n-------\r\n\r\n# service or systemctl \r\n\r\n# service start <service name>\r\n          stop\r\n          restart\r\n\r\n\r\n# systemctl <service name> start\r\n                           stop\r\n                           restart\r\n\r\n------------------------------------------------------------\r\n\r\n# ps \r\n\r\n# ps -a -> all\r\n\r\n# ps -u username \r\n\r\n# ps -x \r\n\r\n# ps -G <groupname> (for group)\r\n\r\n# ps -aux\r\n\r\n-----------------------------------\r\nkill\r\n---------\r\nsignal \r\n-------\r\n1 for reloading the process\r\n9 for killing hr process\r\n15 for teminating the process\r\n20 for stopping the process\r\n\r\n# kill -1 <pid>\r\n\r\nnice\r\n-----------\r\n\r\ni want to run a jenkins -20 -1 , maven -19-2 in top postion\r\n\r\nfrom -20 to 19 \r\n\r\nrenice <nice value (-20 to 19)> <PID>\r\n\r\n-------------------------------------------\r\ncrontab\r\n---------\r\nfor edit crontab # crontab -e \r\nfor display ur crontab files # crontab -l\r\nfor removing  # crontab -r\r\n\r\n# crontab -l (listing)\r\n#crontab -l u <username>\r\n\r\nex: \r\n\r\n#tty\r\n\r\n#crontab -e\r\n\r\n*/1 * * * * date > /dev/pts/0\r\n--------------------------------------\r\n\r\n\r\n     \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Linux_Commands/Linux_commands.sh b/Linux_Commands/Linux_commands.sh
--- a/Linux_Commands/Linux_commands.sh	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/Linux_Commands/Linux_commands.sh	(date 1704355602655)
@@ -296,8 +296,136 @@
 */1 * * * * date > /dev/pts/0
 --------------------------------------
 
+-------------------------------7 July 2023------------------------------------
+
+The Linux man command
+
+It will give the manual page of commands we used
+
+The Linux ls command
+it will list of all the content inside the files
+
+The Linux cd command
+it is changing the directory from to another
+
+The Linux pwd command
+it will will give present working directory
+
+The Linux mkdir command
+it will create new directory
+
+The Linux rmdir command
+it will remove the directory
+
+The Linux mv command
+it will move the files into the the particular directory
+
+The Linux cp command
+it will copy the data from one file to another file
+
+The Linux open command
+it will open the open the files and directorys
+
+The Linux touch command
+it will create the new file
+
+The Linux find command
+it will the data in the file
+
+The Linux ln command
+
+The Linux gzip command
+The Linux gunzip command
+The Linux tar command
+The Linux alias command
+The Linux cat command
+The Linux less command
+The Linux tail command
+The Linux wc command
+The Linux grep command
+The Linux sort command
+The Linux uniq command
+The Linux diff command
+The Linux echo command
+The Linux chown command
+The Linux chmod command
+The Linux umask command
+The Linux du command
+The Linux df command
+The Linux basename command
+The Linux dirname command
+The Linux ps command
+The Linux top command
+The Linux kill command
+The Linux killall command
+The Linux jobs command
+The Linux bg command
+The Linux fg command
+The Linux type command
+The Linux which command
+The Linux nohup command
+The Linux xargs command
+The Linux vim editor command
+The Linux emacs editor command
+The Linux nano editor command
+The Linux whoami command
+The Linux who command
+The Linux su command
+The Linux sudo command
+The Linux passwd command
+The Linux ping command
+The Linux traceroute command
+The Linux clear command
+The Linux history command
+The Linux export command
+The Linux crontab command
+The Linux uname command
+The Linux env command
+The Linux printenv command
+
+
+     
+------------------------------------- 2nd class 8 July 2023 ----------------------------------
+
+Import VI Editior commands
+
+esc i ---> for insert mode
+
+esc :wq! -- save and exit
+
+esc :q!  -- exit without saving
+
+esc yy -- copy
+
+esc p -- paste
+
+esc o -- newline
+
+esc set nu  -- to setup line numbers
+
+esc dd -- to delete the line
+
+esc G  -- end of the page
+
+esc:1 -- frist line of the page
+
+esc $ -- end of the line
+
+esc ^ --start of the line
+esc %s/keyword/replacekeyword/g
+
+/keyword -- for search any keyword
+
+
+------------------------------------- 3rd class 9 July 2023 ----------------------------------
+
+
+
+
+
+
 
-     
+
 
 
 
Index: python and Python_Interview_Questions/Python_interview_questions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Decarator\r\n\r\n\r\ndef decor(func):\r\n\r\n    def inner(name):\r\n\r\n        if name == \"Lingababu\":\r\n\r\n            print(\"Hi Good Morning\",name)\r\n\r\n        else:\r\n            func(name)\r\n\r\n    return inner\r\n\r\n\r\ndef wish (name):\r\n\r\n    print(\"Hi Good afternoon\",name)\r\n\r\nwish(\"Lingababu\")\r\nwish(\"Nagalakshmi\")\r\n\r\n#-----------------------------------------------------------------------------------------\r\n#Dataclasess and its types\r\n'''Data clasess in python maily used for the no need to use the __init__ longer'''\r\n'''for this we need to import @dataclass decarator'''\r\nfrom dataclasses import dataclass\r\n@dataclass()\r\nclass Person():\r\n    name: str\r\n    age: int\r\n    height: float\r\n    email: str\r\n\r\njoe = Person('Joe', 25, 1.85, 'joe@dataquest.io')\r\n\r\njoe.age = 35\r\nprint(joe)\r\n\r\n#-------------------------------------------------------------------------------------------\r\nfrom dataclasses import dataclass\r\n@dataclass()\r\nclass Person():\r\n    name: \"Lingababu\"\r\n    age: 31\r\n    height: 6.2\r\n    email: \"lingababu555@gmail.com\"\r\n\r\njoe = Person('Joe', 25, 1.85, 'joe@dataquest.io')\r\n\r\njoe.age = 35\r\nprint(joe)\r\n\r\n#------------------------------------------------------------------------------------------\r\nfrom typing import Tuple\r\n\r\n@dataclass\r\nclass Person():\r\n    name: str\r\n    age: int\r\n    height: float\r\n    email: str\r\n    house_coordinates: Tuple\r\n\r\nprint(Person('Joe', 25, 1.85, 'joe@dataquest.io', (40.748441, -73.985664)))\r\n\r\n#----------------------------------------------------------------------------------------------\r\n#Multithreading and multiprocessing and its limitations\r\n\r\n#Multithreading points\r\n\r\n'''1)In Multiple threading having multiple threads assigned to single process\r\n\r\n2)they run concurrently and parrell to each other\r\n\r\n3)These threads share the same meomory space with in the Parent process because Increase the performance\r\n\r\n4)Mainly we are using this for I/O bounded applications\r\n\r\n5)Multithreading uses common address space for all threads\r\n\r\n6)Multithreading is quick and requires few resources\r\n\r\n7)A process is an independent instance executed in a processor core.\r\n\r\n8)threads do share the meomory space\r\n\r\n9)Threads are lighter and cause less overhead. Also, because they share the same memory inside a process, it is easier, faster, and safer to share data.\r\n\r\n10)Concurrent execution means that two or more tasks are progressing at the same time.\r\n\r\n10)threads are scheduled by the GIL.\r\n\r\n#Multiprocessing points\r\n\r\n\r\n1)A process is an independent instance executed in a processor core.\r\n\r\n2)Processes do not share the same memory space,\r\n\r\n3)Processes execution is scheduled by the operating system\r\n\r\n5)Parallel execution implies that two or more jobs are being executed simultaneously.'''\r\n\r\n\r\n\r\n#Fuctions\r\ndef func1(*a):\r\n    return sum(a)\r\nfrom functools import reduce\r\nprint(func1(2,3,4,5,6,7,8,9))\r\nx=[1,2,3,4,5,6,7]\r\nz=list(map(lambda y:y**2,x))\r\nprint(z)\r\na=list(filter(lambda y:y%2!=0,x))\r\nprint(a)\r\nb=reduce(lambda x,y:x-y,x)\r\nprint(b)\r\n\r\n#class declaration with constractor\r\n\r\nclass Student:\r\n\r\n\r\n    def __init__(self,name,age,school,bus):\r\n\r\n        self.name=name\r\n        self.age=age\r\n        self.school=school\r\n        self.bus=bus\r\n\r\n    def display(self):\r\n\r\n        print(\"My name is\",self.name,\"with having\",self.age)\r\n\r\n    def second_info(self):\r\n\r\n        print(\"My school is\",self.school,\"and having the bus\",self.bus)\r\n\r\n\r\ns1 = Student(\"Lingababu\",31,\"GMR\",\"Benz\")\r\n\r\ns1.display()\r\ns1.second_info()\r\n\r\n#class declaration with out constractor \r\n\r\nclass Student:\r\n\r\n\r\n    def display(self,name,age):\r\n        self.name=name\r\n        self.age=age\r\n\r\n        print(\"My name is\",self.name,\"with having\",self.age)\r\n\r\n    def second_info(self,school,bus):\r\n        self.school=school\r\n        self.bus=bus\r\n\r\n        print(\"My school is\",self.school,\"and having the bus\",self.bus)\r\n\r\n\r\ns1 = Student()\r\n\r\ns1.display(\"Lingababu\",31)\r\ns1.second_info(\"GMR\",\"Benz\")\r\n\r\n#creating class with default parameter\r\n\r\nclass Student:\r\n\r\n\r\n    def display(self):\r\n        self.name=\"Lingababu\"\r\n        self.age=32\r\n\r\n        print(\"My name is\",self.name,\"with having\",self.age)\r\n\r\n    def second_info(self):\r\n        self.school=\"GMR\"\r\n        self.bus=\"Benz\"\r\n\r\n        print(\"My school is\",self.school,\"and having the bus\",self.bus)\r\n\r\n\r\ns1 = Student()\r\n\r\ns1.display()\r\ns1.second_info()\r\n\r\n\r\n#Inheritances\r\n\r\n\r\n\r\n#single     #simple\r\n\r\nclass A:\r\n    def m1(self):\r\n        print(\"Parent method\")\r\nclass B(A):\r\n    def m2(self):\r\n        print(\"Child method\")\r\nb = B()\r\nb.m1()\r\n\r\n#multiple   #many to one\r\n\r\nclass A:\r\n    def m1(self):\r\n        print(\"Parent1 method\")\r\nclass B():\r\n    def m1(self):\r\n        print(\"Parent2 method\")\r\nclass C(B,A):\r\n    def m1(self):\r\n        print(\"Child method\")\r\nc = C()\r\nc.m1()\r\n\r\n\r\n#multilevel # one to one\r\n\r\nclass A:\r\n    def m1(self):\r\n        print(\"Parent1 method\")\r\nclass B(A):\r\n    def m1(self):\r\n        print(\"Parent2 method\")\r\nclass C(B):\r\n    def m1(self):\r\n        print(\"Child method\")\r\nc = C()\r\nc.m1()\r\n\r\n#hybrid     #combination of all[multiple+multilevel+single]\r\nclass A:\r\n    def m1(self):\r\n        print(\"Parent1 method\")\r\nclass B(A):\r\n    def m1(self):\r\n        print(\"Parent2 method\")\r\nclass C(B):\r\n    def m1(self):\r\n        print(\"Child method\")\r\nclass D(C,B):\r\n    def m1(self):\r\n        print(\"Child1 method\")\r\n\r\nd= D()\r\nc.m1()\r\n\r\n#cyclic     #\r\nclass A(B):\r\n    def m1(self):\r\n        print(\"Parent1 method\")\r\nclass B(A):\r\n    def m1(self):\r\n        print(\"Parent2 method\")\r\n\r\n#Hirechy    #single to many\r\nclass A:\r\n    def m1(self):\r\n        print(\"Parent1 method\")\r\nclass B(A):\r\n    def m1(self):\r\n        print(\"Parent2 method\")\r\nclass C(A):\r\n    def m1(self):\r\n        print(\"Child method\")\r\nc = C()\r\nc.m1()\r\n    \r\n\r\n#super keyword  #method and constractor\r\n\r\nclass Student:\r\n\r\n    def __init__(self,name,school):\r\n\r\n        self.name = name\r\n        self.school =school\r\n\r\n    def frist_method(self):\r\n        print(\"Hi my name is\",self.name,\"working in the school\",self.school)\r\n        \r\nclass Student1(Student):\r\n\r\n    def __init__(self,name,school,age,bus):\r\n\r\n        super().__init__(name,school)\r\n        self.age=age\r\n        self.bus=bus\r\n\r\n    def frist_method1(self):\r\n\r\n        super().frist_method()\r\n        print(\"Hi Her name with\",self.age,\"and her school\",self.bus)\r\n\r\nstu = Student1(\"Lingababu\",\"GMR\",32,\"BENZ\")\r\nstu.frist_method1()\r\n#mro\r\nprint(\"---------------------------------------mro-------------------\")\r\nclass A:\r\n    def m1(self):\r\n        print(\"Parent1 method\")\r\nclass B():\r\n    pass\r\nclass C(B,A):\r\n    pass\r\nc = C()\r\nc.m1()\r\n\r\n#shallow copy and deep copy\r\n\r\n''' Shallow and Deep copy should be take it in nested lists only'''\r\n#Shallow copy\r\nimport copy\r\nx = [[1,2],[3,4],[5,6]]\r\n\r\ny = copy.copy(x)\r\n\r\ny[0][0] = \"A\"\r\n\r\nprint(x)\r\nprint(y)\r\n\r\n#Deep copy\r\n\r\nimport copy\r\nx = [[1,2],[3,4],[5,6]]\r\n\r\ny = copy.deepcopy(x)\r\n\r\ny[0][0] = \"A\"\r\n\r\nprint(x)\r\nprint(y)\r\n\r\n#call by value and call refrence\r\n\r\n''' Call by refrence mainly we can seen in mutable[ objects[List,set,dictionary] will occupie same meomory location'''\r\n\r\ndef M1(x):\r\n\r\n    print(x)\r\n    x.append(3)\r\n    x.extend([4,5,6])\r\n    x.remove(5)\r\n    print(x)\r\n    print(id(x))\r\n\r\ny=[1]\r\nM1(y)\r\nprint(y)\r\nprint(id(y))\r\n\r\n#Call by value\r\n'''Call by value only we can apply to Immutable Objects [float,string,Int] will occur will at different meomory location'''\r\ndef IM(x):\r\n\r\n    print(x)\r\n    x+=10\r\n    print(x)\r\n    print(id(x))\r\n\r\ny=5\r\nIM(y)\r\nprint(y)\r\nprint(id(y))\r\n\r\n#How will concatenate using magic methods\r\n#context mangers and its advantanges\r\n#generators\r\n\r\ndef gene():\r\n\r\n    yield 'A'\r\n    yield 'B'\r\n    yield 'C'\r\n    yield 'D'\r\n\r\ng = gene()\r\n\r\nprint(next(g))\r\nprint(next(g))\r\nprint(next(g))\r\nprint(next(g))\r\n#print(next(g))\r\n#Pickling and unpickling\r\n'''Pickling is the process through which a Python object hierarchy is converted into a byte stream. To serialize an object hierarchy, you simply call the dumps() function.\r\n\r\n    Unpickling is the inverse operation. A byte stream from a binary file or bytes-like object is converted back into an object hierarchy. To de-serialize a data stream, you call the loads() function.'''\r\n\r\n'''pickle.HIGHEST_PROTOCOL − The highest protocol version available. Integer value.\r\n\r\npickle.DEFAULT_PROTOCOL − The default protocol version used for pickling. Integer value. Currently the default protocol is 4'''\r\n\r\nimport pickle\r\n\r\n# Input Data\r\nmy_data = { 'BMW', 'Audi', 'Toyota', 'Benz'}\r\n\r\n# Pickle the input\r\nwith open(\"demo.pickle\",\"wb\") as file_handle:\r\n   pickle.dump(my_data, file_handle, pickle.HIGHEST_PROTOCOL)\r\n\r\n# Unpickle the above pickled file\r\nwith open(\"demo.pickle\",\"rb\") as file_handle:\r\n   res = pickle.load(file_handle)\r\n   print(my_data) # display the output\r\n   print(type(res))\r\n\r\n#how will get,change,delete and modify from dictionary\r\n\r\nx = {'A':2,'B':1,'C':5,'E':3,'H':4}\r\nprint(x['A'])\r\nprint(x.get('A'))\r\nprint(x.setdefault('C',6))\r\nprint(x)\r\nx['C'] = 'Lingababu'\r\nprint(x)\r\ndel x['C']\r\nprint(x)\r\n#how to get max element from dictionary\r\nx = {'A':2,'B':1,'C':5,'E':3,'H':4}\r\ny= max(sorted(x, key = lambda a : x[a]))\r\nprint(y)\r\n\r\n#how to get how to sort the dictionary by keys\r\nx = {'A':2,'B':1,'C':5,'E':3,'H':4}\r\n\r\ny= dict(sorted(x.items()))   #{'A': 2, 'B': 1, 'C': 5, 'E': 3, 'H': 4}\r\nprint(y)\r\n##how to get how to sort the dictionary by values\r\nx = {'A':2,'B':1,'C':5,'E':3,'H':4}\r\ny= dict(sorted(x.items(), key = lambda item : item[1]))\r\nprint(y)                     #{'B': 1, 'A': 2, 'E': 3, 'H': 4, 'C': 5}\r\n#what is data_abstraction\r\nprint(\"------------------------------------------------------------\")\r\n#using multiple things in single step\r\n\r\nl = list(range(1,11))\r\ny=map(lambda x:x**2 if x%2 ==0 else x**3, l)\r\nprint(y)\r\nfrom abc import ABC,abstractmethod\r\n\r\nclass Parent(ABC):\r\n\r\n    def common_fn(self):\r\n        print(\"Im in common method of parent\")\r\n    @abstractmethod\r\n    def abs_fn(self):\r\n        pass\r\n\r\nclass Child1(Parent):\r\n    def abs_fn(self):\r\n        print('abstract method of child1')\r\n\r\n\r\nclass Child2(Parent):\r\n    def abs_fn(self):\r\n            print('abstract method of child2')\r\n\r\nc2 = Child2()\r\nc2.abs_fn()\r\n#what is Encapsulation\r\n'''Encapsulation is combaing of the data and methods is called Encapsulation'''\r\n\r\nclass Person:\r\n\r\n    def m1(self):\r\n        self.a =\"nucleous\" #public variable\r\n        self._a =\"atom\"    #protected variable\r\n        self.__a =\"molecule\" #privite variable\r\n\r\np1 = Person()\r\n#print(p1.a)\r\n#print(p1._a)\r\n#print(p1.__a)\r\n#prime number\r\nn= int(input(\"Enter the number\"))\r\n\r\nif n < 1 :\r\n    print(\"Its not a prime number\")\r\n\r\nelif n == 1:\r\n    print(\"Its not a prime number\")\r\n\r\nelif n > 1 :\r\n\r\n    for i in range(2, n):\r\n\r\n        if n%i==0:\r\n            print(\"Its not a prime number\")\r\n            break\r\n\r\n    else:\r\n        print(\"Its a prime number\")\r\n\r\nelse:\r\n    print(\"Its not a prime number\")\r\n\r\n\r\n#how to remove the duplcates\r\n\r\nx='aaabbbcccdddd'\r\nx.split()\r\nb=['w','w','w','w','w','r','r','r']\r\ny=[]\r\nfor i in b:\r\n    if i not in y:\r\n        y.append(i)\r\nprint(y)\r\n\r\n\r\n#how to remove repeated items from the string\r\na='aaabbbcccdddd'\r\nb=['w','w','w','w','w','r','r','r']\r\nd=dict()\r\n\r\nfor i in b:\r\n    if i in d:\r\n        d[i]+=1\r\n    else:\r\n        d[i]=1\r\nprint(d)\r\n#how to get diamond shape ussing python code\r\n#How will you get the key from nested dictionary\r\n#How to get value from the nested list\r\n\r\nprint(\"-----------------------------working with regular expressions-----------\")\r\n\r\nimport re\r\ns=\"learning python is very Easy\"\r\nresult = re.search(\"^easy\",s,re.IGNORECASE)\r\nif result != None:\r\n    print(\"Matched\")\r\nelse:\r\n    print(\"Not Matched\")\r\n\r\n\r\n'''x=919059422776\r\n\r\nimport re\r\n\r\nresult = re.fullmatch('(0|91)?[7-9][0-9]{9}',x)\r\n\r\nif result != None:\r\n    print(\"Matched\")'''\r\n\r\n\r\n\r\n#How to get the email ID\r\n\r\n'''import re\r\ns=input(\"Enter the mail ID :\")\r\nresult = re.fullmatch('\\w[a-zA-Z0-9_.]*@gmail.com',s)\r\nif result != None:\r\n    print(\"Matched\")\r\nelse:\r\n    print(\"Not matched\")'''\r\n#How to get the phone number using re\r\n'''x=+919059422776\r\nimport re\r\nresult = re.fullmatch('(0|91)?[7-9][0-9]{9}',x)\r\nif result != None:\r\n    print(\"Matched\")\r\n\r\nelse:\r\n    print(\"Not matched\")'''\r\n#how get specified value from string using re\r\n#match---------------------------------------\r\n'''match re.match() searches only from the beginning of the string\r\n a match of substring is found somewhere in the middle of the string, it returns none. '''\r\n'''import re\r\ntxt = \"The rain in Spain\"\r\nx = re.match(\"ai\", txt)\r\nprint(x)'''\r\n#search--------------------------------------\r\n'''match re.match() searches only from the beginning of the string\r\n a match of substring is found somewhere in the middle of the string, it returns none.'''\r\nimport re\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.search(\"ai\", txt)\r\nprint(x)\r\n#fullmatch\r\n'''re.fullmatch() is that re.match() matches only at the beginning but re.fullmatch() tries to match at the end as well.'''\r\nimport re\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.fullmatch(\"ai\", txt)\r\nprint(x)\r\n#findall nothing but search but its gives in list['ai','ai']\r\n''' but it will return the output in the list format'''\r\nimport re\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.fullmatch(\"ai\", txt)\r\nprint(x)\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.findall(\"ai\", txt)\r\nprint(x)\r\n\r\ntxt = \"The rain in Spain\"\r\nx = re.findall(\"ai\", txt) #['ai','ai']\r\nprint(x)\r\n\r\n#split()\r\n\r\n'''it will split the function but its output list format'''\r\n\r\n#sub\r\n\r\n'''it will sub in the selected place only'''\r\n \r\n#how exception handling using classes\r\n\r\ntry:\r\n\r\n    x=int(input(\"Enter the value:\"))\r\n    y=int(input(\"Enter the value:\"))\r\n\r\n    print(x/y)\r\n\r\nexcept ZeroDivisionError as e:\r\n    print(\"We cannot divide by zero\",e)\r\n\r\nelse:\r\n    print(\"it will go to the next block if there is no exception\")\r\n\r\nfinally:\r\n\r\n    print(\"For cleaning activity we are using this\")\r\n\r\n#how to create the file and read and write the content to the file\r\n\r\n'''\\n Indiacte the new line'''\r\n'''write()\t:Writes the specified string to the file\r\n   writelines()\t:Writes a list of strings to the file'''\r\n\r\nwith open ('test1.txt' ,'w') as f:\r\n    f.write(\"See you soon!\\n\")\r\n    f.write(\"Good morning Lingababu\")\r\n\r\nwith open('test1.txt','r') as f:\r\n    data=f.read()\r\n    print(data)\r\n    count=0\r\n    for i in data:\r\n        if i == 'Good morning Lingababu':\r\n            count+=1\r\n    print(count)\r\n#Context managers\r\n    \r\n'''Context managers are basically used for the many users uses the resources\r\n    but they can not close the files when we are try to open those files we can os error'''\r\n'''with statement are basically used for the context manager for file handling'''\r\n#local,global,nonlocal variable\r\n'''local and global variable we can use it normal functions'''\r\n# declare global variable\r\n#message = 'Hello'\r\ndef greet():\r\n    # declare local variable\r\n    message = 'Lingababu'\r\n    print('Local', message)\r\n\r\ngreet()\r\n#print('Global', message) #NameError: name 'message' is not defined\r\n#Non local variable\r\n'''nonlocal variable we using in nested functions'''\r\n''' for whose variable local or global Scope not defined then non local scope will come''' \r\n\r\ndef Outer():\r\n\r\n    message = 'local'\r\n\r\n    def inner():\r\n        nonlocal message\r\n        message ='nonlocal'\r\n\r\n        print('inner',message)\r\n\r\n    inner()\r\n    print('Outer',message)\r\n\r\nOuter()\r\n#How to reverse the list using Inbuilt methods\r\n\r\n#method-1\r\n\r\n# input list\r\nlst = [10, 11, 12, 13, 14, 15]\r\nl = []  \r\nfor i in lst:\r\n    l.insert(0, i)\r\nprint(l)\r\n\r\n#method-2\r\n\r\n# Input list\r\nmy_list = [4, 5, 6, 7, 8, 9]\r\nreversed_list = []\r\nfor i in range(len(my_list)-1, -1, -1):\r\n    reversed_list.append(my_list[i])\r\nprint(reversed_list)\r\n\r\n#How to reverse the list without using Inbuilt methods\r\n\r\n#for list\r\ndef reverse_list(l):\r\n    return [l[i] for i in range(len(l)-1, -1, -1)]\r\na=[1,2,3,4,5,6,7,8,9]\r\nprint(reverse_list(a))\r\n\r\n#for string\r\n# Function to reverse a string\r\ndef reverse(string):\r\n    string1 = [string[i] for i in range(len(string)-1, -1, -1)]\r\n    return \"\".join(string1)\r\n \r\ns = \"Geeksforgeeks\"\r\n \r\nprint(\"The original string  is : \", s)\r\n \r\nprint(\"The reversed string(using reversed) is : \", reverse(s))\r\n\r\n#self\r\n'''Self is an instance of a class or an object in Python. It is included as the first parameter.\r\nIt helps differentiate between the methods and attributes of a class with local variables.'''\r\n\r\n#monkey patching\r\n'''the term monkey patch refers to dynamic (or run-time) modifications of a class or module.\r\nIn Python, we can actually change the behavior of code at run-time.'''\r\n\r\n#Name spaces\r\n'''Scope resolution LEGB rule In Python\r\nIn Python, the LEGB rule is used to decide the order in which the namespaces are to be searched for scope resolution.\r\nThe scopes are listed below in terms of hierarchy(highest to lowest/narrowest to broadest):'''\r\n\r\n#Local(L): Defined inside function/class\r\n#Enclosed(E): Defined inside enclosing functions(Nested function concept)\r\n#Global(G): Defined at the uppermost level\r\n#Built-in(B): Reserved names in Python builtin modules\r\nprint(\"------------------factorial of a number--------------\")\r\n\r\ndef factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1)\r\nprint(factorial(10))\r\n\r\n#fibnocial sequence:\r\n\r\ndef fib (n):\r\n\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1 or n == 2:\r\n        return 1\r\n    else:\r\n        return fib(n-2)+fib(n-1)\r\na=20\r\nprint(fib(a))\r\n\r\n#Difference between == and is operator\r\n\r\n'''== is an operator that tests the equality\r\n   is is an operator that tests for identity.\r\n\r\nTwo objects can have equal values without necessarily being identical (i.e. having the same memory address).\r\n\r\nRemember that a is b is syntactic sugar for id(a) == id(b)'''\r\n\r\n#When shouldn't you use the assert statement?\r\n'''The assert statement is useful for internal testing and sanity checks.\r\nHowever, it shouldn’t be used to perform data validation or error handling\r\nbecause it’s generally disabled in production code for performance reasons.'''\r\n\r\n#Using of Zip and Enumerate function\r\n\r\nx=['A','B','C','D','E']\r\ny=[1,2,3,4,5]\r\n\r\nfor x,y in zip(x,y):\r\n    print(x,y)\r\n    \r\nx=['A','B','C','D','E']\r\n\r\n\r\nfor index,x in enumerate(x):\r\n    print(index,y)\r\n\r\n#iterable examples \"list ,set ,tuple ,dictionary\"\r\n\r\n\r\n\r\n#iterate are applying on the iterables\r\n''' we have two iterators\r\n iter -------yhis is for intialization for iterator object\r\n next -------this will returns the next value from iterable object'''\r\nstring = \"GFG\"\r\nch_iterator = iter(string)\r\n \r\nprint(next(ch_iterator))\r\nprint(next(ch_iterator))\r\nprint(next(ch_iterator))\r\n\r\na = [1,2,3]\r\nb = [4,5,6]\r\nc = [7,8,9]\r\nz= zip(a,b,c)\r\nprint(list(z))  #[(1, 4, 7), (2, 5, 8), (3, 6, 9)]\r\n\r\na = [1,2,3]\r\nb = [4,5,6]\r\n\r\nz=dict(zip(a,b))\r\nprint(z)   #{1: 4, 2: 5, 3: 6}\r\n\r\nx=[\"Name\",\"age\"]\r\ny=[\"Lingababu\",30]\r\nz=dict(zip(x,y))\r\nprint(z)  #{'Name': 'Lingababu', 'age': 30}\r\n\r\n#what is anngstrom number\r\nnew_number = int(input(\"Enter the number:\"))\r\n\r\nval1=list(map(int,str(new_number)))\r\n\r\nval2=list(map(lambda y:y**3,val1))\r\n\r\nif (sum(val2) == new_number):\r\n    print(\"Its a armstrong number \")\r\n\r\nelse:\r\n    print(\"Its not a armsstorng number\")\r\n    \r\n\r\n\r\n#what Anagrams\r\n\r\nnum1 = input(\"Enter the value\")\r\nnum2=  input(\"Enter the value\")\r\n\r\n\r\nif sorted(num1) == sorted(num2):\r\n\r\n    print(\"Both are anagrams\")\r\n\r\nelse:\r\n    print(\"Both not are anagrams\")\r\n\r\n#scope resolution in python\r\n\r\n\r\n#LEGB Rule in python\r\n\r\n    #Local\r\n    #Enclosed\r\n    #Global\r\n    #Builtin\r\n\r\n\r\n'''def outer_func():\r\n\r\n    b=20\r\n    global a\r\n    a=a+10\r\n\r\n    print(a)\r\n\r\n\r\n    def inner_func():\r\n\r\n        nonlocal b\r\n        b=b+2\r\n\r\n\r\n\r\n        print(\"The b value is\",b)\r\n\r\n    inner_func()\r\n\r\n\r\nouter_func()'''\r\n\r\n\r\n\r\n\r\n\r\n#Counting Vowels in a Given Word\r\n\r\n\r\nvowel = ['a','e','i','o','u']\r\n\r\nword = 'programming'\r\ncount=0\r\n\r\nfor char in word:\r\n\r\n    if char in vowel:\r\n\r\n        count+=1\r\nprint(count)\r\n\r\n#Counting No Vowels In a Given Word\r\n\r\nvowels=['a','e','i','o','u']\r\n\r\nword= 'sortware engineer'\r\n\r\ncount=0\r\nfor char in word:\r\n    if char not in word:\r\n\r\n        count+=1\r\n\r\nprint(count)\r\n\r\n#Counting the number of Occurance of character\r\n\r\n\r\nword = \"python\"\r\n\r\ncharacter = 'p'\r\n\r\ncount=0\r\n\r\nfor letter in word:\r\n\r\n    if letter == character:\r\n\r\n        count+=1\r\n\r\nprint(count)\r\n\r\n\r\n#find the middle number number from the list\r\n\r\n\r\nnum_list = [1,2,3,4,5,6,7,8,9,10]\r\n\r\n\r\nmid_ele = int((len(num_list)/2))\r\n\r\nprint(num_list[mid_ele])\r\n\r\n\r\n\r\n#convert list of elements into string\r\n\r\n\r\n\r\nlist1 = ['a','c','f','t','y','b']\r\n\r\nstring1 = ''.join(list1)\r\n\r\nprint(string)\r\nprint(type(string1))\r\n\r\n#Adding two list elements together\r\n\r\n\r\nlst1 =[1,2,3]\r\n\r\nlst2 =[4,5,6]\r\n\r\n\r\nres_lst = []\r\n\r\nfor i in range(0, len(lst1)):\r\n\r\n    res_lst.append(lst1[i]+lst2[i])\r\n\r\nprint(res_lst)\r\n\r\n\r\n\r\n#Comparing two are anagrams or not\r\n\r\n\r\nstr1 = \"Listen\"\r\n\r\nstr2 = \"Silent\"\r\n\r\n\r\n\r\nstr1 = list(str1.upper())\r\n\r\nstr2 = list(str2.upper())\r\n\r\nstr1.sort(),str2.sort()\r\n\r\nif (str1 == str2 ):\r\n\r\n    print(\"True\")\r\n\r\nelse:\r\n\r\n    print(\"False\")\r\n\r\n\r\n\r\n#Counting white spaces in astring\r\n\r\nstring = \"P  r orgramm in g\"\r\n\r\n\r\nprint(string.count(' '))\r\n\r\n\r\n\r\n#Counting the Digits letters and Spaces in a string\r\n\r\n\r\nimport re\r\n\r\n\r\nname ='Python is 1'\r\n\r\ndigitCount = re.sub(\"[^0-9]\",\"\",name)\r\nletterCount = re.sub(\"[^a-zA-Z]\",\"\",name)\r\nspaceCount = re.findall(\"[ \\n]\",name)\r\n\r\n\r\nprint(len(digitCount))\r\nprint(len(letterCount))\r\nprint(len(spaceCount))\r\n\r\n#Counting special Characters in a string\r\n\r\nimport re\r\n\r\nspChar ='!@#$%^&*()'\r\n\r\ncount = re.sub('[\\w]+','',spChar)\r\nprint(len(count))\r\n\r\n\r\n#Remove the all white spaces in a string\r\n\r\nimport re\r\n\r\nstring = 'C O D E'\r\n\r\nresult = re.sub('[\\s]+','',string)\r\nprint(len(result))\r\n\r\n#Building a Pyramid in python\r\n\r\nfloors = 3\r\n\r\nh = 2*floors-1\r\n\r\nfor i in range(1,2*floors,2):\r\n\r\n    print('{:^{}}'.format('*'*i,h))\r\n\r\n\r\n#randmise the elements from the list\r\n\r\nfrom random import shuffle\r\n\r\nlst = ['Python','is','easy']\r\n\r\nshuffle(lst)\r\n\r\nprint(lst)\r\n\r\n\r\n#How will check whetehr year is leep or not\r\n\r\n\r\ndef LeapYear(year):\r\n\r\n    if (year % 400 == 0) or(year % 100 != 0) and (year % 4 == 0):\r\n\r\n        print(\"Given year is a leap year\")\r\n\r\n\r\n    else:\r\n\r\n        print(\"The Given year is not leap year\")\r\n\r\nYear = int(input(\"Enter the year to whether check leap year or not\"))\r\n\r\nLeapYear(Year)\r\n\r\n#Swapping two variables in python\r\n\r\n\r\nnum1 = int(input(\"Enter the frist variable : \"))\r\n\r\nnum2 = int(input(\"Enter the second Variable : \"))\r\n\r\nnum3 = int(input(\"Enter the second Variable : \"))\r\nprint(num1)\r\nprint(num2)\r\nprint(num3)\r\nnum1 , num2,num3 =num3, num2 ,num1\r\n\r\nprint(num1)\r\nprint(num2)\r\nprint(num3)\r\n\r\n\r\n#write a programm to dispaly the calendor\r\n\r\nimport calendar\r\n\r\nyear = int(input(\"Enter the yaer:  \"))\r\nmonth = int(input(\"Enter the month: \"))\r\n\r\n\r\nprint(calendar.month(year,month))\r\n\r\nprint(\"----------------working with padding----------------------\")\r\n\r\ninput_list = [1, 123, 1234, 12345]\r\n\r\noutput_list = []\r\n\r\nfor num in input_list:\r\n\r\n    num_str = str(num)\r\n\r\n    padded_num = num_str.zfill(6)\r\n    output_list.append(padded_num)\r\n\r\nprint(output_list)\r\n\r\n#write a programm with Inheritance with Dataabstraction\r\n\r\nfrom abc import ABC, abstractmethod\r\n\r\nclass Animal(ABC):\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\n    @abstractmethod\r\n    def make_sound(self):\r\n        pass\r\n\r\nclass Dog(Animal):\r\n    def make_sound(self):\r\n        return \"Woof!\"\r\n\r\nclass Cat(Animal):\r\n    def make_sound(self):\r\n        return \"Meow!\"\r\n\r\ndog = Dog(\"Buddy\")\r\ncat = Cat(\"Whiskers\")\r\n\r\nprint(dog.name)  # Output: Buddy\r\nprint(dog.make_sound())  # Output: Woof!\r\n\r\nprint(cat.name)  # Output: Whiskers\r\nprint(cat.make_sound())  # Output: Meow!\r\n\r\n\r\n#Unpacking the tuple\r\n\r\n\r\nx = [1, 2, 3, 4, 5, (6), 7, 8]\r\nnew = []\r\nfor e in x:\r\n    if isinstance(e, tuple):\r\n        new.append(e)\r\n    else:\r\n        new.append(e)\r\nprint(new)\r\n\r\n\r\n#Sorting the List without using any Inbuilt methods\r\ns = [-5, -23, 5, 0, 23, -6, 23, 67]\r\nnl = []\r\nfor i in range(len(s)):\r\n    a = min(s)\r\n    nl.append(a)\r\n    s.remove(a)\r\nprint(nl)\r\n\r\n\r\n\r\n\r\nprint(\"-----------------with out print using the return using ------------\")\r\ndef sep_items(l):\r\n    \r\n    even=[]\r\n    odd=[]\r\n    \r\n    for i in l:\r\n        if i%2 ==0:\r\n            even.append(i)\r\n            \r\n        \r\n        else:\r\n            odd.append(i)\r\n            \r\n    return even,odd\r\n    #print (\"Then odd items list\",odd)          \r\n    #print (\"The even items list\",even)\r\nx=eval(input(\"Enter the Input:\"))\r\na,b=sep_items(x)\r\nprint(\"Even list\",a)\r\nprint(\"Odd list\",b)\r\n\r\nprint (\"-------------------seperating even and odd numbers from the list with Print-------\")\r\ndef sep_items(l):\r\n    \r\n    even=[]\r\n    odd=[]\r\n    \r\n    for i in l:\r\n        if i%2 ==0:\r\n            even.append(i)\r\n            \r\n        \r\n        else:\r\n            odd.append(i)\r\n            \r\n    \r\n    print (\"Then odd items list\",odd)          \r\n    print (\"The even items list\",even)\r\nx=eval(input(\"Enter the Input:\"))\r\nsep_items(x)\r\n\r\n\r\n# property                Recursion           Iteration\r\n\r\n# Defination      Function calls itself   A set of instractions\r\n\r\n# Apllications    For functions           For loops\r\n\r\n# Code size       small code size         Large Code size\r\n\r\n# Time            Very high time          Low time Complexicity\r\n\r\n# Space           More space              Less space\r\n\r\n# meomory         more meomory            less meomory\r\n\r\n\r\n\r\n#Recursion\r\n\r\ndef countdown(n):\r\n\r\n    if n <=0:\r\n\r\n        return 'Blastoff'\r\n\r\n    else:\r\n        return n\r\n        countdown(n-1)\r\n\r\ncountdown(3)\r\n\r\n\r\n#print(\"------------multiple nestded dictionary into single dictionary\")\r\n\r\ndef flatten_list(lst):\r\n    flattened = []\r\n    for item in lst:\r\n        if isinstance(item, list):\r\n            flattened.extend(flatten_list(item))\r\n        else:\r\n            flattened.append(item)\r\n    return flattened\r\n\r\nl1 = [1, 2, [3, 4], 5, [6, 7, 8, 9], [10, [11, 12, 13, [14, 15]]]]\r\nflattened_list = flatten_list(l1)\r\n\r\nprint(flattened_list)\r\n\r\n\r\n#we are finding max element from repeated element from list\r\nfrom collections import Counter\r\n\r\ntest = [1, 2, 3, 9, 2, 7, 3, 5, 9, 9, 9]\r\n\r\ncount_dict = Counter(test)\r\nmax_count = max(count_dict.values())\r\n\r\ntest = [1, 2, 3, 9, 2, 7, 3, 5, 9, 9, 9]\r\n\r\ncount_dict = {}\r\nfor num in test:\r\n    if num in count_dict:\r\n        count_dict[num] += 1\r\n    else:\r\n        count_dict[num] = 1\r\n\r\nmax_count = max(count_dict.values())\r\n\r\n#we are finding max element from repeated element from list\r\ntest = [1, 2, 3, 9, 2, 7, 3, 5, 9, 9, 9]\r\n\r\nmax_count = max(test.count(x) for x in test)\r\n\r\n\r\n#How to print the Pyrimd \r\n\r\ndef print_diamond(height):\r\n    for i in range(height):\r\n        print(\" \" * (height - i - 1) + \"*\" * (2 * i + 1))\r\n\r\n# Example usage\r\nprint_diamond(5)\r\n\r\n#How to prepare the Diamond\r\n\r\ndef print_diamond(height):\r\n    for i in range(height):\r\n        print(\" \" * (height - i - 1) + \"*\" * (2 * i + 1))\r\n    \r\n    for i in range(height-2, -1, -1):\r\n        print(\" \" * (height - i - 1) + \"*\" * (2 * i + 1))\r\n\r\n# Example usage\r\nprint_diamond(5)\r\n\r\n\r\n#how to add the two list using the lambda\r\n\r\ny =[12,23,32,22]\r\n\r\np =[5,10,15,20]\r\nz = list(map(lambda i,j:i*j,y,p))\r\n\r\nprint(z)  #[60, 230, 480, 440]\r\n\r\n#squaring the dictionay values\r\n\r\nx={'a':2,'b':3,'c':4}\r\n\r\ny={i:j**2 for i,j in x.items()}\r\nprint(y)\r\n\r\n#if dictionary having the two keys then find the third dictionary\r\nD1 = {'A': 15, 'B': 40}\r\nD2 = {'B': 20, 'C': 70}\r\n\r\nD3 = {**D1, **D2}\r\n\r\nfor key in D1.keys() & D2.keys():\r\n    D3[key] = D1[key] + D2[key]\r\nprint(D3)\r\n\r\n#How to the multiply the two values from the dictionary \r\nD1 = {'A': 15, 'B': 40}\r\nD2 = {'B': 20, 'C': 70}\r\n\r\nD3 = {**D1, **D2}\r\n\r\nfor key in D1.keys() & D2.keys():\r\n    D3[key] = D1[key] * D2[key]\r\nprint(D3)\r\n\r\n\r\n#Status codes of particular Rest_API\r\n\r\n#Information(1XX)\r\n\r\n\r\n\r\n#Success(2XX):\r\n\r\n# 200 OK\r\n# 201 Created\r\n# 204 No Content\r\n\r\n#Redirection(3XX):\r\n\r\n# 301 Moved Permanently\r\n\r\n# 302 Found\r\n\r\n# 304 Not Modified\r\n\r\n\r\n#Client Error(4XX):\r\n\r\n# 400 Bad Request\r\n\r\n# 401 Unauthorised request\r\n\r\n# 403 Forbidden\r\n\r\n\r\n#Server Error(5XX)\r\n\r\n# 500 Internal server Error\r\n\r\n# 503 Server Unavaliable\r\n\r\n\r\n#when your passing 3 parameters from the list when passing the argument\r\n\r\ndef probability_Checking(x, lst):\r\n    out_put = []\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            for k in range (j+2, len(lst)):\r\n                if lst[i] + lst[j] +lst[k] == x:\r\n                    out_put.append([lst[i], lst[j], lst[k]])\r\n    return out_put\r\n\r\nx=int(input(\"Enter the number :\"))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nprint(probability_Checking(x, lst))\r\n\r\n#when your passing 2 parameters from the list when passing the argument\r\ndef probability_Checking(x, lst):\r\n    out_put = []\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n                if lst[i] + lst[j] == x:\r\n                    out_put.append([lst[i], lst[j]])\r\n    return out_put\r\n\r\nx=int(input(\"Enter the number :\"))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nprint(probability_Checking(x, lst))\r\n\r\n\r\n#Keyword arguments\r\ndef add_sum(**x):\r\n\r\n    return max(x.values())\r\n\r\nprint(add_sum(a=10,b=20,c=30,d=40,e=50))\r\n\r\n\r\n#it will takes arguments in the  dictionary format[**x]\r\ndef add_sum(**x):\r\n\r\n    return sum(x.values())\r\n\r\na={'a':10,'b':20,'c':30,'d':40}\r\nprint(add_sum(**a))    #dictionary format it will take the arguments\r\n\r\n\r\n#it will takes arguments in the  tuple format[*x]\r\ndef add_sum(*x):\r\n\r\n    return sum(x)\r\n\r\na=(20,10,20,40,50)\r\nprint(add_sum(*a))     #tuple format it will take the arguments\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ndef cheaking_security(l):\r\n\r\n    valid = [2000, 500, 100, 50, 20, 10]\r\n    total = 0\r\n\r\n\r\n    for i in l:\r\n\r\n        if not i[0].isdigit():\r\n\r\n            raise Exception (\"It should contain the digits only\")\r\n\r\n        if not i[1:4].isalpha():\r\n\r\n            raise Exception (\"It should contain the alphabets only\")\r\n\r\n        if int(i[4:]) not in valid:\r\n\r\n            raise Exception (\"Invaid denomination :Last 4Characters\")\r\n\r\n\r\n        total+=int(i[4:])\r\n    return total\r\n        \r\ninput_l = ['1BEX2000','4PIM0500','6BIO0020','1SJJ0010','9ACD0100']\r\ntry:\r\n\r\n    total=cheaking_security(input_l)\r\n    print(\"Total sum\",total,\"ruppess\")\r\n\r\nexcept ValueError as e:\r\n\r\n    print(\"Error:\",str(e))\r\n\r\n\r\n\r\n\r\n\r\n\r\n#for post the request in this we need the [url,pay_load,file_path]\r\n\r\nimport request\r\ndef send_post_request(url,payload,file_path):\r\n    reponse=requests.post(url, json=payload)\r\n    if response.status_code == 200:\r\n        with open('file_path','w') as file:\r\n            file.write(response.text)\r\n        print(\"Response saved to file:\",file_path)\r\n    else:\r\n        print(\"Request failed with status code:\",response.status_code)\r\n#Example\r\nurl = \"https://api.example.com/endpoint\"\r\npayload={\"key\":\"value1\",\"key2\":\"value2\"}\r\nfile_path ='response.json'\r\n\r\n\r\n\r\n#for get the request in this we need the [url,file_path]\r\nimport requests\r\ndef send_get_request(url, file_path):\r\n    response = requests.get(url)\r\n    if response.status_code == 200:\r\n        with open(file_path, 'w') as file:\r\n            file.write(response.text)\r\n        print(\"Response saved to file:\", file_path)\r\n    else:\r\n        print(\"Request failed with status code:\", response.status_code)\r\n\r\n# Example usage\r\nurl = \"https://api.example.com/endpoint\"\r\nfile_path = \"response.json\"\r\nsend_get_request(url, file_path)\r\n\r\n\r\n\r\n\r\n\r\n#for patch the request in this we need the [url,payloadfile_path]\r\n\r\nimport requests\r\ndef send_patch_request(url, payload, file_path):\r\n    response = requests.patch(url, json=payload)\r\n    if response.status_code == 200:\r\n        with open(file_path, 'w') as file:\r\n            file.write(response.text)\r\n        print(\"Response saved to file:\", file_path)\r\n    else:\r\n        print(\"Request failed with status code:\", response.status_code)\r\n# Example usage\r\nurl = \"https://api.example.com/endpoint\"\r\npayload = { \"key1\": \"value1\",\"key2\": \"value2\"}\r\nfile_path = \"response.json\"\r\n\r\n\r\n\r\n#x='aaabbbcc' to '3a3b2c'\r\nfrom itertools import groupby\r\ninput1 = 'aaabbbcccddd'\r\ngr = groupby(input1)\r\nls = ''.join([v + str(len(list(k))) for v, k in gr])\r\nprint(ls)\r\n\r\n\r\n\r\n\r\n#Convert binary number into integer\r\nbinary_string=\"01010101\"\r\ndecimal_number = int(binary_string,2)\r\nprint(decimal_number)\r\n\r\n\r\n#Convert integer into dbinary number\r\ndecimal_number = 5\r\nbinary_string = bin(decimal_number)[2:]\r\nprint(binary_string)\r\n\r\n#How to reverse the number into reverse order\r\n\r\nn = 294389374\r\nreversed_n = 0\r\n\r\nwhile n > 0:\r\n    reversed_n = (reversed_n * 10) + (n % 10)\r\n    n = n // 10\r\n\r\nprint(reversed_n)\r\n\r\n#Check the pattrens for checking whether corrector not\r\n\r\ndef check_pattern(s):\r\n    stack = []\r\n    opening = \"({[\"\r\n    closing = \")}]\"\r\n    pairs = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\r\n    \r\n    for char in s:\r\n        if char in opening:\r\n            stack.append(char)\r\n        elif char in closing:\r\n            if len(stack) == 0 or stack[-1] != pairs[char]:\r\n                return False\r\n            stack.pop()\r\n    \r\n    return len(stack) == 0\r\n\r\n\r\nS1 = \"({[]})\"\r\nS2 = \"}([])}\"\r\nS3 = \"})[](}\"\r\n\r\nprint(check_pattern(S1))  # True\r\nprint(check_pattern(S2))  # False\r\nprint(check_pattern(S3))  # False\r\n\r\n#Difference between is and ==\r\n\r\n#1) is to check the identity and should have same meomory address\r\n#2)== to check the equality.\r\n\r\na=[1,2,3,4,5]\r\n\r\nb=a\r\n\r\nc = a[:]\r\nprint(b)\r\n\r\n# it will check for equality\r\nprint(a == b)#True\r\n\r\nprint(a is b)#True\r\n\r\nprint(a == b)#True\r\n# it will check for identity and equality means should have same meomory address\r\n# after copying it will occupies different meomory address\r\n\r\nprint(a is c)#false\r\n\r\n#1)== is for value equality. It's used to know if two objects have the same value.\r\n#2)is is for reference equality. It's used to know if two references refer\r\n#                       (or point)to the same object, i.e if they're identical.\r\n#Two objects are identical if they have the same memory address.\r\n\r\n#pandas\r\n#------------------------------------------------------\r\n#what is syntax for the dataframe\r\n\r\n#pandas.DataFrame( data, index, columns, dtype, copy)\r\n\r\n\r\n#how to create the dataframe add the new column and modify the existing column\r\n#how will you convert txt to csv\r\n#how will you convert txt to excell\r\n#how will you convert txt to tsv\r\n#How would you iterate over rows in a DataFrame in Pandas?\r\n#How are iloc() and loc() different?\r\n#How can you sort the DataFrame?\r\n#How can you find the row for which the value of a specific column is max or min?\r\n# Compare the Pandas methods: map(), applymap(), apply()\r\n#How do you split a DataFrame according to a boolean criterion?\r\n#Is it a good idea to iterate over DataFrame rows in Pandas?\r\n#Name the advantage of using applymap() vs apply() method\r\n#What is the difference(s) between merge() and concat() in Pandas?\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python and Python_Interview_Questions/Python_interview_questions.py b/python and Python_Interview_Questions/Python_interview_questions.py
--- a/python and Python_Interview_Questions/Python_interview_questions.py	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/python and Python_Interview_Questions/Python_interview_questions.py	(date 1704681408763)
@@ -1642,8 +1642,8 @@
 
 #1)== is for value equality. It's used to know if two objects have the same value.
 #2)is is for reference equality. It's used to know if two references refer
-#                       (or point)to the same object, i.e if they're identical.
-#Two objects are identical if they have the same memory address.
+#    (or point)to the same object, i.e if they're identical.
+#    Two objects are identical if they have the same memory address.
 
 #pandas
 #------------------------------------------------------
Index: Pyspark/Py Spark.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># PySpark – Create an empty DataFrameprint(\"#Create empty RDD Using Pyspark\")\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\nemptyRDD = spark.sparkContext.emptyRDD()\r\nprint(emptyRDD)\r\n\r\n\r\n#print(\"#create empty RDD using parallelize\")\r\nrdd2= spark.sparkContext.parallelize([])\r\nprint(rdd2)\r\n\r\n\r\n#print(\"#create DataFrame with Schema()(Struct Type)\")\r\nfrom pyspark.sql.types import StructType,StructField\r\nschema = StructType([StructField('fristname',StringType(),True),StructField('middlename',StringType(),True),StructField('lastname',StringType(),True)])\r\ndf =spark.createDataFrame(emptyRDD,schema)\r\ndf.printSchema()\r\n\r\n\r\n\r\n\r\n#print(\"#Create empty RDD to Schema\")\r\ndf =emptyRDD.toDF(schema)\r\nprint(df)\r\n\r\n\r\n#print(\"#create DataFrame directly\")\r\ndf = spark.createDataFrame([],schema)\r\ndf.printSchema()\r\n\r\n\r\n#print(\"#create DataFrame without Schema(no columns\")\r\ndf = spark.createDataFrame([],StructType([]))\r\ndf.printSchema()\r\n\r\n\r\n# PySpark – Convert RDD to DataFrame\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndept = [(\"Finace\",20),(\"Markteing\",30),(\"Sales\",40),(\"IT\",50)]\r\ndeptColumns = [\"Department\",\"rank\"]\r\nrdd =spark.sparkContext.parallelize(dept)\r\n#rdd to Dataframes \r\ndf = rdd.toDF(deptColumns)\r\ndf.printSchema()\r\ndf.show(truncate=False)\r\n\r\n\r\n\r\n\r\n#print(\"#Using create DataFrame using pyspark\")\r\ndf = spark.createDataFrame(rdd,schema=deptColumns)\r\ndf.printSchema()\r\ndf.show(truncate=False)\r\n        \r\n        \r\n#print(\"#Create DataFrame using StructType Schema\")\r\nfrom pyspark.sql.types import StructType,StructField,StringType\r\nschema = StructType([StructField('Department',StringType(),True),StructField('Rank',StringType(),True)]) \r\ndf = spark.createDataFrame(rdd,schema=schema)\r\ndf.printSchema()\r\ndf.show(truncate=False)\r\n\r\n\r\n\r\n# PySpark – Convert DataFrame to Pandas\r\n#Note --- for RDD creation #rdd =spark.sparkContext.parallelize(dept)\r\n#Note ---for DataFrame creation:pysparkDF =spark.createDataFrame(data=data,schema =columns)\r\n#Note without Schema : pysparkDF =spark.createDataFrame(data=data,schema =columns) By default we get it\r\n#Note with Schema we can get it by Struct Type,StructFeild,StringType we can customise what we want\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata = [(\"James\",\"\",\"Smith\",\"36636\",\"M\",60000),(\"Michael\",\"Rose\",\"\",\"40288\",\"M\",70000),\r\n        (\"Robert\",\"\",\"Williams\",\"42114\",\"\",400000),(\"Maria\",\"Anne\",\"Jones\",\"39192\",\"F\",500000),\r\n        (\"Jen\",\"Mary\",\"Brown\",\"\",\"F\",0)]\r\n\r\ncolumns = [\"first_name\",\"middle_name\",\"last_name\",\"dob\",\"gender\",\"salary\"]\r\npysparkDF =spark.createDataFrame(data=data,schema =columns)\r\npysparkDF.show(truncate=False)\r\n\r\n#Converting DataFrame to pandas \r\nDFpandasDF =pysparkDF.toPandas()\r\nprint(DFpandasDF)\r\n\r\n#converting Pyspark DF to pandas \r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import StringType,StructType,IntegerType\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\n\r\ndata = [(\"James\",\"\",\"Smith\",\"36636\",\"M\",60000),(\"Michael\",\"Rose\",\"\",\"40288\",\"M\",70000),\r\n        (\"Robert\",\"\",\"Williams\",\"42114\",\"\",400000),(\"Maria\",\"Anne\",\"Jones\",\"39192\",\"F\",500000),\r\n        (\"Jen\",\"Mary\",\"Brown\",\"\",\"F\",0)]\r\n\r\npysparkColumns = StructType([StructField(\"frist_name\",StringType(),True),StructField(\"middle_name\",StringType(),True),StructField(\"last_name\",StringType(),True),StructField(\"dob\",StringType(),True),StructField(\"gender\",StringType(),True),StructField(\"salary\",StringType(),True)])\r\ncolumns = [\"first_name\",\"middle_name\",\"last_name\",\"dob\",\"gender\",\"salary\"]\r\npysparkDF =spark.createDataFrame(data=data,schema = pysparkColumns)\r\npysparkDF.show(truncate=False)\r\n\r\n\r\n#converting Pyspark DF to pandas \r\nDFpandasDF =pysparkDF.toPandas()\r\nprint(DFpandasDF)\r\n\r\n\r\n# Default - displays 20 rows and # 20 charactes from column value pysparkDF.show()\r\n# #Display full column contentspysparkDF.show(truncate=False)\r\n# # Display 2 rows and full column contentspysparkDF.show(2,truncate=False) \r\n# # Display 2 rows & column values 25 characterspysparkDF.show(2,truncate=25)\r\n#  # Display DataFrame rows & columns verticallypysparkDF.show(n=3,truncate=25,vertical=True)\r\n# PySpark – StructType & StructField\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import StringType,StructType,IntegerType\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata = [(\"James\",\"\",\"Smith\",\"36636\",\"M\",60000),(\"Michael\",\"Rose\",\"\",\"40288\",\"M\",70000),(\"Robert\",\"\",\"Williams\",\"42114\",\"\",400000),(\"Maria\",\"Anne\",\"Jones\",\"39192\",\"F\",500000),(\"Jen\",\"Mary\",\"Brown\",\"\",\"F\",0)]\r\npysparkColumns = StructType([StructField(\"frist_name\",StringType(),True),StructField(\"middle_name\",StringType(),True),StructField(\"last_name\",StringType(),True),StructField(\"dob\",StringType(),True),StructField(\"gender\",StringType(),True),StructField(\"salary\",StringType(),True)])\r\ncolumns = [\"first_name\",\"middle_name\",\"last_name\",\"dob\",\"gender\",\"salary\"]\r\npysparkDF =spark.createDataFrame(data=data,schema = pysparkColumns)\r\npysparkDF.printSchema()\r\npysparkDF.show(truncate=False)\r\n\r\n\r\n#Adding the Dataframe and with the schema\r\nfrom pyspark.sql.types import StringType,StructType,IntegerType,StructField\r\nstructureData = [((\"James\",\"\",\"Smith\"),\"36636\",\"M\",3100),((\"Michael\",\"Rose\",\"\"),\"40288\",\"M\",4300),((\"Robert\",\"\",\"Williams\"),\"42114\",\"M\",1400),((\"Maria\",\"Anne\",\"Jones\"),\"39192\",\"F\",5500),((\"Jen\",\"Mary\",\"Brown\"),\"\",\"F\",-1)]\r\nstructureSchema = StructType([StructField('name', StructType([StructField('firstname', StringType(), True),StructField('middlename', StringType(), True),StructField('lastname', StringType(), True)])),StructField('id', StringType(), True),StructField('gender', StringType(), True),StructField('salary', IntegerType(), True)])\r\ndf2 = spark.createDataFrame(data=structureData,schema=structureSchema)\r\ndf2.printSchema()\r\ndf2.show(truncate=False)\r\n\r\n\r\n#5. Adding & Changing struct of the DataFrame\r\nfrom pyspark.sql.functions import col, when, struct\r\nupdatedDF = df2.withColumn(\"Otherinfo\",struct(col(\"id\").alias(\"identifier\"),col(\"gender\").alias(\"gender\"),col(\"salary\").alias(\"salary\"),when(col(\"salary\").cast(IntegerType()) > 2000 , \"Low\")\r\n                                              .when(col(\"salary\").cast(IntegerType()) > 4000 , \"High\").otherwise(\"High\").alias(\"Salary_Grade\"))).drop(\"id\",\"gender\",\"salary\")\r\nupdatedDF.printSchema()\r\nupdatedDF.show(truncate = False)\r\n\r\n\r\n# PySpark – Column Class\r\n# PySpark Column Class | Operators & Functions\r\nfrom pyspark.sql.functions import lit\r\ncolobj =lit('sparkbyexamples.com')\r\ndata = [(\"James\",23),(\"Ann\",40)]\r\ndf = spark.createDataFrame(data).toDF(\"name\",\"gender\")\r\ndf.printSchema()\r\n\r\n\r\n\r\n#with df.select(df.gender).show()\r\n#with bracketsdf.select(df[\"gender\"]).show()\r\n#with col\r\nfrom pyspark.sql.functions import col\r\ndf.select(col(\"gender\")).show()\r\ndf.select(col(\"name\")).show()\r\n\r\n\r\n\r\n#Create DataFrame with struct using Row class\r\nfrom pyspark.sql import Row\r\ndata = [Row(name=\"James\",prop=Row(hair=\"black\",eyes=\"blue\")),\r\n        Row(name=\"Ann\",prop=Row(hair=\"grey\",eyes=\"black\"))]\r\ndf = spark.createDataFrame(data)\r\ndf.printSchema()\r\n\r\ndf.select(df.prop.hair).show()\r\ndf.select(df[\"prop.hair\"]).show()\r\ndf.select(col(\"prop.hair\")).show()\r\ndf.select(col(\"prop.*\")).show()\r\n\r\n\r\n\r\n#PySpark Column Operatorsdata=[(100,2,1),(200,3,4),(300,4,4)]\r\ndf=spark.createDataFrame(data).toDF(\"col1\",\"col2\",\"col3\")\r\ndf.show()\r\ndf.select(df.col1 + df.col2).show()\r\ndf.select(df.col1 - df.col2).show() \r\ndf.select(df.col1 * df.col2).show()\r\ndf.select(df.col1 / df.col2).show()\r\ndf.select(df.col1 % df.col2).show()\r\ndf.select(df.col2 > df.col3).show()\r\ndf.select(df.col2 < df.col3).show()\r\ndf.select(df.col2 == df.col3).show()\r\n\r\n#working with alias \r\ndata=[(\"James\",\"Bond\",\"100\",None),(\"Ann\",\"Varsa\",\"200\",'F'),(\"Tom Cruise\",\"XXX\",\"400\",''),(\"Tom Brand\",None,\"400\",'M')]\r\ncolumns=[\"fname\",\"lname\",\"id\",\"gender\"]\r\ndf=spark.createDataFrame(data,columns)\r\ndf.show(truncate=False)\r\ndf.select(df.fname.alias(\"fristname\")).show()\r\ndf.select(df.lname.alias(\"lastname\")).show()\r\ndf.select(df.id.alias(\"Information Details\")).show()\r\n\r\n\r\n\r\n\r\n#expr condition is used to merge the two columns in single columns\r\nfrom pyspark.sql.functions import expr\r\ndf.select(expr(\"fname ||',' || lname\").alias(\"fullname\")).show()\r\ndata=[(\"James\",\"Bond\",\"100\",None),(\"Ann\",\"Varsa\",\"200\",'F'),(\"Tom Cruise\",\"XXX\",\"400\",''),(\"Tom Brand\",None,\"400\",'M')]\r\ncolumns=[\"fname\",\"lname\",\"id\",\"gender\"]\r\ndf=spark.createDataFrame(data,columns)\r\ndf.show()\r\ndf.printSchema()\r\ndf.sort(df.fname.asc()).show()\r\n\r\n\r\n\r\n# for sorting the selected columns df.sort(df.fname.desc()).show()\r\n#for selecting the individual columns df.select(df.fname.alias(\"fristname\")).show()\r\n#cast conversion for selected columnsdf.select(df.fname,df.lname,df.gender,df.id.cast(\"int\")).printSchema()\r\n#between() -returns Boolean expression when a column value in between upper and lower bound.\r\ndf.filter(df.id.between(100,300)).show()\r\n\r\n\r\n\r\n#contains checks if Dataframe columns value contains a specified in the function\r\ndf.filter(df.fname.contains(\"Cruise\")).show()\r\n\r\n\r\n#startswith() & endswith() – Checks if the value of the DataFrame Column starts and ends with a String\r\ndf.filter(df.fname.startswith(\"T\")).show()\r\ndf.filter(df.fname.endswith(\"Cruise\")).show()\r\n\r\n\r\n\r\n#isNull & isNotNull() – Checks if the DataFrame column has NULL or non NULL values.\r\ndf.filter(df.lname.isNull()).show()\r\ndf.filter(df.lname.isNotNull()).show()\r\n\r\n\r\n\r\n#like() & rlike() – Similar to SQL LIKE expression\r\n#like , rlikedf.select(df.fname,df.lname,df.id).filter(df.fname.like(\"%om\")).show()\r\n#substr() - Returns from the columns \r\ndf.select(df.fname.substr(1,2).alias(\"substr\")).show()\r\n\r\n\r\n\r\n\r\n\r\n#4.11 when() & otherwise() – It is similar to SQL Case When, executes sequence of expressions until it matches the condition and returns a value when match.\r\nfrom pyspark.sql.functions import when\r\ndf.select(df.fname,df.id,df.lname,when(df.gender=='M',\"Male\")\r\n          .when(df.gender==\"F\",\"Female\")\r\n          .when(df.gender==None,\"\")\r\n          .otherwise(df.gender).alias(\"new_gender\")).show()\r\n\r\n\r\n\r\n#isin() – Check if value presents in a List.\r\nli=[\"100\",\"200\"]\r\ndf.select(df.fname,df.lname,df.id).filter(df.id.isin(li)).show()\r\n\r\n\r\n#ArrayType -- for list#Map Type  -- for dictionary#String Type -- for string \r\n#getField() – To get the value by key from MapType column and by stuct child name from StructType column\r\nfrom pyspark.sql.types import StringType,StructType,StructField,ArrayType,MapType\r\ndata=[((\"James\",\"Bond\"),[\"Java\",\"C#\"],{'hair':'black','eye':'brown'}),((\"Ann\",\"Varsa\"),[\".NET\",\"Python\"],{'hair':'brown','eye':'black'}),((\"Tom Cruise\",\"\"),[\"Python\",\"Scala\"],{'hair':'red','eye':'grey'}),((\"Tom Brand\",None),[\"Perl\",\"Ruby\"],{'hair':'black','eye':'blue'})]\r\nschema = StructType([StructField('name',StructType([StructField('fname',StringType(),True),StructField('lname',StringType(),True)])),StructField('languages',ArrayType(StringType()),True),StructField('properties',MapType(StringType(),StringType()),True)])\r\ndf =spark.createDataFrame(data,schema)\r\ndf.printSchema()\r\n\r\n\r\n\r\n\r\n#getField from MapType\r\ndf.select(df.properties.getField(\"hair\")).show()\r\n#getItem() used with MapType\r\ndf.select(df.properties.getItem(\"hair\")).show()\r\n#get Field from array Type\r\ndf.select(df.languages.getItem(1)).show()\r\n#get Field from Struct\r\ndf.select(df.name.getField(\"fname\")).show()\r\n\r\n\r\n\r\n\r\n# PySpark – select()\r\n# #pyspark select columns from Dataframe\r\nimport pyspark \r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata = [(\"James\",\"Smith\",\"USA\",\"CA\"),(\"Michael\",\"Rose\",\"USA\",\"NY\"),(\"Robert\",\"Williams\",\"USA\",\"CA\"),(\"Maria\",\"Jones\",\"USA\",\"FL\")]\r\ncolumns = [\"firstname\",\"lastname\",\"country\",\"state\"]\r\ndf = spark.createDataFrame(data = data, schema = columns)\r\ndf.show(truncate=False)\r\n\r\n\r\n\r\n#select single and Multiple columns from DataFrame\r\n# #m-1\r\ndf.select(\"firstname\",\"lastname\").show()\r\n#M-2\r\ndf.select(df.firstname,df.lastname).show()\r\n#M-3\r\ndf.select(df[\"firstname\"],df[\"lastname\"]).show()\r\n#M-4\r\n \r\n\r\nfrom pyspark.sql.functions import col\r\ndf.select(col(\"firstname\"),col(\"lastname\")).show()\r\n\r\n\r\n\r\n\r\n\r\n\r\n#ALL columns from the list\r\ndf.select(*columns).show()\r\ndf.select('*').show()\r\ndf.select([col for col in df.columns]).show()\r\n\r\n\r\n#select columns from the list\r\n# #columns 0 to 3\r\n# #rows-3\r\ndf.select(df.columns[:3]).show(3)\r\n\r\n\r\n\r\n\r\n#for nested columns \r\nfrom pyspark.sql.types import StructType,StructField, StringType\r\ndata = [((\"James\",None,\"Smith\"),\"OH\",\"M\"),((\"Anna\",\"Rose\",\"\"),\"NY\",\"F\"),((\"Julia\",\"\",\"Williams\"),\"OH\",\"F\"),((\"Maria\",\"Anne\",\"Jones\"),\"NY\",\"M\"),((\"Jen\",\"Mary\",\"Brown\"),\"NY\",\"M\"),((\"Mike\",\"Mary\",\"Williams\"),\"OH\",\"M\")]\r\nschema = StructType([StructField('name', StructType([StructField('firstname', StringType(), True),StructField('middlename', StringType(), True),StructField('lastname', StringType(), True)])),StructField('state', StringType(), True),StructField('gender', StringType(), True)])\r\ndf2 = spark.createDataFrame(data = data, schema = schema)\r\ndf2.printSchema()\r\ndf2.show(truncate=False)\r\n\r\n\r\n\r\n\r\n\r\n#for nested columns\r\ndf2.select(\"name.firstname\",\"name.lastname\").show(truncate=False)\r\n\r\n\r\n# PySpark – collect()# Select vs Collect both  are used for the retriving data from the data sets \r\n#Collect - Disadvanages not used for larger datasets we need to avoid \r\n# # select we need to use all the time  \r\n# PySpark – collect()\r\ndata=[(\"James\",\"Bond\",\"100\",None),(\"Ann\",\"Varsa\",\"200\",'F'),(\"Tom Cruise\",\"XXX\",\"400\",''),(\"Tom Brand\",None,\"400\",'M')]\r\ncolumns=[\"fname\",\"lname\",\"id\",\"gender\"]\r\ndf=spark.createDataFrame(data,columns)\r\ndf.show(truncate=False)\r\ndataCollect = df.collect()\r\nprint(dataCollect)\r\n\r\n\r\n#Returns value of First Row, First Column which is \"Finance\"\r\n#[0]--indicate Row#[1]--columndf.collect()[0][1]df.collect()\r\n#returns Array of Row type.df.collect()[0] \r\n#returns the first element in an array (1st row).\r\n\r\n\r\n\r\n\r\n\r\n# PySpark – withColumn()\r\n#DataFrame which is used to change the value, convert the datatype of an existing column, create a new column\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata = [('James','','Smith','1991-04-01','M',3000),('Michael','Rose','','2000-05-19','M',4000),('Robert','','Williams','1978-09-05','M',4000),('Maria','Anne','Jones','1967-12-01','F',4000),('Jen','Mary','Brown','1980-02-17','F',-1)]\r\ncolumns = [\"firstname\",\"middlename\",\"lastname\",\"dob\",\"gender\",\"salary\"]\r\ndf = spark.createDataFrame(data=data, schema = columns)\r\ndf.show()\r\ndf.printSchema()\r\n\r\n\r\n\r\n# PySpark – withColumn()#1)Change DataType using PySpark withColumn()\r\n# #Note - we can do cast conversion using select and withcolumn\r\nfrom pyspark.sql.functions import col,lit\r\ndf.withColumn(\"salary\",col(\"salary\").cast(\"Integer\")).printSchema() \r\n\r\n\r\n##--- total column printed along with wanted column\r\ndf.select(df.firstname,df.middlename,df.salary.cast(\"int\")).printSchema() \r\n\r\n##---required columns only printed\r\n#cast conversion for selected columns --- Using Select\r\ndf.select(df.fname,df.lname,df.gender,df.id.cast(\"int\")).printSchema()\r\n\r\n#2. Update The Value of an Existing Column\r\ndf.withColumn(\"salary\",col(\"salary\")*100).show()\r\n\r\n#3. Create a Column from an Existing\r\ndf.withColumn(\"Copiedcolumn\",col(\"salary\")-200).show()\r\n\r\n#4. Add a New Column using withColumn()\r\n#Note - PySpark lit() function is used to add a constant value to a DataFrame column.\r\ndf.withColumn(\"added new column\",lit(\"USA\")).show()\r\n\r\n\r\n#5. Rename Column Name usng ---withColumn\r\ndf.withColumnRenamed(\"gender\",\"sex\").show() \r\n\r\n#6--- total column printed along with wanted column\r\ndf.select(df.gender.alias(\"sex\")).show()\r\n\r\n#7 --- only selected column printed\r\n#Note -- for renaming the columns --- Using Select# \r\ndf.select(df.fname.alias(\"fristname\")).show()\r\ndf.select(df.lname.alias(\"lastname\")).show()\r\ndf.select(df.id.alias(\"Information Details\")).show()\r\n\r\n#8Drop Column From PySpark DataFrame\r\ndf.drop(\"salary\").show()\r\n\r\n\r\n\r\n# PySpark – withColumnRenamed()\r\n#1. Rename Column Name usng ---withColumn\r\ndf.withColumnRenamed(\"gender\",\"sex\").show() \r\n\r\n\r\n\r\n#--- total column printed along with wanted column\r\ndf.select(df.gender.alias(\"sex\")).show()\r\n\r\n\r\n\r\n# --- only selected column printed\r\n#2)2. PySpark withColumnRenamed – To rename multiple columns\r\ndf.withColumnRenamed(\"firstname\",\"FRIST_NAME\").withColumnRenamed(\"lastname\",\"LAST_NAME\").show()\r\n\r\n\r\n\r\n\r\n# PySpark – where() & filter()\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata = [('James','','Smith','1991-04-01','M',3000),('Michael','Rose','','2000-05-19','M',4000),('Robert','','Williams','1978-09-05','M',4000),('Maria','Anne','Jones','1967-12-01','F',4000),('Jen','Mary','Brown','1980-02-17','F',-1)]\r\ncolumns = [\"firstname\",\"middlename\",\"lastname\",\"dob\",\"gender\",\"salary\"]\r\ndf = spark.createDataFrame(data=data, schema = columns)\r\ndf.show()\r\ndf.printSchema()\r\n\r\n\r\n\r\n#2. DataFrame filter() with Column Condition\r\ndf.filter(df.gender == 'M').show()\r\n\r\n\r\n\r\n\r\n#3. DataFrame filter() with SQL Expression\r\nfrom pyspark.sql.functions import col\r\ndf.filter(col(\"gender\")== 'M').show()\r\n# Not equals condition\r\ndf.filter(df.gender != \"M\").show(truncate=False)\r\ndf.filter(~(df.gender == \"M\")).show(truncate=False)\r\n\r\n\r\n#4. PySpark Filter with Multiple Conditions\r\ndf.filter((df.gender=='M') & (df.salary == 4000)).show()\r\n\r\n\r\n\r\n#5. Filter Based on List Values\r\nli=[4000,1000]\r\ndf.filter(df.salary.isin(li)).show()\r\n\r\n\r\n\r\n\r\n# PySpark – drop() & dropDuplicates()\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata = [('James','','Smith','1991-04-01','M',3000),('Michael','Rose','','2000-05-19','M',4000),('Robert','','Williams','1978-09-05','M',4000),('Maria','Anne','Jones','1967-12-01','F',4000),('Jen','Mary','Brown','1980-02-17','F',-1)]\r\ncolumns = [\"firstname\",\"middlename\",\"lastname\",\"dob\",\"gender\",\"salary\"]\r\ndf = spark.createDataFrame(data=data, schema = columns)\r\ndf.show()\r\ndf.printSchema()\r\n\r\n\r\ndisntict_df = df.distinct()\r\nprint(\"Distinct count: \" +str(disntict_df.count()))\r\ndisntict_df.show()\r\n\r\n#apply on rows for droping duplicate records\r\ndf2 = df.dropDuplicates()\r\nprint(\"Distinct count: \"+str(df2.count()))\r\ndf2.show(truncate=False)\r\n\r\n\r\n\r\n#applying on multiple columns for dropping duplicate records\r\ndropDisDF = df.dropDuplicates([\"gender\",\"salary\"])\r\ndropDisDF.show(truncate=False)\r\n\r\n\r\n\r\n# PySpark – orderBy() and sort()\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata =[('James','','Smith','1991-04-01','M',3000),('Michael','Rose','','2000-05-19','M',4000),('Robert','','Williams','1978-09-05','M',4000),('Maria','Anne','Jones','1967-12-01','F',4000),('Jen','Mary','Brown','1980-02-17','F',-1)]\r\ncolumns = [\"firstname\",\"middlename\",\"lastname\",\"dob\",\"gender\",\"salary\"]\r\ndf = spark.createDataFrame(data=data, schema = columns)\r\ndf.show()\r\ndf.printSchema()\r\n\r\n\r\n\r\n#1)DataFrame sorting using the sort() function\r\n#Note -- by default it will sort ascending order\r\n#sort    --df.firstname\r\n#        --col(\"firstname\")\r\n#Orderby --col(\"firstname\")\r\ndf.sort(\"firstname\",\"lastname\").show(truncate=False)\r\ndf.sort(col(\"firstname\"),col(\"lastname\")).show(truncate=False)\r\n\r\ndf.sort(df.firstname.asc(),df.lastname.asc()).show(truncate=False)\r\ndf.sort(col(\"firstname\").asc(),col(\"lastname\").asc()).show(truncate=False)\r\n\r\ndf.sort(df.firstname.asc(),df.lastname.desc()).show(truncate=False)\r\ndf.sort(col(\"firstname\").asc(),col(\"lastname\").desc()).show(truncate=False)\r\n\r\n# orderBy() function to sort on one or more columns. By default, it orders by ascending.\r\ndf.orderBy(\"firstname\",\"lastname\").show(truncate=False)\r\ndf.orderBy(col(\"firstname\"),col(\"lastname\")).show(truncate=False)\r\n\r\n\r\n\r\n\r\n\r\n#PySpark – groupBy()\r\n#PySpark groupBy() function is used to collect the identical data into groups on DataFrame and perform count, sum, avg, min, max functions on the grouped data\r\n#sum() – Returns the total for values for each group.\r\n#avg() – Returns the average for values for each group.\r\n#mean() – Returns the mean of values for each group.\r\n#max() – Returns the maximum of values for each group.\r\n#min() – Returns the minimum of values for each group.\r\n#agg() – Using groupBy() agg() function, we can calculate more than one aggregate at a time\r\n\r\n\r\nsimpleData = [(\"James\",\"Sales\",\"NY\",90000,34,10000),(\"Michael\",\"Sales\",\"NY\",86000,56,20000),(\"Robert\",\"Sales\",\"CA\",81000,30,23000),(\"Maria\",\"Finance\",\"CA\",90000,24,23000),(\"Raman\",\"Finance\",\"CA\",99000,40,24000),(\"Scott\",\"Finance\",\"NY\",83000,36,19000),(\"Jen\",\"Finance\",\"NY\",79000,53,15000),(\"Jeff\",\"Marketing\",\"CA\",80000,25,18000),(\"Kumar\",\"Marketing\",\"NY\",91000,50,21000)]\r\nschema = [\"employee_name\",\"department\",\"state\",\"salary\",\"age\",\"bonus\"]\r\ndf = spark.createDataFrame(data=simpleData, schema = schema)\r\ndf.printSchema()\r\ndf.show(truncate=False)\r\ndf.groupBy(\"department\").sum(\"salary\").show(truncate=False)\r\ndf.groupBy(\"department\").count().show()\r\ndf.groupBy(\"department\").min(\"salary\").show()\r\ndf.groupBy(\"department\").max(\"salary\").show()\r\n\r\n\r\n#applying groupby on multiple columns \r\ndf.groupBy(\"department\",\"state\").sum(\"salary\",\"bonus\").show()\r\n#4. Running more aggregates at a time\r\nfrom pyspark.sql.functions import sum,avg,max\r\ndf.groupBy(\"department\").agg(sum(\"salary\").alias(\"sum_salary\"),avg(\"salary\").alias(\"avg_salary\"),sum(\"bonus\").alias(\"sum_bonus\"),max(\"bonus\").alias(\"max_bonus\")).show(truncate=False)\r\n#5. Using filter on aggregate data\r\nfrom pyspark.sql.functions import sum,avg\r\n\r\ndf.groupBy(\"department\").agg(sum(\"salary\").alias(\"sum_salary\"),\r\n                                avg(\"salary\").alias(\"avg_salary\"),\r\n                                sum(\"bonus\").alias(\"sum_bonus\"),\r\n                                max(\"bonus\").alias(\"max_bonus\")).where(col(\"sum_bonus\") >= 50000).show(truncate=False)\r\n\r\n# PySpark – join()\r\nemp = [(1,\"Smith\",-1,\"2018\",\"10\",\"M\",3000),(2,\"Rose\",1,\"2010\",\"20\",\"M\",4000),(3,\"Williams\",1,\"2010\",\"10\",\"M\",1000),(4,\"Jones\",2,\"2005\",\"10\",\"F\",2000),(5,\"Brown\",2,\"2010\",\"40\",\"\",-1),(6,\"Brown\",2,\"2010\",\"50\",\"\",-1)]\r\nempColumns = [\"emp_id\",\"name\",\"superior_emp_id\",\"year_joined\",\"emp_dept_id\",\"gender\",\"salary\"]\r\nempDF = spark.createDataFrame(data=emp, schema = empColumns)\r\nempDF.printSchema()\r\nempDF.show(truncate=False)\r\n\r\n\r\ndept = [(\"Finance\",10),(\"Marketing\",20),(\"Sales\",30),(\"IT\",40)]\r\ndeptColumns = [\"dept_name\",\"dept_id\"]\r\ndeptDF = spark.createDataFrame(data=dept, schema = deptColumns)\r\ndeptDF.printSchema()\r\ndeptDF.show(truncate=False)\r\n\r\n\r\nprint(\"#3. PySpark Inner Join DataFrame\")# This joins two datasets on key columns, where keys don’t match the rows get dropped from both datasets (emp & #dept)\r\n\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"inner\").show(truncate=False)\r\nprint(\"#4. PySpark Full Outer Join\")\r\n# Outer a.k.a full, fullouter join returns all rows from both datasets, where join expression doesn’t match it #returns null on respective record columns# \r\n\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"Outer\").show(truncate=False)\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"full\").show(truncate=False)\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"fullouter\").show(truncate=False)\r\n\r\nprint(\"#5. PySpark Left Outer Join\")\r\n\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"left\").show(truncate=False)\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"leftouter\").show(truncate=False)\r\n\r\nprint(\"#6. Right Outer Join\") \r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"right\").show(truncate=False)\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"rightouter\").show(truncate=False)\r\n\r\nprint('''#7. Left Semi Join--leftsemi join returns all columns from the left dataset and ignores all columns from the right dataset''')\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"leftsemi\").show(truncate=False)\r\n\r\nprint(\"#8. Left Anti Join--leftanti join returns only columns from the left dataset for non-matched records.\")\r\nempDF.join(deptDF,empDF.emp_dept_id == deptDF.dept_id,\"leftanti\").show(truncate=False)\r\n\r\n# PySpark – union() & unionAll()print('''Dataframe union() – union() method of the DataFrame is used to merge two DataFrame’s of the same structure/schema. If schemas are not the same it returns an error.''')\r\n# DataFrame unionAll() – unionAll() is deprecated since Spark “2.0.0” version and replaced with union().\r\nimport pyspark\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\nsimpleData = [(\"James\",\"Sales\",\"NY\",90000,34,10000),(\"Michael\",\"Sales\",\"NY\",86000,56,20000),(\"Robert\",\"Sales\",\"CA\",81000,30,23000),(\"Maria\",\"Finance\",\"CA\",90000,24,23000)]\r\ncolumns= [\"employee_name\",\"department\",\"state\",\"salary\",\"age\",\"bonus\"]\r\ndf = spark.createDataFrame(data = simpleData, schema = columns)\r\ndf.printSchema()\r\ndf.show(truncate=False)\r\n\r\n\r\nsimpleData2 =[(\"James\",\"Sales\",\"NY\",90000,34,10000),(\"Maria\",\"Finance\",\"CA\",90000,24,23000),(\"Jen\",\"Finance\",\"NY\",79000,53,15000),(\"Jeff\",\"Marketing\",\"CA\",80000,25,18000),(\"Kumar\",\"Marketing\",\"NY\",91000,50,21000)]\r\ncolumns2= [\"employee_name\",\"department\",\"state\",\"salary\",\"age\",\"bonus\"]\r\ndf2 = spark.createDataFrame(data = simpleData2, schema = columns2)\r\ndf2.printSchema()\r\ndf2.show(truncate=False)\r\ndf3=df.union(df2)\r\ndf3.show(truncate=False)\r\n\r\n\r\n# PySpark – unionByName()\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\n\r\n\r\n\r\n# Create DataFrame df1 with columns name, and id\r\ndata = [(\"James\",34),(\"Michael\",56),(\"Robert\",30),(\"Maria\",24)]\r\ndf1 = spark.createDataFrame(data = data,schema=[\"name\",\"id\"])\r\ndf1.printSchema()\r\n\r\n\r\n# Create DataFrame df2 with columns name and id\r\ndata2=[(34,\"James\"),(45,\"Maria\"),(45,\"Jen\"),(34,\"Jeff\")]\r\ndf2 = spark.createDataFrame(data = data2, schema = [\"id\",\"name\"])\r\ndf2.printSchema()\r\ndf3=df2.unionByName(df1)\r\ndf3.show(truncate=False)\r\n\r\n\r\n#if schema having different number of columns then add mention #allowMissingColumns=True\r\n\r\n# Create DataFrames with different column names\r\n\r\ndata1=[[5, 2, 6]]\r\nschema1=[\"col0\", \"col1\", \"col2\"]\r\ndata2=[[6, 7, 3]]\r\nschema2=[\"col1\", \"col2\", \"col3\"]\r\ndf1 = spark.createDataFrame(data=data1,schema =schema1 )\r\ndf2 = spark.createDataFrame(data=data2,schema =schema2)\r\n\r\n\r\n# Using allowMissingColumns\r\ndf3 = df1.unionByName(df2,allowMissingColumns=True)\r\ndf3.printSchemadf3.show()\r\n\r\n# PySpark – UDF (User Defined Function)# select(), withColumn() \r\n# PySpark – UDF (User Defined Function)# select(), withColumn()\r\nfrom pyspark.sql.functions import col,udf\r\nfrom pyspark.sql.types import StringType\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ncolumns = [\"Seqno\",\"Name\"]\r\ndata = [(\"1\", \"john jones\"),(\"2\", \"tracey smith\"),(\"3\", \"amy sanders\")]\r\ndf = spark.createDataFrame(data=data,schema=columns)\r\ndf.show(truncate=False)\r\n\r\n\r\n#2.2 Create a Python Function\r\ndef convertCase(str):\r\n    resStr=\"\"\r\n    arr = str.split(\" \")\r\n    for x in arr:\r\n        resStr= resStr + x[0:1].upper() + x[1:len(x)] + \" \"\r\n        return resStr \r\n    \r\n\r\n#Convert the above python code to UDF\r\nconvertUDF = udf(lambda z: convertCase(z),StringType())\r\ndf.select(col(\"Seqno\"),convertUDF(col(\"Name\")).alias(\"Name\")).show(truncate=False)\r\n\r\n#Now using withColumn we can convert the UDF form \r\n#Note: With column no need to provide the col # Note: Select we should provide the col and should provide the alias \r\ndef UpperCase(str):\r\n    return str.upper()\r\n\r\nconvertUDF = udf(lambda z: UpperCase(z),StringType())\r\ndf.withColumn(\"Cureated Name\", convertUDF(col(\"Name\"))).show(truncate=False)\r\n\r\n\r\n#Creating UDF using Annotation \r\n@udf(returnType=StringType())\r\ndef UpperCase(str):\r\n    return str.upper()\r\ndf.withColumn(\"Created name\",UpperCase(col(\"Name\"))).show(truncate=False)\r\n\r\n\r\n# PySpark – transform()\r\n# Imports\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql.functions import upper\r\nfrom pyspark.sql.functions import transform\r\nSparkSessionspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\nDatasimpleData = ((\"Java\",4000,5),(\"Python\",4600,10),(\"Scala\",4100,15),(\"Scala\",4500,15),(\"PHP\", 3000,20))\r\ncolumns= [\"CourseName\", \"fee\", \"discount\"]\r\nDataFramedf = spark.createDataFrame(data = simpleData, schema = columns)\r\ndf.printSchema()\r\ndf.show(truncate=False)\r\n\r\n\r\n#. PySpark DataFrame.transform()\r\nfrom pyspark.sql.functions import upper\r\ndef to_upper_str_columns(df):\r\n    return df.withColumn(\"CourseName\",upper(df.CourseName))\r\n\r\n#reduce prize\r\ndef reduce_price(df,reduceBy):\r\n    return df.withColumn(\"new_fee\",df.fee-reduceBy)\r\n#apply discount \r\n\r\ndef apply_discount(df):\r\n    return df.withColumn(\"Discount_fee\",(df.new_fee-df.discount)/100)\r\n# custom function\r\n \r\ndef select_columns(df):\r\n    return df.select(\"CourseName\",\"discounted_fee\")\r\n\r\n\r\ndf2 = df.transform(to_upper_str_columns).transform(reduce_price,1000).transform(apply_discount).transform(select_columns)\r\n\r\n# PySpark – apply()# PySpark – apply()\r\n\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ncolumns = [\"Seqno\",\"Name\"]\r\ndata = [(\"1\", \"john jones\"),(\"2\", \"tracey smith\"),(\"3\", \"amy sanders\")]\r\ndf = spark.createDataFrame(data=data,schema=columns)\r\ndf.show(truncate=False)\r\n\r\n#1)PySpark apply Function using withColumn()\r\nfrom pyspark.sql.functions import upper\r\ndf.withColumn(\"Uppername\",upper(df.Name)).show(truncate=False)\r\n\r\n#2)Apply Function using select()\r\ndf.select(col(\"Seqno\"),upper(df.Name).alias(\"Name\")).show()\r\n\r\n#3)Create Custom Function\r\ndef UpperCase(str):\r\n    return str.upper()\r\n\r\n# Convert function to udf\r\nfrom pyspark.sql.functions import col, udf\r\nfrom pyspark.sql.types import StringType\r\n#4)Register UDF\r\nconvertUDF = udf(lambda x: UpperCase(x),StringType())\r\n\r\n#5)Apply Custom UDF to Column\r\ndf.select(col(\"Seqno\"),convertUDF(col(\"Name\").alias(\"Name\")))\r\ndf.show()\r\n\r\n#withColumn\r\ndf.withColumn(\"Created_with_column\",convertUDF(col(\"Name\"))).show()\r\n\r\n#6)PySpark Pandas apply()# Imports\r\n \r\nimport pyspark.pandas as ps \r\nimport numpy as np\r\ntechnologies = ({'Fee' :[20000,25000,30000,22000,np.NaN],'Discount':[1000,2500,1500,1200,3000]})\r\n# Create a DataFrameps\r\ndf = ps.DataFrame(technologies)\r\nprint(df)\r\n\r\ndef add(data):\r\n    return data[0] + data[1]\r\naddDF = df.apply(add,axis=1)\r\nprint(addDF)\r\n\r\n\r\n# PySpark – map()# PySpark – map()\r\ndata = [('James','Smith','M',30),('Anna','Rose','F',41),('Robert','Williams','M',62)]\r\ncolumns = [\"firstname\",\"lastname\",\"gender\",\"salary\"]\r\ndf = spark.createDataFrame(data=data, schema = columns)\r\ndf.show()\r\n\r\n# Refering columns by index.\r\nrdd2=df.rdd.map(lambda x: (x[0]+\",\"+x[1],x[2],x[3]*2))\r\ndf2=rdd2.toDF([\"name\",\"gender\",\"new_salary\"])\r\ndf2.show()\r\n\r\n# Referring Column Names\r\nrdd2=df.rdd.map(lambda x:(x[\"firstname\"]+\",\"+x[\"lastname\"],x[\"gender\"],x[\"salary\"]*2))\r\n\r\n# Referring Column Names\r\nrdd2=df.rdd.map(lambda x:(x.firstname+\",\"+x.lastname,x.gender,x.salary*2)) \r\n\r\n#By calling function \r\ndef func1(x):\r\n    firstName = x.firstname\r\n    lastName = x.lastname\r\n    name = firstName+\",\"+lastName\r\n    gender = x.gender.lower()\r\n    salary = x.salary*2\r\n    return (name,gender,salary)\r\n\r\nrdd2 = df.rdd.map(lambda x: func1(x))\r\n\r\n\r\n# PySpark – flatMap()\r\n# PySpark – flatMap()\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\ndata = [\"Project Gutenbergs\",\"Alices Adventures in Wonderland\",\"Project Gutenbergs\",\"Adventures in Wonderland\",\"Project Gutenbergs\"]\r\nrdd=spark.sparkContext.parallelize(data)\r\nfor element in rdd.collect():\r\n    print(element)\r\n\r\n\r\n# Flatmap    \r\nrdd2=rdd.flatMap(lambda x: x.split(\" \"))\r\nfor element in rdd2.collect():\r\n    print(element)\r\n\r\nimport pyspark\r\nfrom pyspark.sql import SparkSession\r\nspark = SparkSession.builder.appName('pyspark-by-examples').getOrCreate()\r\narrayData = [('James',['Java','Scala'],{'hair':'black','eye':'brown'}),('Michael',['Spark','Java',None],{'hair':'brown','eye':None}),('Robert',['CSharp',''],{'hair':'red','eye':''}),('Washington',None,None),('Jefferson',['1','2'],{})]\r\ndf = spark.createDataFrame(data=arrayData, schema = ['name','knownLanguages','properties'])\r\ndf.show(truncate=False)\r\n\r\n\r\n\r\nfrom pyspark.sql.functions import explode\r\ndf2 = df.select(df.name,explode(df.knownLanguages))\r\ndf2.printSchema()\r\ndf2.show()\r\n\r\n# PySpark – foreach()# Import\r\nfrom pyspark.sql import SparkSession\r\n# Create SparkSession\r\nspark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()\r\n# Prepare Datacolumns\r\nDatacolumns = [\"Seqno\",\"Name\"]\r\ndata = [(\"1\", \"john jones\"),(\"2\", \"tracey smith\"),(\"3\", \"amy sanders\")]\r\n# Create DataFrame\r\ndf = spark.createDataFrame(data=data,schema=columns)\r\ndf.show()\r\n# foreach()\r\n#  Example\r\ndef f(df):\r\n    print(df.Seqno)\r\ndf.foreach(f)\r\n\r\n\r\n\r\n\r\n# PySpark – sample() vs sampleBy()\r\n# PySpark – sample() vs sampleBy()#fraction – Fraction of rows to generate, range [0.0, 1.0]. \r\n# Note that it doesn’t guarantee to provide the exact number of the fraction of records.\r\n\r\n#1.1 Using fraction to get a random sample in PySpark\r\nfrom pyspark.sql import SparkSessionspark = SparkSession.builder.master(\"local[1]\").appName(\"SparkByExamples.com\").getOrCreate()\r\ndf=spark.range(100)\r\nprint(df.sample(0.06).collect())\r\n\r\n#seed – Seed for sampling (default a random seed). Used to reproduce the same random sampling.#1.2 Using seed to reproduce the same Samples in PySpark\r\nprint(df.sample(0.1,123).collect())\r\nprint(df.sample(0.1,123).collect())\r\nprint(df.sample(0.1,456).collect())\r\n\r\n#withReplacement – Sample with replacement or not (default False)\r\n#1.3 Sample withReplacement (May contain duplicates)\r\n\r\nprint(df.sample(True,0.3,123).collect()) \r\nprint(df.sample(0.3,123).collect()) \r\n# PySpark – fillna() & fill()\r\n# # PySpark – pivot() (Row to Column)# PySpark – partitionBy()\r\n# # PySpark – MapType (Map/Dict)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pyspark/Py Spark.py b/Pyspark/Py Spark.py
--- a/Pyspark/Py Spark.py	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/Pyspark/Py Spark.py	(date 1706454807678)
@@ -1,4 +1,4 @@
-# PySpark – Create an empty DataFrameprint("#Create empty RDD Using Pyspark")
+ # PySpark – Create an empty DataFrameprint("#Create empty RDD Using Pyspark")
 from pyspark.sql import SparkSession
 spark = SparkSession.builder.appName('SparkByExamples.com').getOrCreate()
 emptyRDD = spark.sparkContext.emptyRDD()
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ /dev/null	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: Django_REST_API/mywebsite/manage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/manage.py b/Django_REST_API/mywebsite/manage.py
new file mode 100644
--- /dev/null	(date 1704627604026)
+++ b/Django_REST_API/mywebsite/manage.py	(date 1704627604026)
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mywebsite.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
Index: Django_REST_API/mywebsite/myapp/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/myapp/admin.py b/Django_REST_API/mywebsite/myapp/admin.py
new file mode 100644
--- /dev/null	(date 1704627701056)
+++ b/Django_REST_API/mywebsite/myapp/admin.py	(date 1704627701056)
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
Index: Django_REST_API/mywebsite/myapp/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/myapp/tests.py b/Django_REST_API/mywebsite/myapp/tests.py
new file mode 100644
--- /dev/null	(date 1704627701063)
+++ b/Django_REST_API/mywebsite/myapp/tests.py	(date 1704627701063)
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
Index: Django_REST_API/mywebsite/myapp/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/myapp/models.py b/Django_REST_API/mywebsite/myapp/models.py
new file mode 100644
--- /dev/null	(date 1704627701061)
+++ b/Django_REST_API/mywebsite/myapp/models.py	(date 1704627701061)
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
Index: Django_REST_API/mywebsite/myapp/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/myapp/apps.py b/Django_REST_API/mywebsite/myapp/apps.py
new file mode 100644
--- /dev/null	(date 1704627702067)
+++ b/Django_REST_API/mywebsite/myapp/apps.py	(date 1704627702067)
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class MyappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "myapp"
Index: Django_REST_API/mywebsite/myapp/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/myapp/views.py b/Django_REST_API/mywebsite/myapp/views.py
new file mode 100644
--- /dev/null	(date 1704627776663)
+++ b/Django_REST_API/mywebsite/myapp/views.py	(date 1704627776663)
@@ -0,0 +1,7 @@
+# myapp/views.py
+from django.shortcuts import render
+from django.http import HttpResponse
+
+def home(request):
+    return HttpResponse("Welcome to My Website!")
+
Index: Django_REST_API/mywebsite/mywebsite/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/mywebsite/urls.py b/Django_REST_API/mywebsite/mywebsite/urls.py
new file mode 100644
--- /dev/null	(date 1704627837677)
+++ b/Django_REST_API/mywebsite/mywebsite/urls.py	(date 1704627837677)
@@ -0,0 +1,25 @@
+"""
+URL configuration for mywebsite project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/5.0/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+# mywebsite/urls.py
+from django.contrib import admin
+from django.urls import path, include
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('', include('myapp.urls')),
+]
+
Index: Django_REST_API/mywebsite/mywebsite/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/mywebsite/settings.py b/Django_REST_API/mywebsite/mywebsite/settings.py
new file mode 100644
--- /dev/null	(date 1704627604078)
+++ b/Django_REST_API/mywebsite/mywebsite/settings.py	(date 1704627604078)
@@ -0,0 +1,123 @@
+"""
+Django settings for mywebsite project.
+
+Generated by 'django-admin startproject' using Django 5.0.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.0/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/5.0/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-bb7qivuji9cwn!=p!k1(zhq@#r8r4g6n(&!xxlc&a-$3_5_y3r"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "mywebsite.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "mywebsite.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/5.0/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/5.0/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
Index: Django_REST_API/mywebsite/mywebsite/wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/mywebsite/wsgi.py b/Django_REST_API/mywebsite/mywebsite/wsgi.py
new file mode 100644
--- /dev/null	(date 1704627604039)
+++ b/Django_REST_API/mywebsite/mywebsite/wsgi.py	(date 1704627604039)
@@ -0,0 +1,16 @@
+"""
+WSGI config for mywebsite project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mywebsite.settings")
+
+application = get_wsgi_application()
Index: Django_REST_API/mywebsite/mywebsite/asgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/mywebsite/asgi.py b/Django_REST_API/mywebsite/mywebsite/asgi.py
new file mode 100644
--- /dev/null	(date 1704627604020)
+++ b/Django_REST_API/mywebsite/mywebsite/asgi.py	(date 1704627604020)
@@ -0,0 +1,16 @@
+"""
+ASGI config for mywebsite project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mywebsite.settings")
+
+application = get_asgi_application()
Index: SQL and SQL Interview Questions/daily_learn_Important_concepts.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SQL and SQL Interview Questions/daily_learn_Important_concepts.sql b/SQL and SQL Interview Questions/daily_learn_Important_concepts.sql
new file mode 100644
--- /dev/null	(date 1703857208499)
+++ b/SQL and SQL Interview Questions/daily_learn_Important_concepts.sql	(date 1703857208499)
@@ -0,0 +1,138 @@
+--Database
+We can store data inside the table in properway
+
+
+--DBMS
+Its an software for manages the Databases
+
+
+--DataModels
+its mainly four types
+1)Hirarechy model
+2)Network model
+3)Entity-Relational model
+4)Relational model (Its popular)
+
+--RDBMS
+Its software mainly used for relational types of data.
+
+MySQL:
+Developed by Oracle Corporation.
+Open-source and widely used for web applications.
+Supports SQL (Structured Query Language).
+
+Oracle Database:
+Developed by Oracle Corporation.
+A powerful and widely used commercial RDBMS.
+Known for its scalability and advanced features.
+
+PostgreSQL:
+Open-source RDBMS known for its extensibility and standards compliance.
+Supports advanced data types and features.
+
+
+--NRBMS
+Its software mainly used for non-relational types of data
+Non-Relational Database Management Systems (NRDBMS) are also known as NoSQL databases.
+Unlike RDBMS, NoSQL databases do not strictly adhere to the traditional relational model
+Designed to handle unstructured or semi-structured data.
+
+Examples
+MongoDB:
+A document-oriented NoSQL database.
+Stores data in flexible, JSON-like BSON documents.
+Widely used for scalable and high-performance applications.
+
+
+Amazon DynamoDB:
+A fully managed NoSQL database service provided by Amazon Web Services (AWS).
+Designed for high-performance, low-latency applications with automatic scaling.
+
+Cassandra:
+A distributed NoSQL database designed for handling large amounts of data across multiple commodity servers.
+Known for its high availability and fault tolerance.
+
+
+--One-to-One Relationship:
+Retrieve a person and their passport information:
+
+SELECT Person.FirstName, Person.LastName, Passport.PassportID, Passport.Country
+FROM Person
+JOIN Passport ON Person.PersonID = Passport.PersonID;
+
+--One-to-Many Relationship:
+Retrieve employees and their respective departments:
+
+SELECT Employee.EmployeeID, Employee.Salary, Department.DepartmentName
+FROM Employee
+JOIN Department ON Employee.DepartmentID = Department.DepartmentID;
+
+--Many-to-Many Relationship:
+Retrieve students and the courses they are enrolled in:
+SELECT Student.StudentName, Course.CourseName
+FROM Student
+JOIN StudentCourse ON Student.StudentID = StudentCourse.StudentID
+JOIN Course ON StudentCourse.CourseID = Course.CourseID;
+
+--select
+for retrivieng the data from databases.
+select * from customers;
+select customer_id from customers;
+select customer_name,customer_id from customers;
+
+--distinct
+for removing duplicate records from the table.
+select distinct (*) from customers;
+select distinct customer_id from customers;
+select distinct customer_name,customer_id from customers;
+
+--SQL Case not sensitive
+sql is not a case sensitive
+
+--Semicolon
+Its optional for some RDBMS SOME RDBMS need the semicolon
+
+--where
+Its maily used for apply the filter conditions
+Its used with select and update and delete commands
+select * from customer_id from customers where city = 'London';
+select customer_name,customer_id from customers where customer_id = 9;
+
+--Where clause with Relational Operators
+Using Relational operators we can filter the using one condition
+--Equal operator(=)
+select * from products where price = 40;
+--Greater Than Operator(>)
+select * from products where price > 40;
+--Less Than Operator(<)
+select * from products where price < 40;
+--Greater Than or Equal to(>=)
+select * from products where price >= 40;
+--Less Than or Equal to(<=)
+select * from products where price <= 40;
+--Not Equal to(<>)
+select * from products where price <> 40;
+
+--Logical operators
+
+Using Logical operators we can filter the using multiple conditions
+
+--AND
+select * from customers where country = 'Mexico' AND customer_id > 3;
+--OR
+select * from customers where country = 'Mexico' OR customer_id > 3 OR contactName <> 'Lingababu';
+--NOT
+select * from customers where NOT Country = 'Germeny'
+
+--Between operator
+Between Operator is used to filetr the records in the specified range
+
+select * from products where price Between 10 AND 20;
+select * from products where price >=10 AND Price <=20;
+Between 50 to 60 50,51,..............60
+
+select * from products where price NOT Between 10 AND 20;
+select * from products where price < 10 AND Price < 20;
+Not Between 1,2,3........49  61,62........100
+
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.10\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11 (Programming)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/.idea/misc.xml	(date 1704626077373)
@@ -1,7 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="Black">
-    <option name="sdkName" value="Python 3.10" />
+    <option name="sdkName" value="Python 3.11 (Programming)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (Programming)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
 </project>
\ No newline at end of file
Index: python and Python_Interview_Questions/python_class.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Python introduction\r\n# --------------------\r\n# Python is a popular programming language..\r\n# It was created by Guido van rossum, and released in 1991...\r\n# It is used for\r\n# ..web development\r\n# ..software development\r\n# ..mathematics\r\n# ..system scripting..\r\n# What can python do ?\r\n# ..python can be used on a server to create web applications..\r\n# ..python can be used to create software workflows...\r\n# ..python can connect database systems...it can also used to read and\r\n# modify files..\r\n# ..python can be used to perform complex mathematics..\r\n# ..python can be used for production ready software development...\r\n# Why python ?\r\n# ------------\r\n# ..python works on different platforms..(windows,Mac,Linux,...etc)\r\n# ..python has a simple syntax similar to english language..\r\n# ..python has syntax that allows programmers to write programs in fewer\r\n# lines..\r\n# ..python runs on an interpreter systems,...excuted\r\n# ..python can be treated in a procedural way, an object oriented way and\r\n# functional way...\r\n# Assignment\r\n# ----------\r\n# ..Differences between procedural way, object oriented way and functional\r\n# way...\r\n# ..python versions python 3.x.... 3.10...october 4th\r\n# ..pycharm ---- download...\r\n# 1..Introduction\r\n# a)Getting started\r\n# b)Variables and literals, python comments\r\n# c)input and output\r\n# d)Type conversion\r\n# e)operators\r\n# 2..Decision making and loop\r\n# a)if..else statement\r\n# b)while loop\r\n# c)for loop\r\n# d)break and continue\r\n# e)pass\r\n# Control flow examples\r\n# 3)Functions\r\n# a)Function\r\n# b)Variable scope and lifetime\r\n# c)Function arguments\r\n# d)Anonymous function\r\n# e)Recursion\r\n# 4)***Collections/Data structures\r\n# ---------------------------------\r\n# a)lists\r\n# b)Tuples\r\n# c)Strings\r\n# d)sets\r\n# e)Dictionary\r\n# 5)Modules and files/File handling\r\n# ---------------------------------\r\n# a)Modules\r\n# b)Files\r\n# c)Directory\r\n# 6)Exception handling\r\n# a)Exception\r\n# b)Exception handling\r\n# c)Custom exceptions\r\n# 7)***Object-oriented programming\r\n# a)Class and object\r\n# b)Constructors\r\n# c)inheritence\r\n# d)Polymorphism\r\n# e)Encapsulation\r\n# f)Namespaces..\r\n# ..python email handling...\r\n# ..Assert() keyword\r\n# Advanced topics\r\n# ----------------\r\n# 1)Iterators\r\n# 2)Generators\r\n# 3)Closures\r\n# 4)Decorators\r\n# 5)python@property\r\n# ..Deep copy and shallow copy\r\n# ..Docstring in pandas...\r\n# Introduction\r\n# -------------\r\n# a)Getting started\r\n# -------------------\r\n# The only way you can get better at programming is by writing code...\r\n# Example\r\n-------\r\n#write a program to print hello world..\r\nprint(\"Hello world\")\r\n#write a program sum of two numbers...\r\na=5\r\nb=3\r\nsum=a+b\r\nprint(sum)\r\nb)variables and literals\r\n------------------------\r\nPython variables\r\n-----------------\r\nA variable in programming is used to store data(value)...\r\nFor example\r\na=5\r\nvariable 'a' has value 5...\r\nChanging variable values\r\n------------------------\r\nExample\r\n--------\r\na=5\r\na=10\r\nprint(a)\r\n..we change variable value from a=5 to a=10 manually...\r\nRules for naming a variables\r\n----------------------------\r\n..A variable name consists of alphabets(a to z) (A to Z) or digits(0 to\r\n9) or an underscore...\r\n..you cannot start a variable name with a digit..\r\n..use underscore if you want to create a variable name having two words..\r\nExample\r\n--------\r\nFirst_name,second_name,number,number1...\r\n1number---syntax error...\r\nPython Literals\r\n---------------\r\nLiteral is a raw data used for representing fixed values....\r\nThree types of literals...\r\n1..Numeric literals\r\n----------------\r\nThree types : Integer,float and complex\r\nIntegers -- 1,2,3,0,-1,-2....etc\r\nFloat -- 2.3,3.4,8.7..........etc\r\nComplex .. 1.5j,2+3.4j........etc\r\nBinary,hexadecimal and octal systems..\r\na=0b1011 #binary\r\nb=0o310 #octal\r\nc=0x12c #hexadecimal\r\n2)String Literals\r\n-----------------\r\nA string literal is a sequence of characters surrounded by quotes..\r\nwe can use single,double,or triple quotes for a string...\r\nExample\r\n-------\r\nname=\"Ramya\"\r\nname='ramya'\r\nFor multiline strings, we use triple quotes..\r\nmultiline_string=\"\"\"This is our\r\npython class\"\"\"\r\n3)Boolean literals\r\n-------------------\r\nTwo boolean literals : True and False\r\nNote : True and False are case sensitive..\r\nPython comments\r\n----------------\r\nA comment is used to describe what's going on inside a program...\r\n# symbol --- we will start to write a comment..\r\nExample\r\n-------\r\n#This is a comment\r\nc)input and output\r\n-------------------\r\npython provides built-in functions that allows you to output data and\r\ntake input from the user...\r\nprint() and input()\r\nPython print()\r\n---------------\r\nprint() function is used to display data to the standarad output\r\ndevice(screen)\r\nExample\r\n---------\r\nprint(\"This is the python programming session\")\r\nThe print() function prints the content inside the paranthesis()..\r\ninput()\r\n-------\r\nTake input from the user...\r\nname=input(\"Enter name:\")\r\nprint(\"Hello\",name)\r\nd)Type conversion...\r\n---------------------\r\nConvert from one data type to another datat type...\r\nData types : Integer , string, float..etc..\r\nTwo types :\r\nImplicit type Conversion\r\n------------------------\r\nPython automatically converts one data type to another data type..\r\nExample\r\n-------\r\nnumber_integer=12\r\nnumber_float=12.3\r\nsum=number_integer+number_float\r\nprint(sum)\r\nType() function\r\n----------------\r\nWe can find the type of a variable using type() function..\r\nExample\r\n-------\r\nnumber_integer=12\r\nnumber_float=12.3\r\nsum=number_integer+number_float\r\nprint(type(sum))\r\nExplicit type conversion\r\n-------------------------\r\npredefine functions like int(),float(),str()..etc to convert to one\r\ndatatype to another data type\r\nExample\r\n--------\r\nfloat_number=1.23455\r\n#converting to integer\r\ninteger_number=int(float_number)\r\nprint(integer_number)\r\nprint(type(integer_number))\r\n#write a program to convert string to int and float..\r\na='55'\r\ninteger_number=int(a)\r\nfloat_number=float(a)\r\nprint(integer_number)\r\nprint(float_number)\r\nAssignment\r\n------------\r\n#write a program to convert integer number to float number...\r\n#write a program to convert integer number and float number to string...\r\ne)Operators\r\n------------\r\nAn operator is a special symbol that carries arithmetic and logical\r\ncomputation...\r\nArithmetic operators\r\n--------------------\r\nAddition,subtraction,multiplication,division...etc\r\n+ operator\r\n----------\r\nx=1\r\ny=2\r\nz=3\r\nresult=x+y+z\r\nprint(result)\r\nConcatenate two strings\r\n-----------------------\r\n+ operator is used to concatenate two strings..\r\nExample\r\n-------\r\nfirst_name='ramya'\r\nlast_name='sri'\r\nname=first_name+' '+last_name\r\nprint(name)\r\n- operator\r\n-----------\r\na=12\r\nb=9\r\nresult=a-b\r\nprint(result)\r\n* operator\r\n-----------\r\na=12\r\nb=9\r\nresult=a*b\r\nprint(result)\r\nMultiply string\r\n---------------\r\na='sri'\r\nb=9\r\nresult=a*b\r\nprint(result)\r\n/ and // operator\r\n------------------\r\nresult=14/3\r\nresult1=14//3\r\nprint(result)\r\nprint(result1)\r\n% operator\r\n----------\r\nremainder....\r\nresult=14%3\r\nprint(result)\r\n**operator\r\n----------\r\nresult=2**6\r\nprint(result)\r\nAssignment operators\r\n--------------------\r\n= opertaor is used to assign values to variables..\r\nExample\r\n--------\r\nx=100\r\nx=x+5\r\nprint(x)\r\nMore Assignment operators\r\n-------------------------\r\n+= x+=5 x=x+5\r\n-= x-=5 x=x-5\r\n*= x*=5 x=x*5\r\n/= x/=5 x=x/5\r\n%= x%=5 x=x%5\r\n//= x//=5 x=x//5\r\n**= x**=5 x=x**5\r\nExample\r\n-------\r\nx=100\r\nx+=5 #x=x+5\r\nprint(x)\r\nBoolean Operators\r\n------------------\r\nTrue and False\r\nExample\r\n--------\r\nprint(5<6)\r\nprint(3<2)\r\nComparision operators\r\n----------------------\r\nEither True or False\r\nGreater than(>), less than(<), ==Equal to, Not equal to(!=), Greater than\r\nor equa to(>=), less than or equal to(<=)\r\nExample\r\n-------\r\nx=10\r\ny=12\r\nprint(x>y)\r\nprint(x<y)\r\nprint(x==y)\r\nprint(x!=y)\r\nprint(x>=y)\r\nprint(x<=y)\r\nLogical operators\r\n-----------------\r\nand ----- True if both operands are true\r\nExample\r\n--------\r\nprint(True and True)\r\nprint(True and False)\r\nprint(False and True)\r\nprint(False and False)\r\nor --- True if one operand is True\r\nExample\r\n---------\r\nprint(True or True)\r\nprint(True or False)\r\nprint(False or True)\r\nprint(False or False)\r\nnot --- True if the operand is false\r\nprint(not True)\r\nprint(not False)\r\n2)Decision Making and loop\r\n---------------------------\r\nif..else statement\r\n------------------\r\nif statement\r\n------------\r\nsyntax:\r\nif boolean_expression:\r\nstatement(s)\r\nboolean_expression evaluates to True the body of if will executed\r\nboolean_expression evaluates to False the body of if statements will\r\nskip...\r\nExample\r\n--------\r\nnumber=3\r\nif number>2:\r\nprint(\"Number is positive\")\r\nprint(\"This is always executed\")\r\nif..else statement\r\n-------------------\r\nif boolean expression:\r\nstatement(s)\r\nelse:\r\nstatement(s)\r\nIF the boolean_expression evaluates True the body of if statement is\r\nexecuted..\r\nif the boolean_expression evaluates False the body of else statement is\r\nexecuted..\r\nExample\r\n--------\r\nnumber=3\r\nif number>=0:\r\nprint(\"Number is positive\")\r\nprint(\"The body of if is executed\")\r\nelse:\r\nprint(\"Negative number\")\r\nprint(\"The body of else is executed\")\r\nif..elif..else\r\n---------------\r\nif boolean_expression:\r\nstatement(s)\r\nelif boolean expression:\r\nstatement(s)\r\nelse:\r\nstatement(s)\r\nExample\r\n--------\r\nnumber=0\r\nif number>0:\r\nprint(\"positive number\")\r\nelif number==0:\r\nprint(\"Zero\")\r\nelse:\r\nprint(\"Negative number\")\r\nWhile Loop\r\n----------\r\nWhile loop is used to repeat a block of code as long as the\r\nboolean_expression is true..\r\nSyntax:\r\nwhile boolean_expression:\r\nstatement(s)\r\nExample\r\n---------\r\nn=3\r\ni=1\r\nwhile i<=n:\r\nprint(\"Loop is easy\")\r\ni=i+1\r\nExample\r\n--------\r\n# write a program to print sum of natural numbers...\r\nn=10\r\n#initialize sum and count\r\nsum=0\r\ni=1\r\nwhile i<=n: #1<=10 # True\r\nsum=sum+i # sum=0+1 == sum=1\r\ni=i+1 # 1+1 =2\r\nprint(\"The sum is\",sum)\r\nFor Loop\r\n--------\r\nfor loop in python is used to iterate over a sequenceof objects...\r\nSequences\r\n----------\r\nstrings --- A string is a sequence of characters...\r\nExample\r\n-------\r\ntext='python programming'\r\nLists\r\n-------\r\nA list is a sequence of items seperated by commas and enclosed in square\r\nbrackets..\r\nExample\r\n-------\r\nmy_list=[2,\"text\",5.6]\r\nrange()\r\n------\r\nrange() is used to create a sequence of numbers..\r\nExample\r\n--------\r\nnumbers=range(1,6)\r\nSyntax\r\n------\r\nfor val in sequence:\r\nstatement(s)\r\nExample\r\n-------\r\nlanguages=['java','python','c++']\r\nfor item in languages:\r\nprint(item)\r\nExample\r\n---------\r\nnumbers=range(1,101)\r\nfor item in numbers:\r\nprint(item)\r\nAssignment\r\n----------\r\n#write a program to print sum of numbers 1 to 100 by using range()\r\nExample\r\n--------\r\nnumbers = range(1,101)\r\nsum=0\r\nfor i in numbers:\r\nsum=sum+i // sum+=i\r\nprint(\"sum=\",sum)\r\nBreak and continue\r\n------------------\r\npython break statement\r\n----------------------\r\nsometimes we may need to terminate the loop immediately without checking\r\nthe next expression then we use break statement...\r\nExample\r\n---------\r\nnumbers=[1,2,-3,46,78]\r\nfor val in numbers:\r\nif val<0:\r\nbreak\r\nprint(val)\r\nPython continue statement\r\n--------------------------\r\nnumbers=[1,4,-100,5,-9]\r\nfor val in numbers:\r\nif val<=0:\r\ncontinue\r\nprint(val)\r\nprint(\"This is outside loop\")\r\npass statement\r\n--------------\r\nnumbers=[1,4,-100,5,-9]\r\nfor val in numbers:\r\npass\r\nprint(\"statement after loop\")\r\n...we have a loop or function that is not properly implemented yet, but\r\nwe want to implement it in the future..\r\nIt cannot have a empty body, passs statement is used..\r\nAssignment\r\n-----------\r\n1..Write a program to find the largest number among three numbers..\r\n2..Write a program to check leap year\r\n3..write a program to generate fibonacci sequence..\r\n0,1,1,2,3,5,8,..........etc\r\nThe first two terms are 0 and 1..\r\nn_term=20\r\n#first two terms\r\nn1=0\r\nn2=1\r\ncount=0\r\nprint(\"fibonacci sequence upto\",n_term)\r\nwhile count<n_term:\r\nprint(n1,end=',')\r\nnth=n1+n2\r\nn1=n2\r\nn2=nth\r\ncount=count+1\r\nprint()\r\n4..write a progarm to check prime number..\r\nExample\r\n-------\r\nnum=504\r\nflag=1\r\nfor i in range(2,num):\r\nif(num%i)==0:\r\nprint(num,\"is not a prime number\")\r\nprint(i,\"times\",num//i,\"is\",num)\r\nflag=0\r\nbreak\r\nif flag==1:\r\nprint(num,\"is a prime number\")\r\nFunctions\r\n----------\r\nFunction helps break our program into smaller and modular chunks..\r\nAs our program grows larger by larger functions make it organized and\r\nmanageable..\r\nHow to create a function\r\n-------------------------\r\ndef function_name(parameters):\r\nstatement(s)\r\ndef -- keyword makes the start of the function header..\r\nfunction_name=unique name given to identify function (simliar to\r\nvariables)\r\nparameters (arguments) are used to pass values to function.. They are\r\noptional..\r\ncolon : ... mark the end of the functionheader..\r\nreturn statement --- optional..\r\nExample\r\n-------\r\ndef greet(name):\r\nprint(\"Hello\",name)\r\nprint(\"What's going on?\")\r\ngreet('bhuvana') --- function call\r\nExample\r\n--------\r\n# write a program to add two numbers using functions...\r\ndef add_numbers(n1,n2):\r\nsum=n1+n2\r\nprint(\"sum=\",sum)\r\nnum1=5\r\nnum2=7\r\nadd_numbers(num1,num2)\r\nReturn statement\r\n----------------\r\nA function may have optional return statement..\r\nIt is used to exit a function and go back to the place from where it is\r\ncalled..\r\nExample\r\n-------\r\ndef add_numbers(n1,n2):\r\nsum=n1+n2\r\nreturn sum\r\nresult=add_numbers(5,7)\r\nprint(\"sum=\",result)\r\nVariable scope\r\n---------------\r\ndef my_func():\r\nx=10\r\nprint(\"Value inside function\",x)\r\nx=20\r\nmy_func()\r\nprint(\"Value outside function\",x)\r\nLocal and global scope\r\n-----------------------\r\nLocal variable scope\r\n--------------------\r\n# Write Python 3 code in this online editor and run it.\r\ndef my_func():\r\nx=10\r\nmy_func()\r\nprint(x) #Nameerror...\r\nFunction Arguments\r\n------------------\r\nWe learned how to define functions and the way to call them..\r\nwe also learned a bit about passing arguments to a function...\r\nExample\r\n-------\r\ndef greet(name,msg):\r\n\"\"\"This funcion greets to the\r\nperson with the provided\r\nmessage\"\"\"\r\nprint(\"Hello\",name+','+msg)\r\ngreet(\"Mounika\",\"Good Morning!!\")\r\nExample\r\n---------\r\ndef greet(name,msg):\r\n\"\"\"This funcion greets to the\r\nperson with the provided\r\nmessage\"\"\"\r\nprint(\"Hello\",name+','+msg)\r\ngreet(\"Mounika\")\r\nOutput\r\n------\r\nTraceback (most recent call last):\r\nFile \"<string>\", line 9, in <module>\r\nTypeError: greet() missing 1 required positional argument: 'msg'\r\nDefault arguments\r\n------------------\r\n# Online Python compiler (interpreter) to run Python online.\r\ndef greet(name,msg=\"Good Morning\"):\r\n\"\"\"This funcion greets to the\r\nperson with the provided\r\nmessage\"\"\"\r\nprint(\"Hello\",name+','+msg)\r\ngreet(\"Mounika\")\r\ngreet(\"Divya\")\r\ngreet(\"Bhuvana\",\"How are you\")\r\nAnonymous function\r\n------------------\r\nYou can define function without name...\r\nThis function is called as anonymous function..\r\nLambda as our keyword...\r\nsyntax\r\n-------\r\nlambda arguments:expression\r\nExample\r\n-------\r\n#write a program to perform square of a number\r\n#lambda fuction\r\nsquare=lambda x:x*x\r\n#function call\r\nresult=square(10)\r\nprint(result)\r\nPython Recursion\r\n----------------\r\nA function that calls itself is known as a recursive function..\r\nExample\r\n-------\r\ndef calc_sum(n):\r\nif n==1:\r\nreturn 1\r\nelse:\r\nreturn n+calc_sum(n-1)\r\nsum=calc_sum(3)\r\nprint(sum)\r\n4)Collections/Data structures\r\n------------------------------\r\ndata types : int,float and bool...\r\nSequences ----\r\nLists\r\n-----\r\nlist is one of the most frequently used and versatile data type in\r\npython...\r\nA list is created by placing elements inside [] square brackets...\r\nExample\r\n-------\r\nnumbers=[1,23,44]\r\nHow to create a list\r\n--------------------\r\nA list can have any number of items...\r\nAnd these items may be of different data types like int,float and str...\r\nExample\r\n-------\r\n#empty list\r\nlist1 = []\r\n#list of integers\r\nlist1=[1,2,3,4]\r\n#list with mixed datatypes\r\nlist1=[1,3.4,\"strain\"]\r\n#Nested_list\r\n.. A list which contians another list is called nested list..\r\nmy_list=[\"Hello\",[1,2,3],[\"a\"]]\r\nAccess Elements from a List\r\n---------------------------\r\nWe can use the index operator[] to access item in a list..\r\nExample\r\n--------\r\nnumbers=[1,22,10,100,3.33]\r\nprint(numbers[0])\r\nprint(numbers[1])\r\nprint(numbers[2])\r\nprint(numbers[3])\r\nprint(numbers[4])\r\n..We can acces first element using numbers[0],the second element\r\nnumbers[1]........\r\n..Index starts from 0 (not 1).... so list having 5 elements will have an\r\nindex from 0 to 4...\r\n..If you try to access an item outside the list you will get an\r\nIndexError..\r\nNegative Indexing\r\n-----------------\r\npython allows negative indexing for its sequences..\r\nThe index of -1 refers to the last item, -2 refers the second last item\r\nand so on...\r\nExample\r\n--------\r\nnumbers=[1,22,10,100,3.33]\r\nprint(numbers[-1])\r\nprint(numbers[-2])\r\nprint(numbers[-3])\r\nprint(numbers[-4])\r\nprint(numbers[-5])\r\nprint(numbers[-6])\r\nSlicing of a list\r\n-----------------\r\nWe will learn to access a range of items.. This is done by using slicing\r\noperator (:)\r\nExample\r\n-------\r\nmy_list=['p','y','a','b','c','h']\r\n#elements 3rd to 5th\r\nprint(my_list[2:5])\r\n#elements 4th to end\r\nprint(my_list[3:])\r\n#elements begining to 4th\r\nprint(my_list[:3])\r\n#elements begining to end\r\nprint(my_list[:])\r\nChange items of a list\r\n----------------------\r\nLists are mutable... we can add,update,delete...\r\nWe use = operator to change an item or range of items in a list...\r\nExample\r\n-------\r\nodd=[2,4,6,8]\r\n#change the 1st item\r\nodd[0]=1\r\nprint(odd)\r\n#change range of elements (2nd to 4th items)\r\nodd[1:4]=[3,5,7]\r\nprint(odd)\r\nAdd elements in a list\r\n----------------------\r\nTo add a single item in a list we use append() method..\r\nTo add multiple items in a list we use extend() method...\r\nExample\r\n-------\r\nodd=[1,3,5]\r\nodd.append(2)\r\nprint(odd)\r\nodd.extend([9,11,13])\r\nprint(odd)\r\nusing + and * operators\r\n------------------------\r\nwe can also use + operator to combine two lists..This is called\r\nconcatenation..\r\nIf you need to repeat items of a list we use * operator\r\nExample\r\n--------\r\nodd=[1,3,5]\r\nprint(odd+[7,9,11])\r\nprint(['a','b']*3)\r\ninsert()\r\n---------\r\nodd=[1,5]\r\nodd.insert(1,3)\r\nprint(odd)\r\nDelete items from a list\r\n------------------------\r\nwe can delete one or more items from a list using the keyword del...\r\nIt can even delete the entire list...\r\nExample\r\n--------\r\nmy_list=[1,2,3,4,5,6]\r\ndel my_list[2]\r\nprint(my_list)\r\ndel my_list[1:5]\r\nprint(my_list)\r\ndel my_list\r\nprint(my_list)\r\nList copy\r\n---------\r\nyou can use = operator to copy from one list to another...\r\nExample\r\n-------\r\nlist1=[1,2,3]\r\nlist2=list1\r\nprint(list2)\r\nLoop through a list\r\n-------------------\r\nfor loop..\r\nfor fruit in ['apple','banana','mango']:\r\nprint(\"I like\",fruit)\r\nNested lists\r\n------------\r\nA list can have another list in it...\r\nExample\r\n---------\r\nmy_list=[1,2,[3,4,5]]\r\nprint(my_list[0])\r\nprint(my_list[2][0])\r\nprint(my_list[2][1])\r\nprint(my_list[2])\r\nTuples\r\n-------\r\nA tuple is similar to a list...\r\nThe difference between the two is that we cannot change the elements of a\r\ntuple once it is assigned.. but in list elements can be changed..\r\nA tuple is created by placing all elements inside parantheses ()...\r\nA tuple can have any number of items and they can be different data\r\ntypes...\r\nExample\r\n-------\r\nmy_tuple=() #empty tuple\r\nmy_tuple=(1,2,3,4) #tuple having integers\r\nmy_tuple=(1,\"hello\",3.4) #mixed datatypes\r\nmy_tuple=('cat',[8,4],(1,2,3)) #nested tuple\r\n..We can create a list in a tuple too...\r\nmy_tuple=3,4.6,'dog'\r\nprint(my_tuple)\r\n...Better use parantheses when you practice tuple...\r\nCreating Tuples with one item\r\n-----------------------------\r\nt1=(\"hello\")\r\nprint(type(t1))\r\nt2=(\"hello\",)\r\nprint(type(t2))\r\nt3=\"hello\",\r\nprint(type(t2))\r\n..Having one item within parantheses is not enough..\r\nWe will need a trailing comma to indicate that it is a tuple...\r\nAccessing Tuple Elements\r\n-------------------------\r\nSimilar to lists, we use the index operator [] to access tuple elements..\r\nExample\r\n-------\r\nmy_tuple=('a','b','c','d')\r\nwe can access the first item with my_tuple[0] and second element\r\nmy_tuple[1] and so on...\r\nmy_tuple=('a','b','c','d')\r\nprint(my_tuple[0])\r\nprint(my_tuple[1])\r\nNegative indexing\r\n-----------------\r\npython allows negative indexing for its sequences...\r\nThe index -1 refers to the last item -2 the second last item and so on..\r\nExample\r\n--------\r\nmy_tuple=('a','b','c','d')\r\nprint(my_tuple[-1])\r\nprint(my_tuple[-2])\r\nSlicing\r\n-------\r\nWe will learn how to access a range of items.. This is done by using the\r\nslicing operator (:)\r\nExample\r\n-------\r\nmy_tuple=('p','y','t','h','o','n')\r\n#elements from 2nd to 4th\r\nprint(my_tuple[1:4])\r\n#elements from begining to 2nd\r\nprint(my_tuple[:-4])\r\n#elements 6th to end\r\nprint(my_tuple[5:])\r\n#elements from begining to end\r\nprint(my_tuple[:])\r\nChanging Tuple elements\r\n------------------------\r\ntuples are immutable..\r\nthis means that elements cannot be changed once it has been assigned...\r\nExample\r\n-------\r\nmy_tuple=(1,2,3)\r\nmy_tuple[0]=0\r\noutput\r\n-------\r\nTraceback (most recent call last):\r\nFile \"<string>\", line 4, in <module>\r\nTypeError: 'tuple' object does not support item assignment\r\nusing + and * operators\r\n------------------------\r\nwe can use + operator to combine two tuples.. This is called\r\nconcatenation...\r\nIf you need to repeat items of a tuple we can use * operator..\r\nExample\r\n--------\r\nodd=(1,3,5)\r\nprint(odd+(7,9,11))\r\nletters=('a','b')\r\nprint(letters*3)\r\nDeleting a tuple\r\n----------------\r\nwe cannot delete items of a tuple..\r\nExample\r\n-------\r\nmy_tuple=(1,2,3)\r\ndel my_tuple[0]\r\noutput\r\n-------\r\nTraceback (most recent call last):\r\nFile \"<string>\", line 5, in <module>\r\nTypeError: 'tuple' object doesn't support item deletion\r\nother tuple operators\r\n----------------------\r\nwe can check whether an item exists in a tupe or not using in keyword..\r\nExample\r\n-------\r\nmy_tuple=('a','p','p','l','e')\r\nprint('a' in my_tuple)\r\nprint('b' in my_tuple)\r\nIterating through a tuple\r\n-------------------------\r\nfor loop is used to iterate each item in a tuple...\r\nExample\r\n---------\r\nfor name in ('divya','sindhu','mounika'):\r\nprint(\"Hello\",name)\r\nPython Strings\r\n---------------\r\nA string is a sequence of characters..\r\nComputers donot allow characters they deal only with numbers(binary)...\r\nInternally it is stored and manipulated at a combination of 0's and 1's..\r\nThe conversion of character to a number is called encoding and the\r\nreverse process is decoding...\r\nHow to create strings\r\n----------------------\r\nStrings can be created by enclosing characters inside a single quotes or\r\ndouble quotes..\r\nTriple quotes can be used in python for multiline strings...\r\nExample\r\n--------\r\nmy_string='hello'\r\nprint(my_string)\r\nmy_string=\"Hello\"\r\nprint(my_string)\r\nmy_string='''Hello'''\r\nprint(my_string)\r\nmy_string=\"\"\"Hello,welcome to python\r\nworld, where we discuss\"\"\"\r\nprint(my_string)\r\nAccess characters in a string\r\n--------------------------------\r\nSimilar to lists and tuples we can access characters in a string by using\r\nthe index operator[]..\r\nExample\r\n-------\r\nmy_string='hello'\r\nprint(my_string[0])\r\nprint(my_string[1])\r\nIndexing starts with 0 not 1...\r\nNegative indexing\r\n-----------------\r\nThe index of the last character is -1 and second last character is -2 and\r\nso on.....\r\nExample\r\n-------\r\nmy_string='python'\r\nprint(my_string[-1])\r\nprint(my_string[-2])\r\nSlicing a string\r\n------------------\r\nwe can access a range of characters in a string using slicing operator\r\n(:)\r\nExample\r\n-------\r\nmy_string='python'\r\n#2nd to 4th characters\r\nprint(my_string[1:4])\r\n#begining to 4th character\r\nprint(my_string[0:4])\r\n#begining to 4th character\r\nprint(my_string[:4])\r\nDeleting a string\r\n-----------------\r\nStrings are immutable...\r\nIts not possible to change or delete characters of a string...\r\nExample\r\n---------\r\nmy_string='python'\r\ndel my_string[0]\r\noutput\r\n------\r\nTraceback (most recent call last):\r\nFile \"<string>\", line 5, in <module>\r\nTypeError: 'str' object doesn't support item deletion\r\nPython string operations\r\n-------------------------\r\nConcatenation of two strings\r\n-----------------------------\r\nwe use + operator to combine or concatenate two strings..\r\nExample\r\n--------\r\nfirst_name='ramya'\r\nsecond_name='sri'\r\nname=first_name+ ' '+second_name\r\nprint(name)\r\nRepeat two strings\r\n------------------\r\nwe cab repeat a string using * operator..\r\nExample\r\n-------\r\nmy_string='hello'\r\nprint(my_string*3)\r\nIterating through a string\r\n--------------------------\r\nwe can iterate through a sequence using for loop..\r\nExample\r\n-------\r\nwrite a program to count the number of 'l' in a string..\r\ncount=0\r\nfor letter in 'Hello world':\r\nif(letter=='l'):\r\ncount+=1\r\nprint(count,\"letters found)\r\nCheck whether substring exists\r\n-------------------------------\r\nin keyword\r\nExample\r\n-------\r\nresult='a' in 'Hello'\r\nprint(result)\r\nresult='o' in 'hello'\r\nprint(result)\r\nEscape sequence\r\n---------------\r\nHe said, \" what's there ?\" ---Syntax error...\r\nExample\r\n-------\r\nprint('''He said,\"what's there?\"''')\r\nPython sets\r\n-------------\r\nA set is a unordered collection of items..\r\nEvery element is unique (no duplicates)...\r\nCreating sets\r\n-------------\r\nA set is created by placing all the items inside curly braces {} and\r\nseperated by commas..\r\nExample\r\n---------\r\nmy_set={1,2,3}\r\nprint(my_set)\r\n#set of mixed datatypes\r\nmy_set={1,2,\"hello\",3.4,(1,2,3)}\r\nprint(my_set)\r\nLet's try to create a set with duplicate elements..\r\nExample\r\n-------\r\nmy_set={1,2,1,3,1,4,2,3}\r\nprint(my_set)\r\nAdd and update sets\r\n--------------------\r\nsets are mutable..\r\nBut since they are unordered , indexing has no meaning...\r\nwe cannot access or change elements of a set using indexing or slicing..\r\nset doesnot support it\r\nwe can add single element using add() method and multiple elements using\r\nupdate() method..\r\nThe update() method can take tuples,lists,strings or other sets as its\r\narguments..\r\nExample\r\n-------\r\nmy_set={1,3}\r\nprint(my_set)\r\nmy_set.add(2)\r\nprint(my_set)\r\nmy_set.update([4,5,6])\r\nprint(my_set)\r\nRemoving elements from a set\r\n-----------------------------\r\nTo remove elements from a set we can either use remove() or discard()\r\nmethods..\r\nThe only difference between the two is that , discard(), if the item is\r\nnot exists in the set it remains unchanged..\r\nBut remove() will raise an error ..\r\nExample\r\n-------\r\nmy_set={1,2,3,4,5,6}\r\nmy_set.discard(4)\r\nprint(my_set)\r\nmy_set.discard(7)\r\nprint(my_set)\r\nmy_set.remove(7)\r\nprint(my_set) #Error :keyerror\r\nSet methods : pop() and clear()\r\n-------------------------------\r\nThe pop() method removes a random element from a set and returns it..\r\nExample\r\n-------\r\nmy_set={1,2,3,4,5,6}\r\nresult=my_set.pop()\r\nprint(my_set)\r\nprint(result)\r\nThe clear() removes all elements from a set\r\nExample\r\n--------\r\nmy_set={1,2,3,4,5,6}\r\nmy_set.clear()\r\nprint(my_set)\r\npython set operations\r\n----------------------\r\nunion, intersection, difference and symmetric..\r\nSet union\r\n---------\r\nThe union of two sets A and B is a set of all elements from both sets..\r\nIt is performed using | operator..\r\nsame can be performed by using union() method..\r\nExample\r\n--------\r\nA={1,2,3}\r\nB={3,4,5,6}\r\nresult=A|B\r\nprint(result)\r\nresult=B.union(A)\r\nprint(result)\r\nSet Intersection\r\n----------------\r\nThe intersection of two sets A and B is a set of all elements that are\r\ncommon in both sets..\r\nIt is performed using & operator..\r\nSame can be performend by using intersection()..\r\nExample\r\n---------\r\nA={1,2,3}\r\nB={2,3,4,5,6}\r\nresult=A&B\r\nprint(result)\r\nresult=B.intersection(A)\r\nprint(result)\r\nSet Difference\r\n--------------\r\nThe difference of set B from A is a set of elements that are only in A\r\nbut not in B..\r\nIt is performed by using A-B ..\r\nSame can be performed by using difference()..\r\nExample\r\n-------\r\nA={1,2,3}\r\nB={2,3,4,5,6}\r\nresult=A-B\r\nprint(result)\r\nresult=B-A\r\nprint(result)\r\nresult=A.difference(B)\r\nprint(result)\r\nSet Symmetric Difference\r\n-------------------------\r\nThe symmetric difference between two sets A and B is a set of elements in\r\nboth A and B except those are common in both..\r\nIt is perfromed using ^ operator ... (caret)\r\nSame can be performed by using symmetric_difference()\r\nExample\r\n--------\r\nA={1,2,3}\r\nB={2,3,4,5,6}\r\nresult=A^B\r\nprint(result)\r\nresult=A.symmetric_difference(B)\r\nprint(result)\r\nIterating through a set\r\n------------------------\r\nfor loop...\r\nExample\r\n--------\r\nfor letter in set('apple'):\r\nprint(letter)\r\nCheck if an element exists\r\n--------------------------\r\nin keyword..\r\nExample\r\n-------\r\nmy_set=set(\"apple\")\r\nprint('a' in my_set)\r\nprint('w' in my_set)\r\nPython Dictionary\r\n-----------------\r\nA dictionary is a unordered collection of items ...\r\nkey:value pairs..\r\nHow to create a dictionary\r\n----------------------------\r\nA dictionary is as simple as placing items inside curly braces {},\r\nseperated by commas..\r\nA item in a dictionary has a key and the corresponding value expressed as\r\na pair.. key:value\r\nWhile values can be of any data type and can repeat, keys must be\r\nunique..\r\nExample\r\n-------\r\n#empty dictionary\r\nmy_dict={}\r\n#dictionary with integer keys\r\nmy_dict={1:'apple',2:'ball'}\r\n#dictionary with mixed keys\r\nmy_dict={name:'divya',1:[22,3,4]}\r\nCreating Dictionaries using dict()\r\n----------------------------------\r\nA dictionary can also be created using dict()\r\nExample\r\n-------\r\nmy_dict=dict({1:'apple',2:'ball})\r\n#creating dictionary from a sequence\r\nmy_dict=dict([(1,'apple'),(2,'ball')])\r\nprint(my_dict)\r\nAccess Dictionary Elements\r\n---------------------------\r\nA dictionary has a key:value pairs as elemenents..\r\nTo access the value of an element we use its key...\r\nExample\r\n--------\r\nperson={'name':'sindhu','age':26}\r\nperson_name=person['name']\r\nprint(person_name)\r\nperson_age=person['age']\r\nprint(person_age)\r\nAccess value using get()\r\n------------------------\r\nWe can also access the value of an element using the get() method..\r\nExample\r\n-------\r\nperson={'name':'sindhu','age':26}\r\nperson_name=person.get('name')\r\nprint(person_name)\r\nperson_age=person.get('age')\r\nprint(person_age)\r\nChange and add dictionary elements\r\n----------------------------------\r\nDictionary is mutable..\r\nwe can add items or change the value of existing items using =\r\noperators..\r\nAdd Element to a dictionary\r\n---------------------------\r\nperson={'name':'sindhu','age':26}\r\n#adding element\r\nperson['city']='hyderabad'\r\nprint(person)\r\nupdate element to a dictionary\r\n------------------------------\r\nwe can update an element in similar way to how we add an element\r\nExample\r\n-------\r\nperson={'name':'sindhu','age':26}\r\n#updating age\r\nperson['age']=19\r\nprint(person)\r\nRemove Dictionary Item\r\n----------------------\r\nTo remove a single item from a dictionary we can use pop() method..\r\nThe method removes an item with the provided key and retuurns the value..\r\nExample\r\n-------\r\nperson={'name':'ramya','age':25}\r\n#removing elements using pop()\r\nresult=person.pop('age')\r\nprint('value removed',result)\r\nprint('updated dictionary',person)\r\nuse of del in a dictionary\r\n----------------------------\r\nThe del keyword can be used to delete an individual items..\r\nIt can be also used to delete entire dictionary..\r\nExample\r\n-------\r\nperson={'name':'ramya','age':25}\r\n#deleting items using del keyword\r\ndel person['age']\r\nprint(person)\r\n#delete entire dictionary\r\ndel person\r\nprint(person)\r\nIterating thorugh a dictionary\r\n------------------------------\r\nfor loop...\r\nExample\r\n-------\r\nsquares={1:1,2:4,3:9,4:16}\r\nfor i in squares:\r\nprint(squares[i])\r\ncheck if a key exists\r\n-----------------------\r\nin keyword\r\nExample\r\n-------\r\nsquares={1:1,2:4,3:9,4:16}\r\nprint(1 in squares)\r\nprint(5 in squares)\r\nprint(4 in squares)\r\n# write a porgram to caluclate number of characters in a string..\r\nstring=\"Python programming language\"\r\ncount=0\r\nfor i in range(0,len(string)):\r\nif(string[i]!=''):\r\ncount=count+1\r\nprint(\"Total number of characters in a string:\"+str(count))\r\n# write a program to count the frequency of each character in the\r\nstring...\r\nCreate an empty dictionary to store the character as key and frequency of\r\ncharacter as value..\r\nd=dict()\r\nLoop over the string to get one character at a time..\r\nfor i in string:\r\nuse get() the function checks the character is present in the dictionary,\r\nif present it returns the value of character then add one to it..\r\nIf the character is not present then the get() function returns 0, that\r\nis second parameter add 1 to it and put the character into the\r\ndictionary...\r\nd[i]=d.get(i,0)+1\r\nFinally print the dictionary with characters as keys and values....\r\nprint(d)\r\nstring=input(\"Enter the string:\")\r\nd=dict()\r\nfor i in string:\r\nd[i]=d.get(i,0)+1\r\nprint(d)\r\noutput\r\n------\r\nEnter the string:python programming langugae\r\n{'p': 2, 'y': 1, 't': 1, 'h': 1, 'o': 2, 'n': 3, ' ': 2, 'r': 2, 'g': 4,\r\n'a': 3, 'm': 2, 'i': 1, 'l': 1, 'u': 1, 'e': 1}\r\nAssignment\r\n----------\r\n# write a python program to count the frequency of each character in the\r\nstring using \"in\" operator..\r\nWhat is the correct python file extension ?\r\n.py\r\nIn the following code n is assigned a/an---- value?\r\nn='5'\r\n.. string.. quotes\r\nwhat will be the output of the following code?\r\na=3.44\r\nb=3\r\nresult=a+b\r\nprint(result)\r\nprint(type(result))\r\n... float value .... 6.44\r\nWhat is the output of the following code?\r\nstr='abc'\r\nprint(str*3)\r\n...abcabcabc\r\nwhat is the output of the following code?\r\nstr1='4'\r\nstr2='3'\r\nresult=str2+str1\r\nprint(result)\r\n..34\r\nWhat is the output of the following code?\r\nmy_range=range(1,5)\r\na=0\r\nfor val in my_range:\r\na=a+1\r\nprint(a)\r\n..4\r\nModules and files\r\n------------------\r\nPython Modules\r\n--------------\r\nModules refers to a file containing python statements and definitions..\r\nwe use modules to break down large program into small and manageable and\r\norganized files..\r\nmodules provide reusability of code..\r\nwe can define our most used functions in a module and import it...\r\ninstead of copying their definitions into different programs..\r\nCreate and import module\r\n------------------------\r\nTo create a module , write python code in a file and save .py extension..\r\nLet's create a file named example.py and save the following code..\r\ndef add(a,b):\r\n\"\"\"This program adds two\r\nnumbers\"\"\"\r\nresult=a+b\r\nreturn result\r\nImport module\r\n--------------\r\nTo use this module, we need to import it...\r\nLet's create a new file main.py and import the example module..\r\nimport example\r\noutput=example.add(20,30)\r\nPython standard modules\r\n-----------------------\r\nmath is one of the standard modules..\r\nBuilt in method : dir()\r\n-----------------------\r\nwe can use dir() function to find out the list of valid attributes\r\ndefined inside module..\r\nExample\r\n-------\r\nimport math\r\nprint(dir(math))\r\noutput\r\n------\r\n['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos',\r\n'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb',\r\n'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp',\r\n'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma',\r\n'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt',\r\n'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan',\r\n'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh',\r\n'sqrt', 'tan', 'tanh', 'tau', 'trunc']\r\nExample:math module\r\n--------------------\r\nimport math\r\nx=2.25\r\ny=3\r\n#square root of x\r\nresult=math.sqrt(x)\r\nprint(result)\r\n#x is raised to the power of y\r\nresult=math.pow(x,y)\r\nprint(result)\r\n#value of pi\r\nprint(math.pi)\r\n#value of e\r\nprint(math.e)\r\nImport with renaming\r\n--------------------\r\nwe can rename the module during import..\r\nExample\r\n--------\r\nimport math as m\r\nprint(\"The value of pi is\",m.pi)\r\nfrom..import statement\r\n----------------------\r\nwe can import specific names from a module without importing the module\r\nas a whole...\r\nExample\r\n-------\r\nfrom math import pi,e\r\nprint(pi)\r\nprint(e)\r\nPython files\r\n-------------\r\nA file is a named location on disk to store related information..\r\nIt is used to permanently store data in memory...\r\nwhen we want to read from or write to a file we need to open file first..\r\nwhen we are done it need to be closed,...\r\n1..open a file\r\n2..Read or write (perform operations)\r\n3..close file\r\nHow to open a file\r\n------------------\r\nPython has a built in function open() to open afile..\r\nExample\r\n-------\r\nf=open(\"test.txt\") #open a file in current directory\r\nf=open(\"C:\\Users\\Ramyasri.X.Kapalavai\\OneDrive - Quest\r\nDiagnostics\\Desktop\\Ramya\\pythonclass.txt\") #specifying full path\r\nSpecifying mode during file open()\r\n----------------------------------\r\nWe can use modes while opening a file...\r\n'r' -- open a file for reading\r\n'w' -- open a file for writing.. create a new file if it does not\r\nexist..\r\n'a' -- open a file for appending at the end of the file.. creates a new\r\nfile if it does not exist..\r\n'x' --- open a file for exclusive creation..if the file already exists,\r\nthe operation fails..\r\n't' -- open a file in text mode..(default)\r\n'b' -- open a file in binary mode, used for images and binary files..\r\n'+' -- open a file for updtaing (reading and writing)...\r\nExample\r\n--------\r\nf=open(\"python class.txt\") #equivalent to 'r' or 'rt'\r\nf=open(\"python class.txt\",'w') #write in text mode\r\nf=open(\"img.png\",'r+b') # read and write in binary mode..\r\nspecifying Encoding type in open()\r\n----------------------------------\r\nWhen working with files in text mode, it is highly recommended to use\r\nencoding type..\r\nf=open(\"python class.txt\", mode='r', encoding='utf-8')\r\n..in windows it is 'cp1252' but in linux it is 'utf-8'...\r\nClose a file\r\n-------------\r\nwhen we complete our file operations to the file we need to close the\r\nfile properly..\r\nclosing a file will free up the resources that were tied in the file\r\nusing python close() method..\r\nExample\r\n--------\r\nf=open(\"python class.txt\")\r\n#perform file operations\r\nf.close()\r\ntry..finally\r\n------------\r\ntry:\r\nf=open(\"python class.txt\")\r\n#perform file operations\r\nfinally:\r\nf.close()\r\nHow to write a file\r\n---------------------\r\nIn order to write into a file in python we need to open a file it in 'w',\r\nappend 'a'..\r\nwriting a string or sequence of bytes is done using write()...\r\nExample\r\n-------\r\nf=open(\"python class.txt\",'w')\r\nf.write(\"my first file\\n\")\r\nf.write(\"This file\\n\")\r\nf.write(\"contains python class\\n\")\r\nf.close()\r\noutput\r\n-------\r\nmy first file\r\nThis file\r\ncontains python class\r\nHow to read files\r\n-----------------\r\nTo read a file in python we must open the file in reading mode..\r\nThere are various methods available for this purpose..\r\nwe use read(size) method to read the size of the parameter of data...\r\nExample\r\n-------\r\nf=open(\"python class.txt\",'r')\r\n#read the first 4 data\r\nprint(f.read(4))\r\noutput\r\n------\r\nmy f\r\n#read the next 4 data\r\nprint(f.read(4)\r\nirst..\r\n#read the rest and till end of file\r\nprint(f.read())\r\nThis file\r\ncontains python class..\r\n'\\n' -- returns a newline..\r\nseek() and tell() methods\r\n--------------------------\r\nwe can change our current file cursor (position) using seek() method..\r\nsimilarly tell() method returns the current position of cursor..\r\nExample\r\n--------\r\nf=open(\"python class.txt\",'r')\r\n#read in the rest ad till end of file\r\nf.read()\r\n#get the current file cursor\r\nprint(f.tell())\r\n#bring file cursor to initial position\r\nf.seek(0)..\r\nRead file line by line\r\n----------------------\r\nwe can read a file line-by-line using for loop..\r\nThis is both efficient and fast..\r\nExample\r\n-------\r\nf=open(\"python class.txt\",'r')\r\nfor line in f:\r\nprint(line)\r\nreadline() method..\r\n-------------------\r\nwe can use the readline() method to read individual lines of a file..\r\nThis method reads a file till the newline..\r\nExample\r\n-------\r\nfile.py\r\nf=open(\"C:\\Users\\Ramyasri.X.Kapalavai\\OneDrive - Quest\r\nDiagnostics\\Desktop\\Ramya\\python class.txt\",'r')\r\nprint(f.readline()) #my first file\r\nprint(f.readline()) #This file\r\nPython directory\r\n----------------\r\nA directory or folder is a collection of files and subdirectories..\r\nIf there are large number of files to handle in your python progaram you\r\ncan arrange the code with different directories to make things more\r\nmanageable..\r\npython has the 'os' module which provides us with many useful methods to\r\nwork with directories..\r\nGet current directory\r\n---------------------\r\npresent working directory -- getcwd() method defined in the os module..\r\nimport os\r\ncurrent_directory=os.getcwd()\r\nprint(current_directory)\r\nList of directories and files\r\n------------------------------\r\nAll files and subdirectories inside a directory can be known using\r\nlistdir() method..\r\nExample\r\n-------\r\nimport os\r\nfolder_path='C:\\Users\\Ramyasri.X.Kapalavai\\OneDrive - Quest\r\nDiagnostics\\Desktop\\Ramya'\r\nresult=os.listdir(folder_path)\r\nprint(result)\r\nCreate a new directory\r\n----------------------\r\nwe can make a new directory using mkdir() method..\r\nExample\r\n-------\r\nimport os\r\nos.mkdir('test')\r\nRenaming a directory\r\n--------------------\r\nRename() method can be used to rename a directory or file..\r\nExample\r\n-------\r\nimport os\r\nos.rename('test','test1')\r\nMoving files/directories\r\n--------------------------\r\nif we want to move files/directories from one place to another we use\r\nrename() method..\r\nExample\r\n-------\r\nimport os\r\nos.rename('test','Documents')\r\nRemoving directory or files\r\n---------------------------\r\nA file can be removed using remove() method...\r\nSimilarly rmdir() method removes and empty directory...\r\nExample\r\n-------\r\nimport os\r\nos.listdir()\r\n['test','python.txt']\r\nos.remove('python.txt')\r\nos.listdir()\r\n['test']\r\nos.rmdir('test')\r\nos.listdir()\r\n[]\r\nException Handling\r\n-------------------\r\nPython Exceptions\r\n-------------------\r\nErrors occur at runtime(syntax errors,name error, indentation error,type\r\nerror)... These errors are known as exceptions...\r\nBuilt-in exceptions\r\n-------------------\r\nWhen a file we try to open does not exist FileNotFoundError..\r\nDividing a number with zero , ZeroDivisionError\r\nModule try to import is not found ImportError..\r\nAssignment\r\n-----------\r\npython.org -- website\r\nbuilt-in exceptions page ----\r\nInterview questions\r\n---------------------\r\n1.. Introduction of python..\r\n2..what is python ? what are the benefits of using python?\r\n3..what is a dynamically typed language ?\r\n4..what is a interpreted language ?\r\n5..what is scope in python ?\r\n6..what are lists and tuples ? what is the key difference between these\r\ntwo ?\r\n7..what are common-built in data types in python ?\r\n8..what is slicing in python ?\r\n9..what are modules in python?\r\n10..what are global,protected,private attributes in python ?\r\n11.what is the use of self in python?\r\n12..what is __int__() ?\r\n13..what is break, continue and pass in python ?\r\n14.. How is memory managed in python ?\r\n15..what is an exception?\r\n16..why we use raise keyword?\r\n17..what is try clause and except clause.. when to use?\r\n18..What is custom exceptions?\r\n19..when we use try..finally clause?\r\nPython Exception Handling\r\n-------------------------\r\nWhen the exception occurs it causes the current process to stop and\r\npasses it to the calling function until it is handled..\r\nCatching Exceptions\r\n--------------------\r\nIn python exceptions can be handled using a try statement..\r\nAn operation which can raise an exception placed inside a try clause and\r\nthe code get handled the exception is written using except clauses..\r\nExample\r\n-------\r\ndef findReciprocal(value):\r\ntry:\r\nprint(\"value:\",value)\r\nr=1/value\r\nprint(\"The reciprocal of value is\",r)\r\nexcept:\r\nprint(\"You cannot find reciprocal of\",value)\r\nfindReciprocal(\"Hello\")\r\nfindReciprocal(2)\r\nCatching specific exceptions\r\n------------------------------\r\ndef findReciprocal(value):\r\ntry:\r\nprint(\"value:\",value)\r\nr=1/value\r\nprint(\"The reciprocal of value is\",r)\r\nexcept ValueError:\r\nprint(\"You got value error\")\r\nexcept ZeroDivisionError:\r\nprint(\"You got a zero division error\")\r\nexcept:\r\nprint(\"Haandling all errors\")\r\nfindReciprocal(\"Hello\")\r\nfindReciprocal(2)\r\nfindReciprocal(0)\r\nRaising exceptions\r\n------------------\r\nraise keyword --- we can forcefully raise some errors/exceptions..\r\nRaise --- optional..\r\nExample\r\n----------\r\na=int(input(\"Enter a positive integer:\"))\r\ntry:\r\nif a<=0:\r\nraise ValueError(\"Not a positive number\")\r\nprint(\"You entered\",a)\r\nexcept ValueError as ve:\r\nprint(ve)\r\ntry..finally\r\n------------\r\nfinally -- optional\r\ntry..finally uses mainly in file operations..\r\nExample\r\n-------\r\ntry:\r\nf=open(\"test.txt\",\"r\")\r\n#perform file operations\r\nfinally:\r\nf.close()\r\nCustom/userdefined Exceptions\r\n-------------------------------\r\nusers can define such exceptions by creating a new class..\r\nExample\r\n-------\r\nclass Error(Exception):\r\n\"\"\"Base class for other\r\nexceptions\"\"\"\r\npass\r\nclass ValueTooSmallError(Error):\r\n\"\"\"Raise when the input value is too\r\nsmall\"\"\"\r\npass\r\nclass ValueTooLargeError(Error):\r\n\"\"\"Raise when the input value is too\r\nlarge\"\"\"\r\npass\r\nAssignment coding questions\r\n---------------------------\r\n1). Write a program to reverse an integer in Python\r\n2). Write a program in Python to check whether an integer is Armstrong\r\nnumber or not.\r\n3). Write a program in Python to check given number is prime or not.\r\n4). Write a program in Python to print the Fibonacci series using\r\niterative method.\r\n5). Write a program in Python to print the fibonacci series using\r\nrecursive method.\r\n6). Write a program in Python to check whether a number is palindrome or\r\nnot using iterative method.\r\n7). Write a program in Python to check whether a number is palindrom or\r\nnot using recursive method.\r\n8). Write a program in Python to find greatest among three integers.\r\n9). Write a program in Python to check if a number is binary?\r\n10). Write a program in Python to find sum of digits of a number using\r\nrecursion?\r\n11). Write a program in Python to swap two numbers without using third\r\nvariable?\r\n12). Write a program in Python to swap two numbers using third variable?\r\n13). Write a program in Python to find prime factors of a given integer.\r\n14). Write a program in Python to add two integer without using\r\narithmetic operator?\r\ndef add(a,b):\r\n#iterating till there is no sum\r\nwhile(b!=0)\r\n#set of bits a and b\r\nsum=a&b\r\n#sum of bits of a and b where at least one of the bits is not set\r\na=a^b\r\n#adding bits given to the required sum\r\nb=sum<<1\r\nreturn a\r\nprint(add(15,32))\r\n..def add(a,b)\r\nfor i in range(1,b+1):\r\na=a+1\r\na=add(10,32)\r\nprint(a)\r\n..def add(a,b):\r\nif(b==0):\r\nreturn a\r\nelse:\r\nreturn add(a^b,(a&b)<<1)\r\n15). Write a program in Python to find given number is perfect or not?\r\n16). Python Program to find the Average of numbers with explanations.\r\n17). Python Program to calculate factorial using iterative method.\r\n18). Python Program to calculate factorial using recursion.\r\n19). Python Program to check a given number is even or odd.\r\n20). Python program to print first n Prime Number with explanation.\r\n21). Python Program to print Prime Number in a given range\r\n22). Python Program to find Smallest number among three.\r\nObject - Oriented programming\r\n------------------------------\r\nClass and Objects\r\n-----------------\r\nPython is an object oriented programming..\r\nProcedural language, functional language, object oriented programming..\r\n.... object is a simply collection of data(variables or methods or\r\nfunctions)...\r\n...Class --- blueprint of object..\r\n...class house\r\ncontains doors,floors,windows etc..\r\nAn object is also called an instance of class and the process of creating\r\nobject is called instaniation..\r\nHow to defined a class\r\n-----------------------\r\nclass --- keyword\r\nclass My NewClass:\r\n#methods and attributes\r\npass\r\nCreating an object\r\n-------------------\r\nTo access the attributes of a class we use objects instantiated it..\r\nExample\r\n--------\r\nclass MyClass:\r\na=10\r\ndef func(self):\r\nreturn \"hello\"\r\n#instantiate an object\r\nobj=MyClass()\r\nprint(obj.a)\r\nprint(obj.func())\r\nCreating Multiple objects\r\n-------------------------\r\nclass MyClass:\r\na=10\r\ndef func(self):\r\nreturn \"hello\"\r\nobj1=MyClass()\r\nobj2=MyClass()\r\nprint(obj1.a)\r\nprint(obj1.a)\r\nobj1.a=11\r\nobj2.a=1000\r\nprint(obj1.a)\r\nprint(obj2.a)\r\nClass objects\r\n-------------\r\nwhen we define a class in python an object of the same class name is\r\nautomatically created..\r\nExample\r\n-------\r\nclass MyClass:\r\na=10\r\ndef func(self):\r\nreturn \"hello\"\r\nprint(MyClass.a)\r\nExample\r\n-------\r\nclass Number:\r\ndef add(self,a,b):\r\nreturn a+b\r\ndef multiply(self,a,b):\r\nreturn a*b\r\n#instantiate an object\r\nn1=Number()\r\nsum=n1.add(2,3)\r\nprint(sum)\r\nproduct=n1.multiply(2,5)\r\nprint(product)\r\nAssignment\r\n----------\r\n..what is the use of self parameter?\r\nThe self parameter is a reference to the current instance of the class,\r\nand it is used to access variables, methods that belongs to the class..\r\nclass MyClass:\r\ndef __init__(abc,name,age):\r\nabc.name=name\r\nabc.age=age\r\ndef func(MyObject):\r\nprint(\"Hello my is \"+MyObject.name)\r\nobj=MyClass(\"Sindhu\",25)\r\nobj.func()\r\nConstructors\r\n-------------\r\n__init__() function .... also called as constructor..\r\n__ ---- class functions that begin with double underscore are called\r\nspecial functions..\r\nExample\r\n-------\r\nclass MyClass:\r\ndef __init__(self,p1=0,p2=0):\r\nself.a=p1\r\nself.b=p2\r\nobj=MyClass(2,3)\r\nprint(obj.a,obj.b)\r\nobj1=MyClass()\r\nprint(obj1.a,obj1.b)\r\nAssignment\r\n----------\r\nWrite a program to find distance from origin..\r\nclass Point(object):\r\ndef __init__(self,x=0,y=0):\r\nself.x=x\r\nself.y=y\r\ndef distance(self):\r\nreturn(self.x**2+self.y**2)**0.5\r\np1=Point(6,8)\r\ndistance=p1.distance()\r\nprint(distance)\r\nDeleting Attributes of an object\r\n--------------------------------\r\nyou can delete attributes of an object using del statement...\r\nExample\r\n-------\r\nclass Point(object):\r\ndef __init__(self,x=0,y=0):\r\nself.x=x\r\nself.y=y\r\np1=Point(6,8)\r\nprint(p1.x,p1.y)\r\n#deleting attribute y..\r\ndel p1.y\r\nprint(p1.x)\r\nprint(p1.y)\r\nIf we want to access deleted attribute will face AttributeError..\r\nDeleting objects\r\n----------------\r\nYou can also delete the objects itself using del statement..\r\nExample\r\n--------\r\nclass Point(object):\r\ndef __init__(self,x=0,y=0):\r\nself.x=x\r\nself.y=y\r\np1=Point(6,8)\r\nprint(p1)\r\ndel p1\r\nprint(p1)\r\nIf we want to access deleted object will face NameError..\r\nPython Inheritence\r\n------------------\r\nInheritence is a powerful feature in object oriented programming\r\nlanguage..\r\nIt referes to defining a new class with little or no modification to an\r\nexisting class..\r\nThe new class is derived class(child class) and the one from which it\r\ninherits is called base class(parent class)\r\nGrandfather(parent class)\r\n....\r\nFather... (Derived class)\r\n....\r\nyou ... (Derived class)\r\nSyntax\r\n------\r\nclass BaseClass:\r\n#Body of the baseclass\r\nclass DerivedClass(BaseClass):\r\n#Body of the derived class\r\nWhy inheritence?\r\n-----------------\r\nclass Polygon:\r\ndef __init__(self,no_of_sides):\r\nself.n=no_of_sides\r\nself.sides=[]\r\nfor i in range(no_of_sides):\r\nself.sides.append(0)\r\ndef input_sides(self):\r\nfor i in range(self.n):\r\nself.sides[i]=float(input(\"Enter side\"+str(i+1)+\":\"))\r\n#inheriting Triangle from polygon class\r\nclass Triangle(Polygon):\r\ndef __init__(self):\r\nPolygon.__init__(self,3)\r\ndef find_area(self):\r\na,b,c=self.sides\r\n#caluclate the semi-perimeter\r\ns=(a+b+c)/2\r\narea=(s*(s-a)*(s-b)*(s-c))**0.5\r\nprint(\"The area of the triangle is\",area)\r\nt=Triangle()\r\nt.input_sides()\r\nt.find_area()\r\nMethod overriding and method overloading\r\n----------------------------------------\r\nMethod overloading is an example of compile time polymorphism..\r\nIn this more than one method of the same class shares the same method\r\nname having different signatures..\r\nMethod overloading is used to add more of the method behaviours and there\r\nis no need of more than one class for method overloading..\r\nExample\r\n-------\r\n# Online Python compiler (interpreter) to run Python online.\r\n# Write Python 3 code in this online editor and run it.\r\n# Function to take multiple arguments\r\ndef add(datatype,*args):\r\n#if datatype is int\r\n#intialize with 0\r\nif datatype=='int':\r\nanswer=0\r\n#if datatype is string\r\n#intaialize with ''\r\nif datatype=='str':\r\nanswer=''\r\n#Traverse trhough the arguments\r\nfor x in args:\r\n#This will do addition if the arguments are int..\r\n#This will do concatenation if the arguments are str\r\nanswer=answer+x\r\nprint(answer)\r\n#integer\r\nadd('int',5,6)\r\n#string\r\nadd('str','Hi','Python')\r\nAssignment\r\n----------\r\nwrite an example for method overloading by using class...\r\nMethod overriding\r\n-----------------\r\nMethod overriding is an example of runtime polymorphism..\r\nIn this the specific implementation of the method that is already\r\nprovided by parent class is provided by the child class..\r\nIt is used to change the behaviour of existing methods and there is need\r\nfor at least two classes for method overriding..\r\nInheritence always required as it done between parent class and child\r\nclass..\r\nExample\r\n-------\r\nclass A:\r\ndef func1(self):\r\nprint('feature1 of class A')\r\ndef func2(self):\r\nprint('feature2 of class A')\r\nclass B(A):\r\n#Modified function that is already exists in class A\r\ndef func1(self):\r\nprint('Modified feature-1 of class A by class B')\r\ndef func3(self):\r\nprint('feature-3 of class B')\r\n#create instance\r\nobj=B()\r\n#call the override function\r\nobj.func1()\r\nAssignment\r\n----------\r\nwhat are the differences between method overloading and method\r\noverriding..\r\nisinstance() and issubclass()\r\n-----------------------------\r\nTwo built-in functions..\r\nisinstance()---function returns True if the object is an instance of\r\nclass..\r\nissubclass() -- used to check class inheritence..\r\nExample\r\n-------\r\nclass polygon:\r\npass\r\nclass Triangle(polygon):\r\npass\r\nt=Triangle()\r\nprint(isinstance(t,Triangle))\r\nprint(isinstance(t,polygon))\r\nprint(isinstance(t,int))\r\nprint(isinstance(t,object))\r\nprint(issubclass(polygon,Triangle))\r\nprint(issubclass(Triangle,polygon))\r\n\r\n\r\n\r\nPolymorphism\r\n--------------\r\nThe word polymorphism means having many forms..\r\nIn programming, polymorphism means the same function name but with\r\ndifferent signatures being used for different types..\r\nExample\r\n---------\r\n#polymorphism with inheritence\r\nclass Bird:\r\ndef intro(self):\r\nprint(\"There are many types of birds\")\r\ndef fly(self):\r\nprint(\"Most of the birds can fly but some cannot\")\r\nclass sparrow(Bird):\r\ndef fly(self):\r\nprint(\"sparrows can fly\")\r\nclass ostrich(Bird):\r\ndef fly(self):\r\nprint(\"ostriches cannot fly\")\r\nobj_bird=Bird()\r\nobj_spr=sparrow()\r\nobj_ost=ostrich()\r\nobj_bird.intro()\r\nobj_bird.fly()\r\nobj_spr.intro()\r\nobj_spr.fly()\r\nobj_ost.intro()\r\nobj_ost.fly()\r\n#polymorphism example\r\nclass India():\r\ndef capital(self):\r\nprint(\"New Delhi is the capital of India\")\r\ndef language(self):\r\nprint(\"Hindi is the most spoken language of india\")\r\ndef type(self):\r\nprint(\"Inida is a developing country\")\r\nclass USA():\r\ndef capital(self):\r\nprint(\"washington DC is the capital of US\")\r\ndef language(self):\r\nprint(\"English is the most spoken language\")\r\ndef type(self):\r\nprint(\"USA is developed country\")\r\nobj_ind=India()\r\nobj_usa=USA()\r\nfor country in(obj_ind,obj_usa):\r\ncountry.capital()\r\ncountry.language()\r\ncountry.type()\r\nEncapsulation\r\n-------------\r\n\r\n\r\n\r\n\r\nEncapsulation in python describes the concept of building data and\r\nmethods within a single unit..\r\nwhen you create a class it means you are implementing encapsulation..\r\nExample\r\n-------\r\nclass Employee:\r\n#constructor\r\ndef __init__(self,name,salary,project):\r\n#data memebers\r\nself.name=name\r\nself.salary=salary\r\nself.project=project\r\n#method\r\n#to display employee details\r\ndef show(self):\r\nprint(\"Name: \",self.name,\"salary: \",self.salary)\r\ndef work(self):\r\nprint(self.name,'is working on',self.project)\r\nemp=Employee('rama',10000,'NLP')\r\nemp.show()\r\nemp.work()\r\n..using encapsulation we can hide an objects internal representation from\r\nthe outside..\r\nThis is called data hiding/Information hiding..\r\nAlso encapsulation allows us to restrict accessing variables and methods\r\ndirectly to prevent from data modification by creating private data\r\nmembers and methods in a class...\r\nAccess modifiers in python\r\nEncapsulation can be achieved by declaring the datamembers and methods of\r\na class either as private or protected..\r\nBut in python we dont have access for modifiers like public,private and\r\nprotected..\r\nwe can use single underscore and double underscores..\r\npublic member : Accessible anywhere from outside class..\r\nAll member variables of the class are by default public..\r\n\r\n\r\nExample\r\n--------\r\nclass Employee:\r\n#constructor\r\ndef __init__(self,name,salary):\r\n#data memebers\r\nself.name=name\r\nself.salary=salary\r\n#method\r\n#to display employee details\r\ndef show(self):\r\nprint(\"Name: \",self.name,\"salary: \",self.salary)\r\nemp=Employee('rama',10000)\r\nemp.show()\r\nprivate member : Accessible within class..\r\nto define a private member we have to add two underscores as a prefix at\r\nthe start of the variable names..\r\nExample\r\n--------\r\nclass Employee:\r\n#constructor\r\ndef __init__(self,name,salary):\r\n#public data memeber\r\nself.name=name\r\n#private data member\r\nself.__salary=salary\r\nemp=Employee('rama',10000)\r\nprint('salary:',emp.__salary)\r\nIn the above example, the salary is a private variable..\r\nAs we know we can't access private variable from the outside class..\r\nInstance method\r\n---------------\r\nAccessing private members outisde a class using instance(public) method..\r\nExample\r\n-------\r\nclass Employee:\r\n#constructor\r\ndef __init__(self,name,salary):\r\n#public data memeber\r\nself.name=name\r\n#private data member\r\nself.__salary=salary\r\n#public method\r\ndef show(self):\r\nprint(\"Name:\",self.name,\"salary:\",self.__salary)\r\nemp=Employee('rama',10000)\r\nemp.show()\r\nprotected member : Accessible within the class and its subclass..\r\nTo define protected member prefix the member variable with a single\r\nunderscore(_)\r\nprotected data members are used when you implement inheitence and want to\r\nallow data members access to only child class...\r\nExample\r\n--------\r\nclass Company:\r\ndef __init__(self):\r\n#protected member\r\nself._project='NLP'\r\nclass Employee:\r\n#constructor\r\ndef __init__(self,name):\r\n#public data memeber\r\nself.name=name\r\nCompany.__init__(self)\r\n#public method\r\ndef show(self):\r\nprint(\"Employee name:\",self.name)\r\n#accessing protected members\r\nprint(\"working on project:\",self._project)\r\nemp=Employee('rama')\r\nemp.show()\r\nprint(\"project:\",emp._project)\r\nGetters and setters in python\r\n------------------------------\r\nTo implement proper encapsulation in python we use getter and setter\r\nmethods..\r\nuse the getter method to access data members and the setter methods to\r\nmodify data members..\r\nwhen we want to avoid direct access to private members..\r\nTo add validation logic for setting a value..\r\nExample\r\n-------\r\n# Online Python compiler (interpreter) to run Python online.\r\n# Write Python 3 code in this online editor and run it.\r\nclass Student:\r\ndef __init__(self,name,age):\r\nself.name=name\r\nself.__age=age\r\n#getter method\r\ndef get_age(self):\r\nreturn self.__age\r\n#setter method\r\ndef set_age(self,age):\r\nself.__age=age\r\nstud=Student('rama',15)\r\n#retreiving age by using getter\r\nprint(\"Name:\",stud.name,stud.get_age())\r\n#changing age using setter\r\nstud.set_age(17)\r\nprint(\"Name:\",stud.name,stud.get_age())\r\nNamespaces\r\n----------\r\nName(identifier)\r\nNAme is simply a name given to objects..\r\nEverything in python is an object..\r\nNAme is a way to underly the object..\r\nFor example when we do the assignment a=2 here 2 is an object stored in\r\nmemory and a is the name we assosciate with it...\r\nWe can get the address in RAM of some object through built in function\r\nid()\r\nExample\r\n------\r\na=2\r\nprint('id(2)=',id(2))\r\nprint('id(a)=',id(a))\r\nNamespace\r\n---------\r\nA namespace is a collection of names..\r\nA namespace containing all built-in names is created when we start the\r\npython intreprter and exists as long as we don't exists..\r\nThis is the reason that built-in namespaces like\r\nid(),int(),print(),input()...etc are always available to us from any part\r\nof the program..\r\nEach module creates its own global namespaces...\r\nAssignment\r\n-----------\r\nwhat is a local namespace, global namespace and built-in namespaces..\r\nAdvanced Python\r\n----------------\r\nIterators\r\n---------\r\nIterators are everywhere in python...\r\nFor example when we implement for loops ...\r\nIterator in python is simply an object that can be iterated upon..\r\nAn object which will return data one element at a time....\r\nspecial methods : __iter__() and __next__()\r\nThe iter() function which in turn calls __iter__() methods returns an\r\nitertor from them...\r\nIterating through a iterator\r\n----------------------------\r\nwe can use next() function to manually iterate through all the items of\r\nan iterator...\r\nwhen we reach at the end of the iteration there is no more data to be\r\nreturned, it will raise StopIteration..\r\nExample\r\n-------\r\nmy_list=[4,7,0]\r\n#get an iterator using iter()\r\nmy_iter=iter(my_list)\r\nprint(next(my_iter))\r\nprint(next(my_iter))\r\nprint(my_iter.__next__())\r\nprint(next(my_iter))\r\nAssignment\r\n----------\r\nWrite a program using iterators....\r\nInfinite iterators\r\n------------------\r\nExample\r\n-------\r\n# Online Python compiler (interpreter) to run Python online.\r\n# Write Python 3 code in this online editor and run it.\r\nclass InfIter:\r\n\"\"\"Infinite iterator to return\r\nall\r\nodd numbers\"\"\"\r\ndef __iter__(self):\r\nself.num=1\r\nreturn self\r\ndef __next__(self):\r\nnum=self.num\r\nself.num+=2\r\nreturn num\r\ni=InfIter()\r\na=iter(i)\r\nprint(next(a))\r\nprint(next(a))\r\nprint(next(a))\r\nprint(next(a))\r\n# so on\r\nGenerators\r\n-----------\r\nPython generators are a simple way of creating iterators..\r\nA generator is a function that returns an object which can iterate\r\nover..(one value at a time)\r\nHow to create a generator\r\n-------------------------\r\nIf a function contains one yield statement , it may contain other yield\r\nor return statements...it becomes a generator function..\r\nBoth yiled and return wil return some value from a function...\r\nThe difference is that while a return statement terminates a function\r\nentirely, yield statement pauses the function saving all its states and\r\nlater continues from there on successive calls...\r\n..Generatorfunction contains one or more yield statements...\r\n..when called, it returns an object (itertor) but does not start\r\nexecution immediately...\r\n..methods like __iter__() and __next__() are implemented automatically...\r\nso we can iterate through next()\r\n..Finally when the function terminates , StopIteration\r\nExample\r\n--------\r\ndef my_gen():\r\nn=1\r\nprint(\"This is printed first\")\r\nyield n\r\nn+=1\r\nprint(\"This is printed second\")\r\nyield n\r\nn+=1\r\nprint(\"This is printed third\")\r\nyield n\r\na=my_gen()\r\nnext(a)\r\nnext(a)\r\nnext(a)\r\nnext(a)\r\nUsing generators with for loop\r\n-----------------------------\r\ndef my_gen():\r\nn=1\r\nprint(\"This is printed first\")\r\nyield n\r\nn+=1\r\nprint(\"This is printed second\")\r\nyield n\r\nn+=1\r\nprint(\"This is printed third\")\r\nyield n\r\n#using for loop\r\nfor item in my_gen():\r\nprint(item)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python and Python_Interview_Questions/python_class.py b/python and Python_Interview_Questions/python_class.py
--- a/python and Python_Interview_Questions/python_class.py	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/python and Python_Interview_Questions/python_class.py	(date 1694520540000)
@@ -1,2375 +1,0 @@
-# Python introduction
-# --------------------
-# Python is a popular programming language..
-# It was created by Guido van rossum, and released in 1991...
-# It is used for
-# ..web development
-# ..software development
-# ..mathematics
-# ..system scripting..
-# What can python do ?
-# ..python can be used on a server to create web applications..
-# ..python can be used to create software workflows...
-# ..python can connect database systems...it can also used to read and
-# modify files..
-# ..python can be used to perform complex mathematics..
-# ..python can be used for production ready software development...
-# Why python ?
-# ------------
-# ..python works on different platforms..(windows,Mac,Linux,...etc)
-# ..python has a simple syntax similar to english language..
-# ..python has syntax that allows programmers to write programs in fewer
-# lines..
-# ..python runs on an interpreter systems,...excuted
-# ..python can be treated in a procedural way, an object oriented way and
-# functional way...
-# Assignment
-# ----------
-# ..Differences between procedural way, object oriented way and functional
-# way...
-# ..python versions python 3.x.... 3.10...october 4th
-# ..pycharm ---- download...
-# 1..Introduction
-# a)Getting started
-# b)Variables and literals, python comments
-# c)input and output
-# d)Type conversion
-# e)operators
-# 2..Decision making and loop
-# a)if..else statement
-# b)while loop
-# c)for loop
-# d)break and continue
-# e)pass
-# Control flow examples
-# 3)Functions
-# a)Function
-# b)Variable scope and lifetime
-# c)Function arguments
-# d)Anonymous function
-# e)Recursion
-# 4)***Collections/Data structures
-# ---------------------------------
-# a)lists
-# b)Tuples
-# c)Strings
-# d)sets
-# e)Dictionary
-# 5)Modules and files/File handling
-# ---------------------------------
-# a)Modules
-# b)Files
-# c)Directory
-# 6)Exception handling
-# a)Exception
-# b)Exception handling
-# c)Custom exceptions
-# 7)***Object-oriented programming
-# a)Class and object
-# b)Constructors
-# c)inheritence
-# d)Polymorphism
-# e)Encapsulation
-# f)Namespaces..
-# ..python email handling...
-# ..Assert() keyword
-# Advanced topics
-# ----------------
-# 1)Iterators
-# 2)Generators
-# 3)Closures
-# 4)Decorators
-# 5)python@property
-# ..Deep copy and shallow copy
-# ..Docstring in pandas...
-# Introduction
-# -------------
-# a)Getting started
-# -------------------
-# The only way you can get better at programming is by writing code...
-# Example
--------
-#write a program to print hello world..
-print("Hello world")
-#write a program sum of two numbers...
-a=5
-b=3
-sum=a+b
-print(sum)
-b)variables and literals
-------------------------
-Python variables
------------------
-A variable in programming is used to store data(value)...
-For example
-a=5
-variable 'a' has value 5...
-Changing variable values
-------------------------
-Example
---------
-a=5
-a=10
-print(a)
-..we change variable value from a=5 to a=10 manually...
-Rules for naming a variables
-----------------------------
-..A variable name consists of alphabets(a to z) (A to Z) or digits(0 to
-9) or an underscore...
-..you cannot start a variable name with a digit..
-..use underscore if you want to create a variable name having two words..
-Example
---------
-First_name,second_name,number,number1...
-1number---syntax error...
-Python Literals
----------------
-Literal is a raw data used for representing fixed values....
-Three types of literals...
-1..Numeric literals
-----------------
-Three types : Integer,float and complex
-Integers -- 1,2,3,0,-1,-2....etc
-Float -- 2.3,3.4,8.7..........etc
-Complex .. 1.5j,2+3.4j........etc
-Binary,hexadecimal and octal systems..
-a=0b1011 #binary
-b=0o310 #octal
-c=0x12c #hexadecimal
-2)String Literals
------------------
-A string literal is a sequence of characters surrounded by quotes..
-we can use single,double,or triple quotes for a string...
-Example
--------
-name="Ramya"
-name='ramya'
-For multiline strings, we use triple quotes..
-multiline_string="""This is our
-python class"""
-3)Boolean literals
--------------------
-Two boolean literals : True and False
-Note : True and False are case sensitive..
-Python comments
-----------------
-A comment is used to describe what's going on inside a program...
-# symbol --- we will start to write a comment..
-Example
--------
-#This is a comment
-c)input and output
--------------------
-python provides built-in functions that allows you to output data and
-take input from the user...
-print() and input()
-Python print()
----------------
-print() function is used to display data to the standarad output
-device(screen)
-Example
----------
-print("This is the python programming session")
-The print() function prints the content inside the paranthesis()..
-input()
--------
-Take input from the user...
-name=input("Enter name:")
-print("Hello",name)
-d)Type conversion...
----------------------
-Convert from one data type to another datat type...
-Data types : Integer , string, float..etc..
-Two types :
-Implicit type Conversion
-------------------------
-Python automatically converts one data type to another data type..
-Example
--------
-number_integer=12
-number_float=12.3
-sum=number_integer+number_float
-print(sum)
-Type() function
-----------------
-We can find the type of a variable using type() function..
-Example
--------
-number_integer=12
-number_float=12.3
-sum=number_integer+number_float
-print(type(sum))
-Explicit type conversion
--------------------------
-predefine functions like int(),float(),str()..etc to convert to one
-datatype to another data type
-Example
---------
-float_number=1.23455
-#converting to integer
-integer_number=int(float_number)
-print(integer_number)
-print(type(integer_number))
-#write a program to convert string to int and float..
-a='55'
-integer_number=int(a)
-float_number=float(a)
-print(integer_number)
-print(float_number)
-Assignment
-------------
-#write a program to convert integer number to float number...
-#write a program to convert integer number and float number to string...
-e)Operators
-------------
-An operator is a special symbol that carries arithmetic and logical
-computation...
-Arithmetic operators
---------------------
-Addition,subtraction,multiplication,division...etc
-+ operator
-----------
-x=1
-y=2
-z=3
-result=x+y+z
-print(result)
-Concatenate two strings
------------------------
-+ operator is used to concatenate two strings..
-Example
--------
-first_name='ramya'
-last_name='sri'
-name=first_name+' '+last_name
-print(name)
-- operator
------------
-a=12
-b=9
-result=a-b
-print(result)
-* operator
------------
-a=12
-b=9
-result=a*b
-print(result)
-Multiply string
----------------
-a='sri'
-b=9
-result=a*b
-print(result)
-/ and // operator
-------------------
-result=14/3
-result1=14//3
-print(result)
-print(result1)
-% operator
-----------
-remainder....
-result=14%3
-print(result)
-**operator
-----------
-result=2**6
-print(result)
-Assignment operators
---------------------
-= opertaor is used to assign values to variables..
-Example
---------
-x=100
-x=x+5
-print(x)
-More Assignment operators
--------------------------
-+= x+=5 x=x+5
--= x-=5 x=x-5
-*= x*=5 x=x*5
-/= x/=5 x=x/5
-%= x%=5 x=x%5
-//= x//=5 x=x//5
-**= x**=5 x=x**5
-Example
--------
-x=100
-x+=5 #x=x+5
-print(x)
-Boolean Operators
-------------------
-True and False
-Example
---------
-print(5<6)
-print(3<2)
-Comparision operators
-----------------------
-Either True or False
-Greater than(>), less than(<), ==Equal to, Not equal to(!=), Greater than
-or equa to(>=), less than or equal to(<=)
-Example
--------
-x=10
-y=12
-print(x>y)
-print(x<y)
-print(x==y)
-print(x!=y)
-print(x>=y)
-print(x<=y)
-Logical operators
------------------
-and ----- True if both operands are true
-Example
---------
-print(True and True)
-print(True and False)
-print(False and True)
-print(False and False)
-or --- True if one operand is True
-Example
----------
-print(True or True)
-print(True or False)
-print(False or True)
-print(False or False)
-not --- True if the operand is false
-print(not True)
-print(not False)
-2)Decision Making and loop
----------------------------
-if..else statement
-------------------
-if statement
-------------
-syntax:
-if boolean_expression:
-statement(s)
-boolean_expression evaluates to True the body of if will executed
-boolean_expression evaluates to False the body of if statements will
-skip...
-Example
---------
-number=3
-if number>2:
-print("Number is positive")
-print("This is always executed")
-if..else statement
--------------------
-if boolean expression:
-statement(s)
-else:
-statement(s)
-IF the boolean_expression evaluates True the body of if statement is
-executed..
-if the boolean_expression evaluates False the body of else statement is
-executed..
-Example
---------
-number=3
-if number>=0:
-print("Number is positive")
-print("The body of if is executed")
-else:
-print("Negative number")
-print("The body of else is executed")
-if..elif..else
----------------
-if boolean_expression:
-statement(s)
-elif boolean expression:
-statement(s)
-else:
-statement(s)
-Example
---------
-number=0
-if number>0:
-print("positive number")
-elif number==0:
-print("Zero")
-else:
-print("Negative number")
-While Loop
-----------
-While loop is used to repeat a block of code as long as the
-boolean_expression is true..
-Syntax:
-while boolean_expression:
-statement(s)
-Example
----------
-n=3
-i=1
-while i<=n:
-print("Loop is easy")
-i=i+1
-Example
---------
-# write a program to print sum of natural numbers...
-n=10
-#initialize sum and count
-sum=0
-i=1
-while i<=n: #1<=10 # True
-sum=sum+i # sum=0+1 == sum=1
-i=i+1 # 1+1 =2
-print("The sum is",sum)
-For Loop
---------
-for loop in python is used to iterate over a sequenceof objects...
-Sequences
-----------
-strings --- A string is a sequence of characters...
-Example
--------
-text='python programming'
-Lists
--------
-A list is a sequence of items seperated by commas and enclosed in square
-brackets..
-Example
--------
-my_list=[2,"text",5.6]
-range()
-------
-range() is used to create a sequence of numbers..
-Example
---------
-numbers=range(1,6)
-Syntax
-------
-for val in sequence:
-statement(s)
-Example
--------
-languages=['java','python','c++']
-for item in languages:
-print(item)
-Example
----------
-numbers=range(1,101)
-for item in numbers:
-print(item)
-Assignment
-----------
-#write a program to print sum of numbers 1 to 100 by using range()
-Example
---------
-numbers = range(1,101)
-sum=0
-for i in numbers:
-sum=sum+i // sum+=i
-print("sum=",sum)
-Break and continue
-------------------
-python break statement
-----------------------
-sometimes we may need to terminate the loop immediately without checking
-the next expression then we use break statement...
-Example
----------
-numbers=[1,2,-3,46,78]
-for val in numbers:
-if val<0:
-break
-print(val)
-Python continue statement
---------------------------
-numbers=[1,4,-100,5,-9]
-for val in numbers:
-if val<=0:
-continue
-print(val)
-print("This is outside loop")
-pass statement
---------------
-numbers=[1,4,-100,5,-9]
-for val in numbers:
-pass
-print("statement after loop")
-...we have a loop or function that is not properly implemented yet, but
-we want to implement it in the future..
-It cannot have a empty body, passs statement is used..
-Assignment
------------
-1..Write a program to find the largest number among three numbers..
-2..Write a program to check leap year
-3..write a program to generate fibonacci sequence..
-0,1,1,2,3,5,8,..........etc
-The first two terms are 0 and 1..
-n_term=20
-#first two terms
-n1=0
-n2=1
-count=0
-print("fibonacci sequence upto",n_term)
-while count<n_term:
-print(n1,end=',')
-nth=n1+n2
-n1=n2
-n2=nth
-count=count+1
-print()
-4..write a progarm to check prime number..
-Example
--------
-num=504
-flag=1
-for i in range(2,num):
-if(num%i)==0:
-print(num,"is not a prime number")
-print(i,"times",num//i,"is",num)
-flag=0
-break
-if flag==1:
-print(num,"is a prime number")
-Functions
-----------
-Function helps break our program into smaller and modular chunks..
-As our program grows larger by larger functions make it organized and
-manageable..
-How to create a function
--------------------------
-def function_name(parameters):
-statement(s)
-def -- keyword makes the start of the function header..
-function_name=unique name given to identify function (simliar to
-variables)
-parameters (arguments) are used to pass values to function.. They are
-optional..
-colon : ... mark the end of the functionheader..
-return statement --- optional..
-Example
--------
-def greet(name):
-print("Hello",name)
-print("What's going on?")
-greet('bhuvana') --- function call
-Example
---------
-# write a program to add two numbers using functions...
-def add_numbers(n1,n2):
-sum=n1+n2
-print("sum=",sum)
-num1=5
-num2=7
-add_numbers(num1,num2)
-Return statement
-----------------
-A function may have optional return statement..
-It is used to exit a function and go back to the place from where it is
-called..
-Example
--------
-def add_numbers(n1,n2):
-sum=n1+n2
-return sum
-result=add_numbers(5,7)
-print("sum=",result)
-Variable scope
----------------
-def my_func():
-x=10
-print("Value inside function",x)
-x=20
-my_func()
-print("Value outside function",x)
-Local and global scope
------------------------
-Local variable scope
---------------------
-# Write Python 3 code in this online editor and run it.
-def my_func():
-x=10
-my_func()
-print(x) #Nameerror...
-Function Arguments
-------------------
-We learned how to define functions and the way to call them..
-we also learned a bit about passing arguments to a function...
-Example
--------
-def greet(name,msg):
-"""This funcion greets to the
-person with the provided
-message"""
-print("Hello",name+','+msg)
-greet("Mounika","Good Morning!!")
-Example
----------
-def greet(name,msg):
-"""This funcion greets to the
-person with the provided
-message"""
-print("Hello",name+','+msg)
-greet("Mounika")
-Output
-------
-Traceback (most recent call last):
-File "<string>", line 9, in <module>
-TypeError: greet() missing 1 required positional argument: 'msg'
-Default arguments
-------------------
-# Online Python compiler (interpreter) to run Python online.
-def greet(name,msg="Good Morning"):
-"""This funcion greets to the
-person with the provided
-message"""
-print("Hello",name+','+msg)
-greet("Mounika")
-greet("Divya")
-greet("Bhuvana","How are you")
-Anonymous function
-------------------
-You can define function without name...
-This function is called as anonymous function..
-Lambda as our keyword...
-syntax
--------
-lambda arguments:expression
-Example
--------
-#write a program to perform square of a number
-#lambda fuction
-square=lambda x:x*x
-#function call
-result=square(10)
-print(result)
-Python Recursion
-----------------
-A function that calls itself is known as a recursive function..
-Example
--------
-def calc_sum(n):
-if n==1:
-return 1
-else:
-return n+calc_sum(n-1)
-sum=calc_sum(3)
-print(sum)
-4)Collections/Data structures
-------------------------------
-data types : int,float and bool...
-Sequences ----
-Lists
------
-list is one of the most frequently used and versatile data type in
-python...
-A list is created by placing elements inside [] square brackets...
-Example
--------
-numbers=[1,23,44]
-How to create a list
---------------------
-A list can have any number of items...
-And these items may be of different data types like int,float and str...
-Example
--------
-#empty list
-list1 = []
-#list of integers
-list1=[1,2,3,4]
-#list with mixed datatypes
-list1=[1,3.4,"strain"]
-#Nested_list
-.. A list which contians another list is called nested list..
-my_list=["Hello",[1,2,3],["a"]]
-Access Elements from a List
----------------------------
-We can use the index operator[] to access item in a list..
-Example
---------
-numbers=[1,22,10,100,3.33]
-print(numbers[0])
-print(numbers[1])
-print(numbers[2])
-print(numbers[3])
-print(numbers[4])
-..We can acces first element using numbers[0],the second element
-numbers[1]........
-..Index starts from 0 (not 1).... so list having 5 elements will have an
-index from 0 to 4...
-..If you try to access an item outside the list you will get an
-IndexError..
-Negative Indexing
------------------
-python allows negative indexing for its sequences..
-The index of -1 refers to the last item, -2 refers the second last item
-and so on...
-Example
---------
-numbers=[1,22,10,100,3.33]
-print(numbers[-1])
-print(numbers[-2])
-print(numbers[-3])
-print(numbers[-4])
-print(numbers[-5])
-print(numbers[-6])
-Slicing of a list
------------------
-We will learn to access a range of items.. This is done by using slicing
-operator (:)
-Example
--------
-my_list=['p','y','a','b','c','h']
-#elements 3rd to 5th
-print(my_list[2:5])
-#elements 4th to end
-print(my_list[3:])
-#elements begining to 4th
-print(my_list[:3])
-#elements begining to end
-print(my_list[:])
-Change items of a list
-----------------------
-Lists are mutable... we can add,update,delete...
-We use = operator to change an item or range of items in a list...
-Example
--------
-odd=[2,4,6,8]
-#change the 1st item
-odd[0]=1
-print(odd)
-#change range of elements (2nd to 4th items)
-odd[1:4]=[3,5,7]
-print(odd)
-Add elements in a list
-----------------------
-To add a single item in a list we use append() method..
-To add multiple items in a list we use extend() method...
-Example
--------
-odd=[1,3,5]
-odd.append(2)
-print(odd)
-odd.extend([9,11,13])
-print(odd)
-using + and * operators
-------------------------
-we can also use + operator to combine two lists..This is called
-concatenation..
-If you need to repeat items of a list we use * operator
-Example
---------
-odd=[1,3,5]
-print(odd+[7,9,11])
-print(['a','b']*3)
-insert()
----------
-odd=[1,5]
-odd.insert(1,3)
-print(odd)
-Delete items from a list
-------------------------
-we can delete one or more items from a list using the keyword del...
-It can even delete the entire list...
-Example
---------
-my_list=[1,2,3,4,5,6]
-del my_list[2]
-print(my_list)
-del my_list[1:5]
-print(my_list)
-del my_list
-print(my_list)
-List copy
----------
-you can use = operator to copy from one list to another...
-Example
--------
-list1=[1,2,3]
-list2=list1
-print(list2)
-Loop through a list
--------------------
-for loop..
-for fruit in ['apple','banana','mango']:
-print("I like",fruit)
-Nested lists
-------------
-A list can have another list in it...
-Example
----------
-my_list=[1,2,[3,4,5]]
-print(my_list[0])
-print(my_list[2][0])
-print(my_list[2][1])
-print(my_list[2])
-Tuples
--------
-A tuple is similar to a list...
-The difference between the two is that we cannot change the elements of a
-tuple once it is assigned.. but in list elements can be changed..
-A tuple is created by placing all elements inside parantheses ()...
-A tuple can have any number of items and they can be different data
-types...
-Example
--------
-my_tuple=() #empty tuple
-my_tuple=(1,2,3,4) #tuple having integers
-my_tuple=(1,"hello",3.4) #mixed datatypes
-my_tuple=('cat',[8,4],(1,2,3)) #nested tuple
-..We can create a list in a tuple too...
-my_tuple=3,4.6,'dog'
-print(my_tuple)
-...Better use parantheses when you practice tuple...
-Creating Tuples with one item
------------------------------
-t1=("hello")
-print(type(t1))
-t2=("hello",)
-print(type(t2))
-t3="hello",
-print(type(t2))
-..Having one item within parantheses is not enough..
-We will need a trailing comma to indicate that it is a tuple...
-Accessing Tuple Elements
--------------------------
-Similar to lists, we use the index operator [] to access tuple elements..
-Example
--------
-my_tuple=('a','b','c','d')
-we can access the first item with my_tuple[0] and second element
-my_tuple[1] and so on...
-my_tuple=('a','b','c','d')
-print(my_tuple[0])
-print(my_tuple[1])
-Negative indexing
------------------
-python allows negative indexing for its sequences...
-The index -1 refers to the last item -2 the second last item and so on..
-Example
---------
-my_tuple=('a','b','c','d')
-print(my_tuple[-1])
-print(my_tuple[-2])
-Slicing
--------
-We will learn how to access a range of items.. This is done by using the
-slicing operator (:)
-Example
--------
-my_tuple=('p','y','t','h','o','n')
-#elements from 2nd to 4th
-print(my_tuple[1:4])
-#elements from begining to 2nd
-print(my_tuple[:-4])
-#elements 6th to end
-print(my_tuple[5:])
-#elements from begining to end
-print(my_tuple[:])
-Changing Tuple elements
-------------------------
-tuples are immutable..
-this means that elements cannot be changed once it has been assigned...
-Example
--------
-my_tuple=(1,2,3)
-my_tuple[0]=0
-output
--------
-Traceback (most recent call last):
-File "<string>", line 4, in <module>
-TypeError: 'tuple' object does not support item assignment
-using + and * operators
-------------------------
-we can use + operator to combine two tuples.. This is called
-concatenation...
-If you need to repeat items of a tuple we can use * operator..
-Example
---------
-odd=(1,3,5)
-print(odd+(7,9,11))
-letters=('a','b')
-print(letters*3)
-Deleting a tuple
-----------------
-we cannot delete items of a tuple..
-Example
--------
-my_tuple=(1,2,3)
-del my_tuple[0]
-output
--------
-Traceback (most recent call last):
-File "<string>", line 5, in <module>
-TypeError: 'tuple' object doesn't support item deletion
-other tuple operators
-----------------------
-we can check whether an item exists in a tupe or not using in keyword..
-Example
--------
-my_tuple=('a','p','p','l','e')
-print('a' in my_tuple)
-print('b' in my_tuple)
-Iterating through a tuple
--------------------------
-for loop is used to iterate each item in a tuple...
-Example
----------
-for name in ('divya','sindhu','mounika'):
-print("Hello",name)
-Python Strings
----------------
-A string is a sequence of characters..
-Computers donot allow characters they deal only with numbers(binary)...
-Internally it is stored and manipulated at a combination of 0's and 1's..
-The conversion of character to a number is called encoding and the
-reverse process is decoding...
-How to create strings
-----------------------
-Strings can be created by enclosing characters inside a single quotes or
-double quotes..
-Triple quotes can be used in python for multiline strings...
-Example
---------
-my_string='hello'
-print(my_string)
-my_string="Hello"
-print(my_string)
-my_string='''Hello'''
-print(my_string)
-my_string="""Hello,welcome to python
-world, where we discuss"""
-print(my_string)
-Access characters in a string
---------------------------------
-Similar to lists and tuples we can access characters in a string by using
-the index operator[]..
-Example
--------
-my_string='hello'
-print(my_string[0])
-print(my_string[1])
-Indexing starts with 0 not 1...
-Negative indexing
------------------
-The index of the last character is -1 and second last character is -2 and
-so on.....
-Example
--------
-my_string='python'
-print(my_string[-1])
-print(my_string[-2])
-Slicing a string
-------------------
-we can access a range of characters in a string using slicing operator
-(:)
-Example
--------
-my_string='python'
-#2nd to 4th characters
-print(my_string[1:4])
-#begining to 4th character
-print(my_string[0:4])
-#begining to 4th character
-print(my_string[:4])
-Deleting a string
------------------
-Strings are immutable...
-Its not possible to change or delete characters of a string...
-Example
----------
-my_string='python'
-del my_string[0]
-output
-------
-Traceback (most recent call last):
-File "<string>", line 5, in <module>
-TypeError: 'str' object doesn't support item deletion
-Python string operations
--------------------------
-Concatenation of two strings
------------------------------
-we use + operator to combine or concatenate two strings..
-Example
---------
-first_name='ramya'
-second_name='sri'
-name=first_name+ ' '+second_name
-print(name)
-Repeat two strings
-------------------
-we cab repeat a string using * operator..
-Example
--------
-my_string='hello'
-print(my_string*3)
-Iterating through a string
---------------------------
-we can iterate through a sequence using for loop..
-Example
--------
-write a program to count the number of 'l' in a string..
-count=0
-for letter in 'Hello world':
-if(letter=='l'):
-count+=1
-print(count,"letters found)
-Check whether substring exists
--------------------------------
-in keyword
-Example
--------
-result='a' in 'Hello'
-print(result)
-result='o' in 'hello'
-print(result)
-Escape sequence
----------------
-He said, " what's there ?" ---Syntax error...
-Example
--------
-print('''He said,"what's there?"''')
-Python sets
--------------
-A set is a unordered collection of items..
-Every element is unique (no duplicates)...
-Creating sets
--------------
-A set is created by placing all the items inside curly braces {} and
-seperated by commas..
-Example
----------
-my_set={1,2,3}
-print(my_set)
-#set of mixed datatypes
-my_set={1,2,"hello",3.4,(1,2,3)}
-print(my_set)
-Let's try to create a set with duplicate elements..
-Example
--------
-my_set={1,2,1,3,1,4,2,3}
-print(my_set)
-Add and update sets
---------------------
-sets are mutable..
-But since they are unordered , indexing has no meaning...
-we cannot access or change elements of a set using indexing or slicing..
-set doesnot support it
-we can add single element using add() method and multiple elements using
-update() method..
-The update() method can take tuples,lists,strings or other sets as its
-arguments..
-Example
--------
-my_set={1,3}
-print(my_set)
-my_set.add(2)
-print(my_set)
-my_set.update([4,5,6])
-print(my_set)
-Removing elements from a set
------------------------------
-To remove elements from a set we can either use remove() or discard()
-methods..
-The only difference between the two is that , discard(), if the item is
-not exists in the set it remains unchanged..
-But remove() will raise an error ..
-Example
--------
-my_set={1,2,3,4,5,6}
-my_set.discard(4)
-print(my_set)
-my_set.discard(7)
-print(my_set)
-my_set.remove(7)
-print(my_set) #Error :keyerror
-Set methods : pop() and clear()
--------------------------------
-The pop() method removes a random element from a set and returns it..
-Example
--------
-my_set={1,2,3,4,5,6}
-result=my_set.pop()
-print(my_set)
-print(result)
-The clear() removes all elements from a set
-Example
---------
-my_set={1,2,3,4,5,6}
-my_set.clear()
-print(my_set)
-python set operations
-----------------------
-union, intersection, difference and symmetric..
-Set union
----------
-The union of two sets A and B is a set of all elements from both sets..
-It is performed using | operator..
-same can be performed by using union() method..
-Example
---------
-A={1,2,3}
-B={3,4,5,6}
-result=A|B
-print(result)
-result=B.union(A)
-print(result)
-Set Intersection
-----------------
-The intersection of two sets A and B is a set of all elements that are
-common in both sets..
-It is performed using & operator..
-Same can be performend by using intersection()..
-Example
----------
-A={1,2,3}
-B={2,3,4,5,6}
-result=A&B
-print(result)
-result=B.intersection(A)
-print(result)
-Set Difference
---------------
-The difference of set B from A is a set of elements that are only in A
-but not in B..
-It is performed by using A-B ..
-Same can be performed by using difference()..
-Example
--------
-A={1,2,3}
-B={2,3,4,5,6}
-result=A-B
-print(result)
-result=B-A
-print(result)
-result=A.difference(B)
-print(result)
-Set Symmetric Difference
--------------------------
-The symmetric difference between two sets A and B is a set of elements in
-both A and B except those are common in both..
-It is perfromed using ^ operator ... (caret)
-Same can be performed by using symmetric_difference()
-Example
---------
-A={1,2,3}
-B={2,3,4,5,6}
-result=A^B
-print(result)
-result=A.symmetric_difference(B)
-print(result)
-Iterating through a set
-------------------------
-for loop...
-Example
---------
-for letter in set('apple'):
-print(letter)
-Check if an element exists
---------------------------
-in keyword..
-Example
--------
-my_set=set("apple")
-print('a' in my_set)
-print('w' in my_set)
-Python Dictionary
------------------
-A dictionary is a unordered collection of items ...
-key:value pairs..
-How to create a dictionary
-----------------------------
-A dictionary is as simple as placing items inside curly braces {},
-seperated by commas..
-A item in a dictionary has a key and the corresponding value expressed as
-a pair.. key:value
-While values can be of any data type and can repeat, keys must be
-unique..
-Example
--------
-#empty dictionary
-my_dict={}
-#dictionary with integer keys
-my_dict={1:'apple',2:'ball'}
-#dictionary with mixed keys
-my_dict={name:'divya',1:[22,3,4]}
-Creating Dictionaries using dict()
-----------------------------------
-A dictionary can also be created using dict()
-Example
--------
-my_dict=dict({1:'apple',2:'ball})
-#creating dictionary from a sequence
-my_dict=dict([(1,'apple'),(2,'ball')])
-print(my_dict)
-Access Dictionary Elements
----------------------------
-A dictionary has a key:value pairs as elemenents..
-To access the value of an element we use its key...
-Example
---------
-person={'name':'sindhu','age':26}
-person_name=person['name']
-print(person_name)
-person_age=person['age']
-print(person_age)
-Access value using get()
-------------------------
-We can also access the value of an element using the get() method..
-Example
--------
-person={'name':'sindhu','age':26}
-person_name=person.get('name')
-print(person_name)
-person_age=person.get('age')
-print(person_age)
-Change and add dictionary elements
-----------------------------------
-Dictionary is mutable..
-we can add items or change the value of existing items using =
-operators..
-Add Element to a dictionary
----------------------------
-person={'name':'sindhu','age':26}
-#adding element
-person['city']='hyderabad'
-print(person)
-update element to a dictionary
-------------------------------
-we can update an element in similar way to how we add an element
-Example
--------
-person={'name':'sindhu','age':26}
-#updating age
-person['age']=19
-print(person)
-Remove Dictionary Item
-----------------------
-To remove a single item from a dictionary we can use pop() method..
-The method removes an item with the provided key and retuurns the value..
-Example
--------
-person={'name':'ramya','age':25}
-#removing elements using pop()
-result=person.pop('age')
-print('value removed',result)
-print('updated dictionary',person)
-use of del in a dictionary
-----------------------------
-The del keyword can be used to delete an individual items..
-It can be also used to delete entire dictionary..
-Example
--------
-person={'name':'ramya','age':25}
-#deleting items using del keyword
-del person['age']
-print(person)
-#delete entire dictionary
-del person
-print(person)
-Iterating thorugh a dictionary
-------------------------------
-for loop...
-Example
--------
-squares={1:1,2:4,3:9,4:16}
-for i in squares:
-print(squares[i])
-check if a key exists
------------------------
-in keyword
-Example
--------
-squares={1:1,2:4,3:9,4:16}
-print(1 in squares)
-print(5 in squares)
-print(4 in squares)
-# write a porgram to caluclate number of characters in a string..
-string="Python programming language"
-count=0
-for i in range(0,len(string)):
-if(string[i]!=''):
-count=count+1
-print("Total number of characters in a string:"+str(count))
-# write a program to count the frequency of each character in the
-string...
-Create an empty dictionary to store the character as key and frequency of
-character as value..
-d=dict()
-Loop over the string to get one character at a time..
-for i in string:
-use get() the function checks the character is present in the dictionary,
-if present it returns the value of character then add one to it..
-If the character is not present then the get() function returns 0, that
-is second parameter add 1 to it and put the character into the
-dictionary...
-d[i]=d.get(i,0)+1
-Finally print the dictionary with characters as keys and values....
-print(d)
-string=input("Enter the string:")
-d=dict()
-for i in string:
-d[i]=d.get(i,0)+1
-print(d)
-output
-------
-Enter the string:python programming langugae
-{'p': 2, 'y': 1, 't': 1, 'h': 1, 'o': 2, 'n': 3, ' ': 2, 'r': 2, 'g': 4,
-'a': 3, 'm': 2, 'i': 1, 'l': 1, 'u': 1, 'e': 1}
-Assignment
-----------
-# write a python program to count the frequency of each character in the
-string using "in" operator..
-What is the correct python file extension ?
-.py
-In the following code n is assigned a/an---- value?
-n='5'
-.. string.. quotes
-what will be the output of the following code?
-a=3.44
-b=3
-result=a+b
-print(result)
-print(type(result))
-... float value .... 6.44
-What is the output of the following code?
-str='abc'
-print(str*3)
-...abcabcabc
-what is the output of the following code?
-str1='4'
-str2='3'
-result=str2+str1
-print(result)
-..34
-What is the output of the following code?
-my_range=range(1,5)
-a=0
-for val in my_range:
-a=a+1
-print(a)
-..4
-Modules and files
-------------------
-Python Modules
---------------
-Modules refers to a file containing python statements and definitions..
-we use modules to break down large program into small and manageable and
-organized files..
-modules provide reusability of code..
-we can define our most used functions in a module and import it...
-instead of copying their definitions into different programs..
-Create and import module
-------------------------
-To create a module , write python code in a file and save .py extension..
-Let's create a file named example.py and save the following code..
-def add(a,b):
-"""This program adds two
-numbers"""
-result=a+b
-return result
-Import module
---------------
-To use this module, we need to import it...
-Let's create a new file main.py and import the example module..
-import example
-output=example.add(20,30)
-Python standard modules
------------------------
-math is one of the standard modules..
-Built in method : dir()
------------------------
-we can use dir() function to find out the list of valid attributes
-defined inside module..
-Example
--------
-import math
-print(dir(math))
-output
-------
-['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos',
-'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb',
-'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp',
-'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma',
-'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt',
-'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan',
-'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh',
-'sqrt', 'tan', 'tanh', 'tau', 'trunc']
-Example:math module
---------------------
-import math
-x=2.25
-y=3
-#square root of x
-result=math.sqrt(x)
-print(result)
-#x is raised to the power of y
-result=math.pow(x,y)
-print(result)
-#value of pi
-print(math.pi)
-#value of e
-print(math.e)
-Import with renaming
---------------------
-we can rename the module during import..
-Example
---------
-import math as m
-print("The value of pi is",m.pi)
-from..import statement
-----------------------
-we can import specific names from a module without importing the module
-as a whole...
-Example
--------
-from math import pi,e
-print(pi)
-print(e)
-Python files
--------------
-A file is a named location on disk to store related information..
-It is used to permanently store data in memory...
-when we want to read from or write to a file we need to open file first..
-when we are done it need to be closed,...
-1..open a file
-2..Read or write (perform operations)
-3..close file
-How to open a file
-------------------
-Python has a built in function open() to open afile..
-Example
--------
-f=open("test.txt") #open a file in current directory
-f=open("C:\Users\Ramyasri.X.Kapalavai\OneDrive - Quest
-Diagnostics\Desktop\Ramya\pythonclass.txt") #specifying full path
-Specifying mode during file open()
-----------------------------------
-We can use modes while opening a file...
-'r' -- open a file for reading
-'w' -- open a file for writing.. create a new file if it does not
-exist..
-'a' -- open a file for appending at the end of the file.. creates a new
-file if it does not exist..
-'x' --- open a file for exclusive creation..if the file already exists,
-the operation fails..
-'t' -- open a file in text mode..(default)
-'b' -- open a file in binary mode, used for images and binary files..
-'+' -- open a file for updtaing (reading and writing)...
-Example
---------
-f=open("python class.txt") #equivalent to 'r' or 'rt'
-f=open("python class.txt",'w') #write in text mode
-f=open("img.png",'r+b') # read and write in binary mode..
-specifying Encoding type in open()
-----------------------------------
-When working with files in text mode, it is highly recommended to use
-encoding type..
-f=open("python class.txt", mode='r', encoding='utf-8')
-..in windows it is 'cp1252' but in linux it is 'utf-8'...
-Close a file
--------------
-when we complete our file operations to the file we need to close the
-file properly..
-closing a file will free up the resources that were tied in the file
-using python close() method..
-Example
---------
-f=open("python class.txt")
-#perform file operations
-f.close()
-try..finally
-------------
-try:
-f=open("python class.txt")
-#perform file operations
-finally:
-f.close()
-How to write a file
----------------------
-In order to write into a file in python we need to open a file it in 'w',
-append 'a'..
-writing a string or sequence of bytes is done using write()...
-Example
--------
-f=open("python class.txt",'w')
-f.write("my first file\n")
-f.write("This file\n")
-f.write("contains python class\n")
-f.close()
-output
--------
-my first file
-This file
-contains python class
-How to read files
------------------
-To read a file in python we must open the file in reading mode..
-There are various methods available for this purpose..
-we use read(size) method to read the size of the parameter of data...
-Example
--------
-f=open("python class.txt",'r')
-#read the first 4 data
-print(f.read(4))
-output
-------
-my f
-#read the next 4 data
-print(f.read(4)
-irst..
-#read the rest and till end of file
-print(f.read())
-This file
-contains python class..
-'\n' -- returns a newline..
-seek() and tell() methods
---------------------------
-we can change our current file cursor (position) using seek() method..
-similarly tell() method returns the current position of cursor..
-Example
---------
-f=open("python class.txt",'r')
-#read in the rest ad till end of file
-f.read()
-#get the current file cursor
-print(f.tell())
-#bring file cursor to initial position
-f.seek(0)..
-Read file line by line
-----------------------
-we can read a file line-by-line using for loop..
-This is both efficient and fast..
-Example
--------
-f=open("python class.txt",'r')
-for line in f:
-print(line)
-readline() method..
--------------------
-we can use the readline() method to read individual lines of a file..
-This method reads a file till the newline..
-Example
--------
-file.py
-f=open("C:\Users\Ramyasri.X.Kapalavai\OneDrive - Quest
-Diagnostics\Desktop\Ramya\python class.txt",'r')
-print(f.readline()) #my first file
-print(f.readline()) #This file
-Python directory
-----------------
-A directory or folder is a collection of files and subdirectories..
-If there are large number of files to handle in your python progaram you
-can arrange the code with different directories to make things more
-manageable..
-python has the 'os' module which provides us with many useful methods to
-work with directories..
-Get current directory
----------------------
-present working directory -- getcwd() method defined in the os module..
-import os
-current_directory=os.getcwd()
-print(current_directory)
-List of directories and files
-------------------------------
-All files and subdirectories inside a directory can be known using
-listdir() method..
-Example
--------
-import os
-folder_path='C:\Users\Ramyasri.X.Kapalavai\OneDrive - Quest
-Diagnostics\Desktop\Ramya'
-result=os.listdir(folder_path)
-print(result)
-Create a new directory
-----------------------
-we can make a new directory using mkdir() method..
-Example
--------
-import os
-os.mkdir('test')
-Renaming a directory
---------------------
-Rename() method can be used to rename a directory or file..
-Example
--------
-import os
-os.rename('test','test1')
-Moving files/directories
---------------------------
-if we want to move files/directories from one place to another we use
-rename() method..
-Example
--------
-import os
-os.rename('test','Documents')
-Removing directory or files
----------------------------
-A file can be removed using remove() method...
-Similarly rmdir() method removes and empty directory...
-Example
--------
-import os
-os.listdir()
-['test','python.txt']
-os.remove('python.txt')
-os.listdir()
-['test']
-os.rmdir('test')
-os.listdir()
-[]
-Exception Handling
--------------------
-Python Exceptions
--------------------
-Errors occur at runtime(syntax errors,name error, indentation error,type
-error)... These errors are known as exceptions...
-Built-in exceptions
--------------------
-When a file we try to open does not exist FileNotFoundError..
-Dividing a number with zero , ZeroDivisionError
-Module try to import is not found ImportError..
-Assignment
------------
-python.org -- website
-built-in exceptions page ----
-Interview questions
----------------------
-1.. Introduction of python..
-2..what is python ? what are the benefits of using python?
-3..what is a dynamically typed language ?
-4..what is a interpreted language ?
-5..what is scope in python ?
-6..what are lists and tuples ? what is the key difference between these
-two ?
-7..what are common-built in data types in python ?
-8..what is slicing in python ?
-9..what are modules in python?
-10..what are global,protected,private attributes in python ?
-11.what is the use of self in python?
-12..what is __int__() ?
-13..what is break, continue and pass in python ?
-14.. How is memory managed in python ?
-15..what is an exception?
-16..why we use raise keyword?
-17..what is try clause and except clause.. when to use?
-18..What is custom exceptions?
-19..when we use try..finally clause?
-Python Exception Handling
--------------------------
-When the exception occurs it causes the current process to stop and
-passes it to the calling function until it is handled..
-Catching Exceptions
---------------------
-In python exceptions can be handled using a try statement..
-An operation which can raise an exception placed inside a try clause and
-the code get handled the exception is written using except clauses..
-Example
--------
-def findReciprocal(value):
-try:
-print("value:",value)
-r=1/value
-print("The reciprocal of value is",r)
-except:
-print("You cannot find reciprocal of",value)
-findReciprocal("Hello")
-findReciprocal(2)
-Catching specific exceptions
-------------------------------
-def findReciprocal(value):
-try:
-print("value:",value)
-r=1/value
-print("The reciprocal of value is",r)
-except ValueError:
-print("You got value error")
-except ZeroDivisionError:
-print("You got a zero division error")
-except:
-print("Haandling all errors")
-findReciprocal("Hello")
-findReciprocal(2)
-findReciprocal(0)
-Raising exceptions
-------------------
-raise keyword --- we can forcefully raise some errors/exceptions..
-Raise --- optional..
-Example
-----------
-a=int(input("Enter a positive integer:"))
-try:
-if a<=0:
-raise ValueError("Not a positive number")
-print("You entered",a)
-except ValueError as ve:
-print(ve)
-try..finally
-------------
-finally -- optional
-try..finally uses mainly in file operations..
-Example
--------
-try:
-f=open("test.txt","r")
-#perform file operations
-finally:
-f.close()
-Custom/userdefined Exceptions
--------------------------------
-users can define such exceptions by creating a new class..
-Example
--------
-class Error(Exception):
-"""Base class for other
-exceptions"""
-pass
-class ValueTooSmallError(Error):
-"""Raise when the input value is too
-small"""
-pass
-class ValueTooLargeError(Error):
-"""Raise when the input value is too
-large"""
-pass
-Assignment coding questions
----------------------------
-1). Write a program to reverse an integer in Python
-2). Write a program in Python to check whether an integer is Armstrong
-number or not.
-3). Write a program in Python to check given number is prime or not.
-4). Write a program in Python to print the Fibonacci series using
-iterative method.
-5). Write a program in Python to print the fibonacci series using
-recursive method.
-6). Write a program in Python to check whether a number is palindrome or
-not using iterative method.
-7). Write a program in Python to check whether a number is palindrom or
-not using recursive method.
-8). Write a program in Python to find greatest among three integers.
-9). Write a program in Python to check if a number is binary?
-10). Write a program in Python to find sum of digits of a number using
-recursion?
-11). Write a program in Python to swap two numbers without using third
-variable?
-12). Write a program in Python to swap two numbers using third variable?
-13). Write a program in Python to find prime factors of a given integer.
-14). Write a program in Python to add two integer without using
-arithmetic operator?
-def add(a,b):
-#iterating till there is no sum
-while(b!=0)
-#set of bits a and b
-sum=a&b
-#sum of bits of a and b where at least one of the bits is not set
-a=a^b
-#adding bits given to the required sum
-b=sum<<1
-return a
-print(add(15,32))
-..def add(a,b)
-for i in range(1,b+1):
-a=a+1
-a=add(10,32)
-print(a)
-..def add(a,b):
-if(b==0):
-return a
-else:
-return add(a^b,(a&b)<<1)
-15). Write a program in Python to find given number is perfect or not?
-16). Python Program to find the Average of numbers with explanations.
-17). Python Program to calculate factorial using iterative method.
-18). Python Program to calculate factorial using recursion.
-19). Python Program to check a given number is even or odd.
-20). Python program to print first n Prime Number with explanation.
-21). Python Program to print Prime Number in a given range
-22). Python Program to find Smallest number among three.
-Object - Oriented programming
-------------------------------
-Class and Objects
------------------
-Python is an object oriented programming..
-Procedural language, functional language, object oriented programming..
-.... object is a simply collection of data(variables or methods or
-functions)...
-...Class --- blueprint of object..
-...class house
-contains doors,floors,windows etc..
-An object is also called an instance of class and the process of creating
-object is called instaniation..
-How to defined a class
------------------------
-class --- keyword
-class My NewClass:
-#methods and attributes
-pass
-Creating an object
--------------------
-To access the attributes of a class we use objects instantiated it..
-Example
---------
-class MyClass:
-a=10
-def func(self):
-return "hello"
-#instantiate an object
-obj=MyClass()
-print(obj.a)
-print(obj.func())
-Creating Multiple objects
--------------------------
-class MyClass:
-a=10
-def func(self):
-return "hello"
-obj1=MyClass()
-obj2=MyClass()
-print(obj1.a)
-print(obj1.a)
-obj1.a=11
-obj2.a=1000
-print(obj1.a)
-print(obj2.a)
-Class objects
--------------
-when we define a class in python an object of the same class name is
-automatically created..
-Example
--------
-class MyClass:
-a=10
-def func(self):
-return "hello"
-print(MyClass.a)
-Example
--------
-class Number:
-def add(self,a,b):
-return a+b
-def multiply(self,a,b):
-return a*b
-#instantiate an object
-n1=Number()
-sum=n1.add(2,3)
-print(sum)
-product=n1.multiply(2,5)
-print(product)
-Assignment
-----------
-..what is the use of self parameter?
-The self parameter is a reference to the current instance of the class,
-and it is used to access variables, methods that belongs to the class..
-class MyClass:
-def __init__(abc,name,age):
-abc.name=name
-abc.age=age
-def func(MyObject):
-print("Hello my is "+MyObject.name)
-obj=MyClass("Sindhu",25)
-obj.func()
-Constructors
--------------
-__init__() function .... also called as constructor..
-__ ---- class functions that begin with double underscore are called
-special functions..
-Example
--------
-class MyClass:
-def __init__(self,p1=0,p2=0):
-self.a=p1
-self.b=p2
-obj=MyClass(2,3)
-print(obj.a,obj.b)
-obj1=MyClass()
-print(obj1.a,obj1.b)
-Assignment
-----------
-Write a program to find distance from origin..
-class Point(object):
-def __init__(self,x=0,y=0):
-self.x=x
-self.y=y
-def distance(self):
-return(self.x**2+self.y**2)**0.5
-p1=Point(6,8)
-distance=p1.distance()
-print(distance)
-Deleting Attributes of an object
---------------------------------
-you can delete attributes of an object using del statement...
-Example
--------
-class Point(object):
-def __init__(self,x=0,y=0):
-self.x=x
-self.y=y
-p1=Point(6,8)
-print(p1.x,p1.y)
-#deleting attribute y..
-del p1.y
-print(p1.x)
-print(p1.y)
-If we want to access deleted attribute will face AttributeError..
-Deleting objects
-----------------
-You can also delete the objects itself using del statement..
-Example
---------
-class Point(object):
-def __init__(self,x=0,y=0):
-self.x=x
-self.y=y
-p1=Point(6,8)
-print(p1)
-del p1
-print(p1)
-If we want to access deleted object will face NameError..
-Python Inheritence
-------------------
-Inheritence is a powerful feature in object oriented programming
-language..
-It referes to defining a new class with little or no modification to an
-existing class..
-The new class is derived class(child class) and the one from which it
-inherits is called base class(parent class)
-Grandfather(parent class)
-....
-Father... (Derived class)
-....
-you ... (Derived class)
-Syntax
-------
-class BaseClass:
-#Body of the baseclass
-class DerivedClass(BaseClass):
-#Body of the derived class
-Why inheritence?
------------------
-class Polygon:
-def __init__(self,no_of_sides):
-self.n=no_of_sides
-self.sides=[]
-for i in range(no_of_sides):
-self.sides.append(0)
-def input_sides(self):
-for i in range(self.n):
-self.sides[i]=float(input("Enter side"+str(i+1)+":"))
-#inheriting Triangle from polygon class
-class Triangle(Polygon):
-def __init__(self):
-Polygon.__init__(self,3)
-def find_area(self):
-a,b,c=self.sides
-#caluclate the semi-perimeter
-s=(a+b+c)/2
-area=(s*(s-a)*(s-b)*(s-c))**0.5
-print("The area of the triangle is",area)
-t=Triangle()
-t.input_sides()
-t.find_area()
-Method overriding and method overloading
-----------------------------------------
-Method overloading is an example of compile time polymorphism..
-In this more than one method of the same class shares the same method
-name having different signatures..
-Method overloading is used to add more of the method behaviours and there
-is no need of more than one class for method overloading..
-Example
--------
-# Online Python compiler (interpreter) to run Python online.
-# Write Python 3 code in this online editor and run it.
-# Function to take multiple arguments
-def add(datatype,*args):
-#if datatype is int
-#intialize with 0
-if datatype=='int':
-answer=0
-#if datatype is string
-#intaialize with ''
-if datatype=='str':
-answer=''
-#Traverse trhough the arguments
-for x in args:
-#This will do addition if the arguments are int..
-#This will do concatenation if the arguments are str
-answer=answer+x
-print(answer)
-#integer
-add('int',5,6)
-#string
-add('str','Hi','Python')
-Assignment
-----------
-write an example for method overloading by using class...
-Method overriding
------------------
-Method overriding is an example of runtime polymorphism..
-In this the specific implementation of the method that is already
-provided by parent class is provided by the child class..
-It is used to change the behaviour of existing methods and there is need
-for at least two classes for method overriding..
-Inheritence always required as it done between parent class and child
-class..
-Example
--------
-class A:
-def func1(self):
-print('feature1 of class A')
-def func2(self):
-print('feature2 of class A')
-class B(A):
-#Modified function that is already exists in class A
-def func1(self):
-print('Modified feature-1 of class A by class B')
-def func3(self):
-print('feature-3 of class B')
-#create instance
-obj=B()
-#call the override function
-obj.func1()
-Assignment
-----------
-what are the differences between method overloading and method
-overriding..
-isinstance() and issubclass()
------------------------------
-Two built-in functions..
-isinstance()---function returns True if the object is an instance of
-class..
-issubclass() -- used to check class inheritence..
-Example
--------
-class polygon:
-pass
-class Triangle(polygon):
-pass
-t=Triangle()
-print(isinstance(t,Triangle))
-print(isinstance(t,polygon))
-print(isinstance(t,int))
-print(isinstance(t,object))
-print(issubclass(polygon,Triangle))
-print(issubclass(Triangle,polygon))
-
-
-
-Polymorphism
---------------
-The word polymorphism means having many forms..
-In programming, polymorphism means the same function name but with
-different signatures being used for different types..
-Example
----------
-#polymorphism with inheritence
-class Bird:
-def intro(self):
-print("There are many types of birds")
-def fly(self):
-print("Most of the birds can fly but some cannot")
-class sparrow(Bird):
-def fly(self):
-print("sparrows can fly")
-class ostrich(Bird):
-def fly(self):
-print("ostriches cannot fly")
-obj_bird=Bird()
-obj_spr=sparrow()
-obj_ost=ostrich()
-obj_bird.intro()
-obj_bird.fly()
-obj_spr.intro()
-obj_spr.fly()
-obj_ost.intro()
-obj_ost.fly()
-#polymorphism example
-class India():
-def capital(self):
-print("New Delhi is the capital of India")
-def language(self):
-print("Hindi is the most spoken language of india")
-def type(self):
-print("Inida is a developing country")
-class USA():
-def capital(self):
-print("washington DC is the capital of US")
-def language(self):
-print("English is the most spoken language")
-def type(self):
-print("USA is developed country")
-obj_ind=India()
-obj_usa=USA()
-for country in(obj_ind,obj_usa):
-country.capital()
-country.language()
-country.type()
-Encapsulation
--------------
-
-
-
-
-Encapsulation in python describes the concept of building data and
-methods within a single unit..
-when you create a class it means you are implementing encapsulation..
-Example
--------
-class Employee:
-#constructor
-def __init__(self,name,salary,project):
-#data memebers
-self.name=name
-self.salary=salary
-self.project=project
-#method
-#to display employee details
-def show(self):
-print("Name: ",self.name,"salary: ",self.salary)
-def work(self):
-print(self.name,'is working on',self.project)
-emp=Employee('rama',10000,'NLP')
-emp.show()
-emp.work()
-..using encapsulation we can hide an objects internal representation from
-the outside..
-This is called data hiding/Information hiding..
-Also encapsulation allows us to restrict accessing variables and methods
-directly to prevent from data modification by creating private data
-members and methods in a class...
-Access modifiers in python
-Encapsulation can be achieved by declaring the datamembers and methods of
-a class either as private or protected..
-But in python we dont have access for modifiers like public,private and
-protected..
-we can use single underscore and double underscores..
-public member : Accessible anywhere from outside class..
-All member variables of the class are by default public..
-
-
-Example
---------
-class Employee:
-#constructor
-def __init__(self,name,salary):
-#data memebers
-self.name=name
-self.salary=salary
-#method
-#to display employee details
-def show(self):
-print("Name: ",self.name,"salary: ",self.salary)
-emp=Employee('rama',10000)
-emp.show()
-private member : Accessible within class..
-to define a private member we have to add two underscores as a prefix at
-the start of the variable names..
-Example
---------
-class Employee:
-#constructor
-def __init__(self,name,salary):
-#public data memeber
-self.name=name
-#private data member
-self.__salary=salary
-emp=Employee('rama',10000)
-print('salary:',emp.__salary)
-In the above example, the salary is a private variable..
-As we know we can't access private variable from the outside class..
-Instance method
----------------
-Accessing private members outisde a class using instance(public) method..
-Example
--------
-class Employee:
-#constructor
-def __init__(self,name,salary):
-#public data memeber
-self.name=name
-#private data member
-self.__salary=salary
-#public method
-def show(self):
-print("Name:",self.name,"salary:",self.__salary)
-emp=Employee('rama',10000)
-emp.show()
-protected member : Accessible within the class and its subclass..
-To define protected member prefix the member variable with a single
-underscore(_)
-protected data members are used when you implement inheitence and want to
-allow data members access to only child class...
-Example
---------
-class Company:
-def __init__(self):
-#protected member
-self._project='NLP'
-class Employee:
-#constructor
-def __init__(self,name):
-#public data memeber
-self.name=name
-Company.__init__(self)
-#public method
-def show(self):
-print("Employee name:",self.name)
-#accessing protected members
-print("working on project:",self._project)
-emp=Employee('rama')
-emp.show()
-print("project:",emp._project)
-Getters and setters in python
-------------------------------
-To implement proper encapsulation in python we use getter and setter
-methods..
-use the getter method to access data members and the setter methods to
-modify data members..
-when we want to avoid direct access to private members..
-To add validation logic for setting a value..
-Example
--------
-# Online Python compiler (interpreter) to run Python online.
-# Write Python 3 code in this online editor and run it.
-class Student:
-def __init__(self,name,age):
-self.name=name
-self.__age=age
-#getter method
-def get_age(self):
-return self.__age
-#setter method
-def set_age(self,age):
-self.__age=age
-stud=Student('rama',15)
-#retreiving age by using getter
-print("Name:",stud.name,stud.get_age())
-#changing age using setter
-stud.set_age(17)
-print("Name:",stud.name,stud.get_age())
-Namespaces
-----------
-Name(identifier)
-NAme is simply a name given to objects..
-Everything in python is an object..
-NAme is a way to underly the object..
-For example when we do the assignment a=2 here 2 is an object stored in
-memory and a is the name we assosciate with it...
-We can get the address in RAM of some object through built in function
-id()
-Example
-------
-a=2
-print('id(2)=',id(2))
-print('id(a)=',id(a))
-Namespace
----------
-A namespace is a collection of names..
-A namespace containing all built-in names is created when we start the
-python intreprter and exists as long as we don't exists..
-This is the reason that built-in namespaces like
-id(),int(),print(),input()...etc are always available to us from any part
-of the program..
-Each module creates its own global namespaces...
-Assignment
------------
-what is a local namespace, global namespace and built-in namespaces..
-Advanced Python
-----------------
-Iterators
----------
-Iterators are everywhere in python...
-For example when we implement for loops ...
-Iterator in python is simply an object that can be iterated upon..
-An object which will return data one element at a time....
-special methods : __iter__() and __next__()
-The iter() function which in turn calls __iter__() methods returns an
-itertor from them...
-Iterating through a iterator
-----------------------------
-we can use next() function to manually iterate through all the items of
-an iterator...
-when we reach at the end of the iteration there is no more data to be
-returned, it will raise StopIteration..
-Example
--------
-my_list=[4,7,0]
-#get an iterator using iter()
-my_iter=iter(my_list)
-print(next(my_iter))
-print(next(my_iter))
-print(my_iter.__next__())
-print(next(my_iter))
-Assignment
-----------
-Write a program using iterators....
-Infinite iterators
-------------------
-Example
--------
-# Online Python compiler (interpreter) to run Python online.
-# Write Python 3 code in this online editor and run it.
-class InfIter:
-"""Infinite iterator to return
-all
-odd numbers"""
-def __iter__(self):
-self.num=1
-return self
-def __next__(self):
-num=self.num
-self.num+=2
-return num
-i=InfIter()
-a=iter(i)
-print(next(a))
-print(next(a))
-print(next(a))
-print(next(a))
-# so on
-Generators
------------
-Python generators are a simple way of creating iterators..
-A generator is a function that returns an object which can iterate
-over..(one value at a time)
-How to create a generator
--------------------------
-If a function contains one yield statement , it may contain other yield
-or return statements...it becomes a generator function..
-Both yiled and return wil return some value from a function...
-The difference is that while a return statement terminates a function
-entirely, yield statement pauses the function saving all its states and
-later continues from there on successive calls...
-..Generatorfunction contains one or more yield statements...
-..when called, it returns an object (itertor) but does not start
-execution immediately...
-..methods like __iter__() and __next__() are implemented automatically...
-so we can iterate through next()
-..Finally when the function terminates , StopIteration
-Example
---------
-def my_gen():
-n=1
-print("This is printed first")
-yield n
-n+=1
-print("This is printed second")
-yield n
-n+=1
-print("This is printed third")
-yield n
-a=my_gen()
-next(a)
-next(a)
-next(a)
-next(a)
-Using generators with for loop
------------------------------
-def my_gen():
-n=1
-print("This is printed first")
-yield n
-n+=1
-print("This is printed second")
-yield n
-n+=1
-print("This is printed third")
-yield n
-#using for loop
-for item in my_gen():
-print(item)
Index: python and Python_Interview_Questions/Lingababu_Interview_Quesitions.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python and Python_Interview_Questions/Lingababu_Interview_Quesitions.txt b/python and Python_Interview_Questions/Lingababu_Interview_Quesitions.txt
new file mode 100644
--- /dev/null	(date 1704560951814)
+++ b/python and Python_Interview_Questions/Lingababu_Interview_Quesitions.txt	(date 1704560951814)
@@ -0,0 +1,1678 @@
+#Decarator
+
+
+def decor(func):
+
+    def inner(name):
+
+        if name == "Lingababu":
+
+            print("Hi Good Morning",name)
+
+        else:
+            func(name)
+
+    return inner
+
+
+def wish (name):
+
+    print("Hi Good afternoon",name)
+
+wish("Lingababu")
+wish("Nagalakshmi")
+
+#-----------------------------------------------------------------------------------------
+#Dataclasess and its types
+'''Data clasess in python maily used for the no need to use the __init__ longer'''
+'''for this we need to import @dataclass decarator'''
+from dataclasses import dataclass
+@dataclass()
+class Person():
+    name: str
+    age: int
+    height: float
+    email: str
+
+joe = Person('Joe', 25, 1.85, 'joe@dataquest.io')
+
+joe.age = 35
+print(joe)
+
+#-------------------------------------------------------------------------------------------
+from dataclasses import dataclass
+@dataclass()
+class Person():
+    name: "Lingababu"
+    age: 31
+    height: 6.2
+    email: "lingababu555@gmail.com"
+
+joe = Person('Joe', 25, 1.85, 'joe@dataquest.io')
+
+joe.age = 35
+print(joe)
+
+#------------------------------------------------------------------------------------------
+from typing import Tuple
+
+@dataclass
+class Person():
+    name: str
+    age: int
+    height: float
+    email: str
+    house_coordinates: Tuple
+
+print(Person('Joe', 25, 1.85, 'joe@dataquest.io', (40.748441, -73.985664)))
+
+#----------------------------------------------------------------------------------------------
+#Multithreading and multiprocessing and its limitations
+
+#Multithreading points
+
+'''1)In Multiple threading having multiple threads assigned to single process
+
+2)they run concurrently and parrell to each other
+
+3)These threads share the same meomory space with in the Parent process because Increase the performance
+
+4)Mainly we are using this for I/O bounded applications
+
+5)Multithreading uses common address space for all threads
+
+6)Multithreading is quick and requires few resources
+
+7)A process is an independent instance executed in a processor core.
+
+8)threads do share the meomory space
+
+9)Threads are lighter and cause less overhead. Also, because they share the same memory inside a process, it is easier, faster, and safer to share data.
+
+10)Concurrent execution means that two or more tasks are progressing at the same time.
+
+10)threads are scheduled by the GIL.
+
+#Multiprocessing points
+
+
+1)A process is an independent instance executed in a processor core.
+
+2)Processes do not share the same memory space,
+
+3)Processes execution is scheduled by the operating system
+
+5)Parallel execution implies that two or more jobs are being executed simultaneously.'''
+
+
+
+#Fuctions
+def func1(*a):
+    return sum(a)
+from functools import reduce
+print(func1(2,3,4,5,6,7,8,9))
+x=[1,2,3,4,5,6,7]
+z=list(map(lambda y:y**2,x))
+print(z)
+a=list(filter(lambda y:y%2!=0,x))
+print(a)
+b=reduce(lambda x,y:x-y,x)
+print(b)
+
+#class declaration with constractor
+
+class Student:
+
+
+    def __init__(self,name,age,school,bus):
+
+        self.name=name
+        self.age=age
+        self.school=school
+        self.bus=bus
+
+    def display(self):
+
+        print("My name is",self.name,"with having",self.age)
+
+    def second_info(self):
+
+        print("My school is",self.school,"and having the bus",self.bus)
+
+
+s1 = Student("Lingababu",31,"GMR","Benz")
+
+s1.display()
+s1.second_info()
+
+#class declaration with out constractor 
+
+class Student:
+
+
+    def display(self,name,age):
+        self.name=name
+        self.age=age
+
+        print("My name is",self.name,"with having",self.age)
+
+    def second_info(self,school,bus):
+        self.school=school
+        self.bus=bus
+
+        print("My school is",self.school,"and having the bus",self.bus)
+
+
+s1 = Student()
+
+s1.display("Lingababu",31)
+s1.second_info("GMR","Benz")
+
+#creating class with default parameter
+
+class Student:
+
+
+    def display(self):
+        self.name="Lingababu"
+        self.age=32
+
+        print("My name is",self.name,"with having",self.age)
+
+    def second_info(self):
+        self.school="GMR"
+        self.bus="Benz"
+
+        print("My school is",self.school,"and having the bus",self.bus)
+
+
+s1 = Student()
+
+s1.display()
+s1.second_info()
+
+
+#Inheritances
+
+
+
+#single     #simple
+
+class A:
+    def m1(self):
+        print("Parent method")
+class B(A):
+    def m2(self):
+        print("Child method")
+b = B()
+b.m1()
+
+#multiple   #many to one
+
+class A:
+    def m1(self):
+        print("Parent1 method")
+class B():
+    def m1(self):
+        print("Parent2 method")
+class C(B,A):
+    def m1(self):
+        print("Child method")
+c = C()
+c.m1()
+
+
+#multilevel # one to one
+
+class A:
+    def m1(self):
+        print("Parent1 method")
+class B(A):
+    def m1(self):
+        print("Parent2 method")
+class C(B):
+    def m1(self):
+        print("Child method")
+c = C()
+c.m1()
+
+#hybrid     #combination of all[multiple+multilevel+single]
+class A:
+    def m1(self):
+        print("Parent1 method")
+class B(A):
+    def m1(self):
+        print("Parent2 method")
+class C(B):
+    def m1(self):
+        print("Child method")
+class D(C,B):
+    def m1(self):
+        print("Child1 method")
+
+d= D()
+c.m1()
+
+#cyclic     #
+class A(B):
+    def m1(self):
+        print("Parent1 method")
+class B(A):
+    def m1(self):
+        print("Parent2 method")
+
+#Hirechy    #single to many
+class A:
+    def m1(self):
+        print("Parent1 method")
+class B(A):
+    def m1(self):
+        print("Parent2 method")
+class C(A):
+    def m1(self):
+        print("Child method")
+c = C()
+c.m1()
+    
+
+#super keyword  #method and constractor
+
+class Student:
+
+    def __init__(self,name,school):
+
+        self.name = name
+        self.school =school
+
+    def frist_method(self):
+        print("Hi my name is",self.name,"working in the school",self.school)
+        
+class Student1(Student):
+
+    def __init__(self,name,school,age,bus):
+
+        super().__init__(name,school)
+        self.age=age
+        self.bus=bus
+
+    def frist_method1(self):
+
+        super().frist_method()
+        print("Hi Her name with",self.age,"and her school",self.bus)
+
+stu = Student1("Lingababu","GMR",32,"BENZ")
+stu.frist_method1()
+#mro
+print("---------------------------------------mro-------------------")
+class A:
+    def m1(self):
+        print("Parent1 method")
+class B():
+    pass
+class C(B,A):
+    pass
+c = C()
+c.m1()
+
+#shallow copy and deep copy
+
+''' Shallow and Deep copy should be take it in nested lists only'''
+#Shallow copy
+import copy
+x = [[1,2],[3,4],[5,6]]
+
+y = copy.copy(x)
+
+y[0][0] = "A"
+
+print(x)
+print(y)
+
+#Deep copy
+
+import copy
+x = [[1,2],[3,4],[5,6]]
+
+y = copy.deepcopy(x)
+
+y[0][0] = "A"
+
+print(x)
+print(y)
+
+#call by value and call refrence
+
+''' Call by refrence mainly we can seen in mutable[ objects[List,set,dictionary] will occupie same meomory location'''
+
+def M1(x):
+
+    print(x)
+    x.append(3)
+    x.extend([4,5,6])
+    x.remove(5)
+    print(x)
+    print(id(x))
+
+y=[1]
+M1(y)
+print(y)
+print(id(y))
+
+#Call by value
+'''Call by value only we can apply to Immutable Objects [float,string,Int] will occur will at different meomory location'''
+def IM(x):
+
+    print(x)
+    x+=10
+    print(x)
+    print(id(x))
+
+y=5
+IM(y)
+print(y)
+print(id(y))
+
+#How will concatenate using magic methods
+#context mangers and its advantanges
+#generators
+
+def gene():
+
+    yield 'A'
+    yield 'B'
+    yield 'C'
+    yield 'D'
+
+g = gene()
+
+print(next(g))
+print(next(g))
+print(next(g))
+print(next(g))
+#print(next(g))
+#Pickling and unpickling
+'''Pickling is the process through which a Python object hierarchy is converted into a byte stream. To serialize an object hierarchy, you simply call the dumps() function.
+
+    Unpickling is the inverse operation. A byte stream from a binary file or bytes-like object is converted back into an object hierarchy. To de-serialize a data stream, you call the loads() function.'''
+
+'''pickle.HIGHEST_PROTOCOL − The highest protocol version available. Integer value.
+
+pickle.DEFAULT_PROTOCOL − The default protocol version used for pickling. Integer value. Currently the default protocol is 4'''
+
+import pickle
+
+# Input Data
+my_data = { 'BMW', 'Audi', 'Toyota', 'Benz'}
+
+# Pickle the input
+with open("demo.pickle","wb") as file_handle:
+   pickle.dump(my_data, file_handle, pickle.HIGHEST_PROTOCOL)
+
+# Unpickle the above pickled file
+with open("demo.pickle","rb") as file_handle:
+   res = pickle.load(file_handle)
+   print(my_data) # display the output
+   print(type(res))
+
+#how will get,change,delete and modify from dictionary
+
+x = {'A':2,'B':1,'C':5,'E':3,'H':4}
+print(x['A'])
+print(x.get('A'))
+print(x.setdefault('C',6))
+print(x)
+x['C'] = 'Lingababu'
+print(x)
+del x['C']
+print(x)
+#how to get max element from dictionary
+x = {'A':2,'B':1,'C':5,'E':3,'H':4}
+y= max(sorted(x, key = lambda a : x[a]))
+print(y)
+
+#how to get how to sort the dictionary by keys
+x = {'A':2,'B':1,'C':5,'E':3,'H':4}
+
+y= dict(sorted(x.items()))   #{'A': 2, 'B': 1, 'C': 5, 'E': 3, 'H': 4}
+print(y)
+##how to get how to sort the dictionary by values
+x = {'A':2,'B':1,'C':5,'E':3,'H':4}
+y= dict(sorted(x.items(), key = lambda item : item[1]))
+print(y)                     #{'B': 1, 'A': 2, 'E': 3, 'H': 4, 'C': 5}
+#what is data_abstraction
+print("------------------------------------------------------------")
+#using multiple things in single step
+
+l = list(range(1,11))
+y=map(lambda x:x**2 if x%2 ==0 else x**3, l)
+print(y)
+from abc import ABC,abstractmethod
+
+class Parent(ABC):
+
+    def common_fn(self):
+        print("Im in common method of parent")
+    @abstractmethod
+    def abs_fn(self):
+        pass
+
+class Child1(Parent):
+    def abs_fn(self):
+        print('abstract method of child1')
+
+
+class Child2(Parent):
+    def abs_fn(self):
+            print('abstract method of child2')
+
+c2 = Child2()
+c2.abs_fn()
+#what is Encapsulation
+'''Encapsulation is combaing of the data and methods is called Encapsulation'''
+
+class Person:
+
+    def m1(self):
+        self.a ="nucleous" #public variable
+        self._a ="atom"    #protected variable
+        self.__a ="molecule" #privite variable
+
+p1 = Person()
+#print(p1.a)
+#print(p1._a)
+#print(p1.__a)
+#prime number
+n= int(input("Enter the number"))
+
+if n < 1 :
+    print("Its not a prime number")
+
+elif n == 1:
+    print("Its not a prime number")
+
+elif n > 1 :
+
+    for i in range(2, n):
+
+        if n%i==0:
+            print("Its not a prime number")
+            break
+
+    else:
+        print("Its a prime number")
+
+else:
+    print("Its not a prime number")
+
+
+#how to remove the duplcates
+
+x='aaabbbcccdddd'
+x.split()
+b=['w','w','w','w','w','r','r','r']
+y=[]
+for i in b:
+    if i not in y:
+        y.append(i)
+print(y)
+
+
+#how to remove repeated items from the string
+a='aaabbbcccdddd'
+b=['w','w','w','w','w','r','r','r']
+d=dict()
+
+for i in b:
+    if i in d:
+        d[i]+=1
+    else:
+        d[i]=1
+print(d)
+#how to get diamond shape ussing python code
+#How will you get the key from nested dictionary
+#How to get value from the nested list
+
+print("-----------------------------working with regular expressions-----------")
+
+import re
+s="learning python is very Easy"
+result = re.search("^easy",s,re.IGNORECASE)
+if result != None:
+    print("Matched")
+else:
+    print("Not Matched")
+
+
+'''x=919059422776
+
+import re
+
+result = re.fullmatch('(0|91)?[7-9][0-9]{9}',x)
+
+if result != None:
+    print("Matched")'''
+
+
+
+#How to get the email ID
+
+'''import re
+s=input("Enter the mail ID :")
+result = re.fullmatch('\w[a-zA-Z0-9_.]*@gmail.com',s)
+if result != None:
+    print("Matched")
+else:
+    print("Not matched")'''
+#How to get the phone number using re
+'''x=+919059422776
+import re
+result = re.fullmatch('(0|91)?[7-9][0-9]{9}',x)
+if result != None:
+    print("Matched")
+
+else:
+    print("Not matched")'''
+#how get specified value from string using re
+#match---------------------------------------
+'''match re.match() searches only from the beginning of the string
+ a match of substring is found somewhere in the middle of the string, it returns none. '''
+'''import re
+txt = "The rain in Spain"
+x = re.match("ai", txt)
+print(x)'''
+#search--------------------------------------
+'''match re.match() searches only from the beginning of the string
+ a match of substring is found somewhere in the middle of the string, it returns none.'''
+import re
+
+txt = "The rain in Spain"
+x = re.search("ai", txt)
+print(x)
+#fullmatch
+'''re.fullmatch() is that re.match() matches only at the beginning but re.fullmatch() tries to match at the end as well.'''
+import re
+
+txt = "The rain in Spain"
+x = re.fullmatch("ai", txt)
+print(x)
+#findall nothing but search but its gives in list['ai','ai']
+''' but it will return the output in the list format'''
+import re
+
+txt = "The rain in Spain"
+x = re.fullmatch("ai", txt)
+print(x)
+
+txt = "The rain in Spain"
+x = re.findall("ai", txt)
+print(x)
+
+txt = "The rain in Spain"
+x = re.findall("ai", txt) #['ai','ai']
+print(x)
+
+#split()
+
+'''it will split the function but its output list format'''
+
+#sub
+
+'''it will sub in the selected place only'''
+ 
+#how exception handling using classes
+
+try:
+
+    x=int(input("Enter the value:"))
+    y=int(input("Enter the value:"))
+
+    print(x/y)
+
+except ZeroDivisionError as e:
+    print("We cannot divide by zero",e)
+
+else:
+    print("it will go to the next block if there is no exception")
+
+finally:
+
+    print("For cleaning activity we are using this")
+
+#how to create the file and read and write the content to the file
+
+'''\n Indiacte the new line'''
+'''write()	:Writes the specified string to the file
+   writelines()	:Writes a list of strings to the file'''
+
+with open ('test1.txt' ,'w') as f:
+    f.write("See you soon!\n")
+    f.write("Good morning Lingababu")
+
+with open('test1.txt','r') as f:
+    data=f.read()
+    print(data)
+    count=0
+    for i in data:
+        if i == 'Good morning Lingababu':
+            count+=1
+    print(count)
+#Context managers
+    
+'''Context managers are basically used for the many users uses the resources
+    but they can not close the files when we are try to open those files we can os error'''
+'''with statement are basically used for the context manager for file handling'''
+#local,global,nonlocal variable
+'''local and global variable we can use it normal functions'''
+# declare global variable
+#message = 'Hello'
+def greet():
+    # declare local variable
+    message = 'Lingababu'
+    print('Local', message)
+
+greet()
+#print('Global', message) #NameError: name 'message' is not defined
+#Non local variable
+'''nonlocal variable we using in nested functions'''
+''' for whose variable local or global Scope not defined then non local scope will come''' 
+
+def Outer():
+
+    message = 'local'
+
+    def inner():
+        nonlocal message
+        message ='nonlocal'
+
+        print('inner',message)
+
+    inner()
+    print('Outer',message)
+
+Outer()
+#How to reverse the list using Inbuilt methods
+
+#method-1
+
+# input list
+lst = [10, 11, 12, 13, 14, 15]
+l = []  
+for i in lst:
+    l.insert(0, i)
+print(l)
+
+#method-2
+
+# Input list
+my_list = [4, 5, 6, 7, 8, 9]
+reversed_list = []
+for i in range(len(my_list)-1, -1, -1):
+    reversed_list.append(my_list[i])
+print(reversed_list)
+
+#How to reverse the list without using Inbuilt methods
+
+#for list
+def reverse_list(l):
+    return [l[i] for i in range(len(l)-1, -1, -1)]
+a=[1,2,3,4,5,6,7,8,9]
+print(reverse_list(a))
+
+#for string
+# Function to reverse a string
+def reverse(string):
+    string1 = [string[i] for i in range(len(string)-1, -1, -1)]
+    return "".join(string1)
+ 
+s = "Geeksforgeeks"
+ 
+print("The original string  is : ", s)
+ 
+print("The reversed string(using reversed) is : ", reverse(s))
+
+#self
+'''Self is an instance of a class or an object in Python. It is included as the first parameter.
+It helps differentiate between the methods and attributes of a class with local variables.'''
+
+#monkey patching
+'''the term monkey patch refers to dynamic (or run-time) modifications of a class or module.
+In Python, we can actually change the behavior of code at run-time.'''
+
+#Name spaces
+'''Scope resolution LEGB rule In Python
+In Python, the LEGB rule is used to decide the order in which the namespaces are to be searched for scope resolution.
+The scopes are listed below in terms of hierarchy(highest to lowest/narrowest to broadest):'''
+
+#Local(L): Defined inside function/class
+#Enclosed(E): Defined inside enclosing functions(Nested function concept)
+#Global(G): Defined at the uppermost level
+#Built-in(B): Reserved names in Python builtin modules
+print("------------------factorial of a number--------------")
+
+def factorial(n):
+    if n == 0:
+        return 1
+    else:
+        return n * factorial(n-1)
+print(factorial(10))
+
+#fibnocial sequence:
+
+def fib (n):
+
+    if n == 0:
+        return 0
+    elif n == 1 or n == 2:
+        return 1
+    else:
+        return fib(n-2)+fib(n-1)
+a=20
+print(fib(a))
+
+#Difference between == and is operator
+
+'''== is an operator that tests the equality
+   is is an operator that tests for identity.
+
+Two objects can have equal values without necessarily being identical (i.e. having the same memory address).
+
+Remember that a is b is syntactic sugar for id(a) == id(b)'''
+
+#When shouldn't you use the assert statement?
+'''The assert statement is useful for internal testing and sanity checks.
+However, it shouldn’t be used to perform data validation or error handling
+because it’s generally disabled in production code for performance reasons.'''
+
+#Using of Zip and Enumerate function
+
+x=['A','B','C','D','E']
+y=[1,2,3,4,5]
+
+for x,y in zip(x,y):
+    print(x,y)
+    
+x=['A','B','C','D','E']
+
+
+for index,x in enumerate(x):
+    print(index,y)
+
+#iterable examples "list ,set ,tuple ,dictionary"
+
+
+
+#iterate are applying on the iterables
+''' we have two iterators
+ iter -------yhis is for intialization for iterator object
+ next -------this will returns the next value from iterable object'''
+string = "GFG"
+ch_iterator = iter(string)
+ 
+print(next(ch_iterator))
+print(next(ch_iterator))
+print(next(ch_iterator))
+
+a = [1,2,3]
+b = [4,5,6]
+c = [7,8,9]
+z= zip(a,b,c)
+print(list(z))  #[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
+
+a = [1,2,3]
+b = [4,5,6]
+
+z=dict(zip(a,b))
+print(z)   #{1: 4, 2: 5, 3: 6}
+
+x=["Name","age"]
+y=["Lingababu",30]
+z=dict(zip(x,y))
+print(z)  #{'Name': 'Lingababu', 'age': 30}
+
+#what is anngstrom number
+new_number = int(input("Enter the number:"))
+
+val1=list(map(int,str(new_number)))
+
+val2=list(map(lambda y:y**3,val1))
+
+if (sum(val2) == new_number):
+    print("Its a armstrong number ")
+
+else:
+    print("Its not a armsstorng number")
+    
+
+
+#what Anagrams
+
+num1 = input("Enter the value")
+num2=  input("Enter the value")
+
+
+if sorted(num1) == sorted(num2):
+
+    print("Both are anagrams")
+
+else:
+    print("Both not are anagrams")
+
+#scope resolution in python
+
+
+#LEGB Rule in python
+
+    #Local
+    #Enclosed
+    #Global
+    #Builtin
+
+
+'''def outer_func():
+
+    b=20
+    global a
+    a=a+10
+
+    print(a)
+
+
+    def inner_func():
+
+        nonlocal b
+        b=b+2
+
+
+
+        print("The b value is",b)
+
+    inner_func()
+
+
+outer_func()'''
+
+
+
+
+
+#Counting Vowels in a Given Word
+
+
+vowel = ['a','e','i','o','u']
+
+word = 'programming'
+count=0
+
+for char in word:
+
+    if char in vowel:
+
+        count+=1
+print(count)
+
+#Counting No Vowels In a Given Word
+
+vowels=['a','e','i','o','u']
+
+word= 'sortware engineer'
+
+count=0
+for char in word:
+    if char not in word:
+
+        count+=1
+
+print(count)
+
+#Counting the number of Occurance of character
+
+
+word = "python"
+
+character = 'p'
+
+count=0
+
+for letter in word:
+
+    if letter == character:
+
+        count+=1
+
+print(count)
+
+
+#find the middle number number from the list
+
+
+num_list = [1,2,3,4,5,6,7,8,9,10]
+
+
+mid_ele = int((len(num_list)/2))
+
+print(num_list[mid_ele])
+
+
+
+#convert list of elements into string
+
+
+
+list1 = ['a','c','f','t','y','b']
+
+string1 = ''.join(list1)
+
+print(string)
+print(type(string1))
+
+#Adding two list elements together
+
+
+lst1 =[1,2,3]
+
+lst2 =[4,5,6]
+
+
+res_lst = []
+
+for i in range(0, len(lst1)):
+
+    res_lst.append(lst1[i]+lst2[i])
+
+print(res_lst)
+
+
+
+#Comparing two are anagrams or not
+
+
+str1 = "Listen"
+
+str2 = "Silent"
+
+
+
+str1 = list(str1.upper())
+
+str2 = list(str2.upper())
+
+str1.sort(),str2.sort()
+
+if (str1 == str2 ):
+
+    print("True")
+
+else:
+
+    print("False")
+
+
+
+#Counting white spaces in astring
+
+string = "P  r orgramm in g"
+
+
+print(string.count(' '))
+
+
+
+#Counting the Digits letters and Spaces in a string
+
+
+import re
+
+
+name ='Python is 1'
+
+digitCount = re.sub("[^0-9]","",name)
+letterCount = re.sub("[^a-zA-Z]","",name)
+spaceCount = re.findall("[ \n]",name)
+
+
+print(len(digitCount))
+print(len(letterCount))
+print(len(spaceCount))
+
+#Counting special Characters in a string
+
+import re
+
+spChar ='!@#$%^&*()'
+
+count = re.sub('[\w]+','',spChar)
+print(len(count))
+
+
+#Remove the all white spaces in a string
+
+import re
+
+string = 'C O D E'
+
+result = re.sub('[\s]+','',string)
+print(len(result))
+
+#Building a Pyramid in python
+
+floors = 3
+
+h = 2*floors-1
+
+for i in range(1,2*floors,2):
+
+    print('{:^{}}'.format('*'*i,h))
+
+
+#randmise the elements from the list
+
+from random import shuffle
+
+lst = ['Python','is','easy']
+
+shuffle(lst)
+
+print(lst)
+
+
+#How will check whetehr year is leep or not
+
+
+def LeapYear(year):
+
+    if (year % 400 == 0) or(year % 100 != 0) and (year % 4 == 0):
+
+        print("Given year is a leap year")
+
+
+    else:
+
+        print("The Given year is not leap year")
+
+Year = int(input("Enter the year to whether check leap year or not"))
+
+LeapYear(Year)
+
+#Swapping two variables in python
+
+
+num1 = int(input("Enter the frist variable : "))
+
+num2 = int(input("Enter the second Variable : "))
+
+num3 = int(input("Enter the second Variable : "))
+print(num1)
+print(num2)
+print(num3)
+num1 , num2,num3 =num3, num2 ,num1
+
+print(num1)
+print(num2)
+print(num3)
+
+
+#write a programm to dispaly the calendor
+
+import calendar
+
+year = int(input("Enter the yaer:  "))
+month = int(input("Enter the month: "))
+
+
+print(calendar.month(year,month))
+
+print("----------------working with padding----------------------")
+
+input_list = [1, 123, 1234, 12345]
+
+output_list = []
+
+for num in input_list:
+
+    num_str = str(num)
+
+    padded_num = num_str.zfill(6)
+    output_list.append(padded_num)
+
+print(output_list)
+
+#write a programm with Inheritance with Dataabstraction
+
+from abc import ABC, abstractmethod
+
+class Animal(ABC):
+    def __init__(self, name):
+        self.name = name
+
+    @abstractmethod
+    def make_sound(self):
+        pass
+
+class Dog(Animal):
+    def make_sound(self):
+        return "Woof!"
+
+class Cat(Animal):
+    def make_sound(self):
+        return "Meow!"
+
+dog = Dog("Buddy")
+cat = Cat("Whiskers")
+
+print(dog.name)  # Output: Buddy
+print(dog.make_sound())  # Output: Woof!
+
+print(cat.name)  # Output: Whiskers
+print(cat.make_sound())  # Output: Meow!
+
+
+#Unpacking the tuple
+
+
+x = [1, 2, 3, 4, 5, (6), 7, 8]
+new = []
+for e in x:
+    if isinstance(e, tuple):
+        new.append(e)
+    else:
+        new.append(e)
+print(new)
+
+
+#Sorting the List without using any Inbuilt methods
+s = [-5, -23, 5, 0, 23, -6, 23, 67]
+nl = []
+for i in range(len(s)):
+    a = min(s)
+    nl.append(a)
+    s.remove(a)
+
+print nl
+
+print(evev and odd 
+
+
+print("-----------------with out print using the return using ------------")
+def sep_items(l):
+    
+    even=[]
+    odd=[]
+    
+    for i in l:
+        if i%2 ==0:
+            even.append(i)
+            
+        
+        else:
+            odd.append(i)
+            
+    return even,odd
+    #print ("Then odd items list",odd)          
+    #print ("The even items list",even)
+x=eval(input("Enter the Input:"))
+a,b=sep_items(x)
+print("Even list",a)
+print("Odd list",b)
+
+print ("-------------------seperating even and odd numbers from the list with Print-------")
+def sep_items(l):
+    
+    even=[]
+    odd=[]
+    
+    for i in l:
+        if i%2 ==0:
+            even.append(i)
+            
+        
+        else:
+            odd.append(i)
+            
+    
+    print ("Then odd items list",odd)          
+    print ("The even items list",even)
+x=eval(input("Enter the Input:"))
+sep_items(x)
+
+
+property                Recursion           Iteration
+
+Defination      Function calls itself   A set of instractions
+
+Apllications    For functions           For loops
+
+Code size       small code size         Large Code size
+
+Time            Very high time          Low time Complexicity
+
+Space           More space              Less space
+
+meomory         more meomory            less meomory
+
+
+
+#Recursion
+
+def countdown(n):
+
+    if n <=0:
+
+        print ('Blastoff')
+
+    else:
+        print n
+
+        countdown(n-1)
+countdown(3)
+
+
+#print("------------multiple nestded dictionary into single dictionary")
+
+def flatten_list(lst):
+    flattened = []
+    for item in lst:
+        if isinstance(item, list):
+            flattened.extend(flatten_list(item))
+        else:
+            flattened.append(item)
+    return flattened
+
+l1 = [1, 2, [3, 4], 5, [6, 7, 8, 9], [10, [11, 12, 13, [14, 15]]]]
+flattened_list = flatten_list(l1)
+
+print(flattened_list)
+
+
+#we are finding max element from repeated element from list
+from collections import Counter
+
+test = [1, 2, 3, 9, 2, 7, 3, 5, 9, 9, 9]
+
+count_dict = Counter(test)
+max_count = max(count_dict.values())
+
+test = [1, 2, 3, 9, 2, 7, 3, 5, 9, 9, 9]
+
+count_dict = {}
+for num in test:
+    if num in count_dict:
+        count_dict[num] += 1
+    else:
+        count_dict[num] = 1
+
+max_count = max(count_dict.values())
+
+#we are finding max element from repeated element from list
+t = [1, 2, 3, 9, 2, 7, 3, 5, 9, 9, 9]
+b = 0
+n = t[0]
+for i in t:
+    a = t.count(i)
+    if(a>b):
+        b = a
+        n = i
+print(n)
+
+#How to print the Pyrimd 
+
+def print_diamond(height):
+    for i in range(height):
+        print(" " * (height - i - 1) + "*" * (2 * i + 1))
+
+# Example usage
+print_diamond(5)
+
+#How to prepare the Diamond
+
+def print_diamond(height):
+    for i in range(height):
+        print(" " * (height - i - 1) + "*" * (2 * i + 1))
+    
+    for i in range(height-2, -1, -1):
+        print(" " * (height - i - 1) + "*" * (2 * i + 1))
+
+# Example usage
+print_diamond(5)
+
+
+#how to add the two list using the lambda
+
+y =[12,23,32,22]
+
+p =[5,10,15,20]
+z = list(map(lambda i,j:i*j,y,p))
+
+print(z)  #[60, 230, 480, 440]
+
+#squaring the dictionay values
+
+x={'a':2,'b':3,'c':4}
+
+y={i:j**2 for i,j in x.items()}
+print(y)
+
+#if dictionary having the two keys then find the third dictionary
+D1 = {'A': 15, 'B': 40}
+D2 = {'B': 20, 'C': 70}
+
+D3 = {**D1, **D2}
+
+for key in D1.keys() & D2.keys():
+    D3[key] = D1[key] + D2[key]
+print(D3)
+
+#How to the multiply the two values from the dictionary 
+D1 = {'A': 15, 'B': 40}
+D2 = {'B': 20, 'C': 70}
+
+D3 = {**D1, **D2}
+
+for key in D1.keys() & D2.keys():
+    D3[key] = D1[key] * D2[key]
+print(D3)
+
+
+#Status codes of particular Rest_API
+
+#Information(1XX)
+
+
+
+#Success(2XX):
+
+200 OK
+201 Created
+204 No Content
+
+#Redirection(3XX):
+
+301 Moved Permanently
+
+302 Found
+
+304 Not Modified
+
+
+#Client Error(4XX):
+
+400 Bad Request
+
+401 Unauthorised request
+
+403 Forbidden
+
+
+#Server Error(5XX)
+
+500 Internal server Error
+
+503 Server Unavaliable
+
+
+#when your passing 3 parameters from the list when passing the argument
+
+def probability_Checking(x, lst):
+    out_put = []
+    for i in range(len(lst)):
+        for j in range(i+1, len(lst)):
+            for k in range (j+2, len(lst)):
+                if lst[i] + lst[j] +lst[k] == x:
+                    out_put.append([lst[i], lst[j], lst[k]])
+    return out_put
+
+x=int(input("Enter the number :"))
+lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
+print(probability_Checking(x, lst))
+
+#when your passing 2 parameters from the list when passing the argument
+def probability_Checking(x, lst):
+    out_put = []
+    for i in range(len(lst)):
+        for j in range(i+1, len(lst)):
+                if lst[i] + lst[j] == x:
+                    out_put.append([lst[i], lst[j]])
+    return out_put
+
+x=int(input("Enter the number :"))
+lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
+print(probability_Checking(x, lst))
+
+
+#Keyword arguments
+def add_sum(**x):
+
+    return max(x.values())
+
+print(add_sum(a=10,b=20,c=30,d=40,e=50))
+
+
+#it will takes arguments in the  dictionary format[**x]
+def add_sum(**x):
+
+    return sum(x.values())
+
+a={'a':10,'b':20,'c':30,'d':40}
+print(add_sum(**a))    #dictionary format it will take the arguments
+
+
+#it will takes arguments in the  tuple format[*x]
+def add_sum(*x):
+
+    return sum(x)
+
+a=(20,10,20,40,50)
+print(add_sum(*a))     #tuple format it will take the arguments
+
+
+
+
+
+
+
+def cheaking_security(l):
+
+    valid = [2000, 500, 100, 50, 20, 10]
+    total = 0
+
+
+    for i in l:
+
+        if not i[0].isdigit():
+
+            raise Exception ("It should contain the digits only")
+
+        if not i[1:4].isalpha():
+
+            raise Exception ("It should contain the alphabets only")
+
+        if int(i[4:]) not in valid:
+
+            raise Exception ("Invaid denomination :Last 4Characters")
+
+
+        total+=int(i[4:])
+    return total
+        
+input_l = ['1BEX2000','4PIM0500','6BIO0020','1SJJ0010','9ACD0100']
+try:
+
+    total=cheaking_security(input_l)
+    print("Total sum",total,"ruppess")
+
+except ValueError as e:
+
+    print("Error:",str(e))
+
+
+
+
+
+
+#for post the request in this we need the [url,pay_load,file_path]
+
+import request
+def send_post_request(url,payload,file_path):
+    reponse=requests.post(url, json=payload)
+    if response.status_code == 200:
+        with open('file_path','w') as file:
+            file.write(response.text)
+        print("Response saved to file:",file_path)
+    else:
+        print("Request failed with status code:" response.status_code)
+#Example
+url = "https://api.example.com/endpoint"
+payload={"key":"value1","key2":"value2"}
+file_path ='response.json'
+
+
+
+
+
+
+
+#for get the request in this we need the [url,file_path]
+import requests
+def send_get_request(url, file_path):
+    response = requests.get(url)
+    if response.status_code == 200:
+        with open(file_path, 'w') as file:
+            file.write(response.text)
+        print("Response saved to file:", file_path)
+    else:
+        print("Request failed with status code:", response.status_code)
+
+# Example usage
+url = "https://api.example.com/endpoint"
+file_path = "response.json"
+
+send_get_request(url, file_path)
+
+
+
+
+
+#for patch the request in this we need the [url,payloadfile_path]
+
+import requests
+
+def send_patch_request(url, payload, file_path):
+    response = requests.patch(url, json=payload)
+    if response.status_code == 200:
+        with open(file_path, 'w') as file:
+            file.write(response.text)
+        print("Response saved to file:", file_path)
+    else:
+        print("Request failed with status code:", response.status_code)
+
+# Example usage
+url = "https://api.example.com/endpoint"
+payload = { "key1": "value1","key2": "value2"}
+file_path = "response.json"
+
+#x='aaabbbcc' to '3a3b2c'
+
+from itertools import groupby
+
+input1 = 'aaabbbcccddd'
+gr = groupby(input1)
+ls = ''.join([v + str(len(list(k))) for v, k in gr])
+print(ls)
+
+#Convert binary number into integer
+
+binary_string="01010101"
+decimal_number = int(binary_string,2)
+print(decimal_number)
+
+
+#Convert integer into dbinary number
+
+decimal_number = 5
+binary_string = bin(decimal_number)[2:]
+print(binary_string)
+
+#How to reverse the number into reverse order
+
+n = 294389374
+reversed_n = 0
+
+while n > 0:
+    reversed_n = (reversed_n * 10) + (n % 10)
+    n = n // 10
+
+print(reversed_n)
+
+#Check the pattrens for checking whether corrector not
+
+def check_pattern(s):
+    stack = []
+    opening = "({["
+    closing = ")}]"
+    pairs = {")": "(", "}": "{", "]": "["}
+    
+    for char in s:
+        if char in opening:
+            stack.append(char)
+        elif char in closing:
+            if len(stack) == 0 or stack[-1] != pairs[char]:
+                return False
+            stack.pop()
+    
+    return len(stack) == 0
+
+
+S1 = "({[]})"
+S2 = "}([])}"
+S3 = "})[](}"
+
+print(check_pattern(S1))  # True
+print(check_pattern(S2))  # False
+print(check_pattern(S3))  # False
+
+#Difference between is and ==
+
+#1) is to check the identity and should have same meomory address
+#2)== to check the equality.
+
+a=[1,2,3,4,5]
+
+b=a
+
+c = a[:]
+print(b)
+
+it will check for equality
+print(a == b)#True
+
+print(a is b)#True
+
+print(a == b)#True
+it will check for identity and equality means should have same meomory address
+after copying it will occupies different meomory address
+print(a is c)#false
+
+#1)== is for value equality. It's used to know if two objects have the same value.
+#2)is is for reference equality. It's used to know if two references refer
+#    (or point)to the same object, i.e if they're identical.
+#    Two objects are identical if they have the same memory address.
+
+#pandas
+#------------------------------------------------------
+#what is syntax for the dataframe
+
+#pandas.DataFrame( data, index, columns, dtype, copy)
+
+
+#how to create the dataframe add the new column and modify the existing column
+#how will you convert txt to csv
+#how will you convert txt to excell
+#how will you convert txt to tsv
+#How would you iterate over rows in a DataFrame in Pandas?
+#How are iloc() and loc() different?
+#How can you sort the DataFrame?
+#How can you find the row for which the value of a specific column is max or min?
+# Compare the Pandas methods: map(), applymap(), apply()
+#How do you split a DataFrame according to a boolean criterion?
+#Is it a good idea to iterate over DataFrame rows in Pandas?
+#Name the advantage of using applymap() vs apply() method
+#What is the difference(s) between merge() and concat() in Pandas?
Index: Django_REST_API/mywebsite/myapp/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Django_REST_API/mywebsite/myapp/urls.py b/Django_REST_API/mywebsite/myapp/urls.py
new file mode 100644
--- /dev/null	(date 1704627810378)
+++ b/Django_REST_API/mywebsite/myapp/urls.py	(date 1704627810378)
@@ -0,0 +1,7 @@
+# myapp/urls.py
+from django.urls import path
+from .views import home
+
+urlpatterns = [
+    path('', home, name='home'),
+]
Index: python and Python_Interview_Questions/Pytest/Pytest_Info
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python and Python_Interview_Questions/Pytest/Pytest_Info b/python and Python_Interview_Questions/Pytest/Pytest_Info
new file mode 100644
--- /dev/null	(date 1702835091748)
+++ b/python and Python_Interview_Questions/Pytest/Pytest_Info	(date 1702835091748)
@@ -0,0 +1,23 @@
+
+# Advantages of Pytest
+# The advantages of Pytest are as follows −
+# Pytest can run multiple tests in parallel, which reduces the execution time of the test suite.
+# Pytest has its own way to detect the test file and test functions automatically, if not mentioned explicitly.
+# Pytest allows us to skip a subset of the tests during execution.
+# Pytest allows us to run a subset of the entire test suite.
+# Pytest is free and open source.
+# Because of its simple syntax, pytest is very easy to start with.
+# Identifying Test files and Functions
+#  pytest name start with *_test.py or test_*.py
+# Pytest - Starting With Basic Test
+# Pytest - File Execution
+# Execute a Subset of Test Suite
+# Substring Matching of Test Names
+# Pytest - Grouping the Tests
+# Pytest - Fixtures
+# Pytest - Conftest.py
+# Pytest - Parameterizing Tests
+# Pytest - Xfail/Skip Tests
+# Stop Test Suite after N Test Failures
+# Pytest - Run Tests in Parallel
+# Test Execution Results in XML
\ No newline at end of file
Index: python and Python_Interview_Questions/Pytest/automation/test_square.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python and Python_Interview_Questions/Pytest/automation/test_square.py b/python and Python_Interview_Questions/Pytest/automation/test_square.py
new file mode 100644
--- /dev/null	(date 1703769608232)
+++ b/python and Python_Interview_Questions/Pytest/automation/test_square.py	(date 1703769608232)
@@ -0,0 +1,34 @@
+import math
+import pytest
+
+def test_square():
+    num= 25
+    assert math.sqrt(num) == 5
+test_square()
+
+def testsquare():
+    num = 7
+    assert 7*7 == 49
+testsquare()
+
+def testequality():
+    assert  10 == 10
+testequality()
+
+def capital_case(x):
+    return x.capitalize()
+
+def test_capital_case():
+    assert capital_case('python') == 'Python'
+
+
+# test_calculator.py
+
+
+
+'''Pytest Inbuilt methods
+1)xfail
+2)skip
+3)parametrize
+4)Customised Markers'''
+
Index: .idea/Programming.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.11 (Programming)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Programming.iml b/.idea/Programming.iml
--- a/.idea/Programming.iml	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/.idea/Programming.iml	(date 1705594653232)
@@ -1,10 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/venv" />
-    </content>
-    <orderEntry type="jdk" jdkName="Python 3.11 (Programming)" jdkType="Python SDK" />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="py.test" />
+  </component>
 </module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$/..\" vcs=\"Git\" />\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/.idea/vcs.xml	(date 1702089257679)
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: python and Python_Interview_Questions/Modules/math module.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python and Python_Interview_Questions/Modules/math module.py b/python and Python_Interview_Questions/Modules/math module.py
new file mode 100644
--- /dev/null	(date 1704049445970)
+++ b/python and Python_Interview_Questions/Modules/math module.py	(date 1704049445970)
@@ -0,0 +1,1 @@
+print("Hello world")
\ No newline at end of file
Index: python and Python_Interview_Questions/Modules/Os module.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Os module
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python and Python_Interview_Questions/Modules/Os module.py b/python and Python_Interview_Questions/Modules/Os module.py
--- a/python and Python_Interview_Questions/Modules/Os module.py	(revision 488517a1b00ac252c699a4f3daa50714e82c0436)
+++ b/python and Python_Interview_Questions/Modules/Os module.py	(date 1703559889820)
@@ -1,1 +1,50 @@
-#Os module
\ No newline at end of file
+#Os module
+
+# Handling the Current Working Directory
+# Creating a Directory
+# Listing out Files and Directories with Python
+# Deleting Directory or Files using Python
+
+import os
+cwd = os.getcwd()
+print("Current working directory",cwd)
+
+
+
+def current_path():
+    print("Current working before")
+    print(os.getcwd())
+    print()
+current_path()
+os.chdir('../')
+current_path()
+print("Current working after",os.getcwd())
+
+#Creating a Directory
+import os
+directory = "Lingababu"
+parent_dir = "C:\\Users\\ASUS\\Desktop\\Programming"
+path = os.path.join(parent_dir,directory)
+print(path )
+os.mkdir(f"Directory created {directory}")
+mode = 0o666
+path=os.path.join(parent_dir,directory)
+os.mkdir(path,mode)
+print(f'Directory created {directory}')
+
+#Check whether the directory exists or not
+import os
+path = "C:\\Users\\ASUS\\Desktop\\Programming\\Lingababu"
+if not os.path.exists(path):
+    os.mkdir(path)
+    print(f"Directory created: {path}")
+else:
+    print(f"Directory'{path}' already exists.")
+
+
+#list the directories
+import os
+path = "C:\\Users\\ASUS\\Desktop\\Programming"
+dir_list = os.listdir(path)
+print("Files and directories in", path,":")
+print(dir_list)
\ No newline at end of file
diff --git a/python and Python_Interview_Questions/Modules/Standard Library Modules/pickle module.py b/python and Python_Interview_Questions/Modules/Standard Library Modules/pickle module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Standard Library Modules/sqlite3 module.py b/python and Python_Interview_Questions/Modules/Standard Library Modules/sqlite3 module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Standard Library Modules/xml module.py b/python and Python_Interview_Questions/Modules/Standard Library Modules/xml module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Standard Library Modules/csv module.py b/python and Python_Interview_Questions/Modules/Standard Library Modules/csv module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/Unittest_Setup_Teardown.py b/python and Python_Interview_Questions/Unittest/Unittest_Setup_Teardown.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Standard Library Modules/http module.py b/python and Python_Interview_Questions/Modules/Standard Library Modules/http module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/TestCase_Class.py b/python and Python_Interview_Questions/Unittest/TestCase_Class.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/Unittest_Skipping_tests.py b/python and Python_Interview_Questions/Unittest/Unittest_Skipping_tests.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/Skipping_tests_based_on_failures.py b/python and Python_Interview_Questions/Unittest/Skipping_tests_based_on_failures.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/Unittest_Assertions.py b/python and Python_Interview_Questions/Unittest/Unittest_Assertions.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/Unittest_Suites.py b/python and Python_Interview_Questions/Unittest/Unittest_Suites.py
new file mode 100644
diff --git a/Django_REST_API/mywebsite/db.sqlite3 b/Django_REST_API/mywebsite/db.sqlite3
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/Skipping_test_based_on_condition.py b/python and Python_Interview_Questions/Unittest/Skipping_test_based_on_condition.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Unittest/Unittest_parameterised_tests.py b/python and Python_Interview_Questions/Unittest/Unittest_parameterised_tests.py
new file mode 100644
diff --git a/Django_REST_API/mywebsite/myapp/__init__.py b/Django_REST_API/mywebsite/myapp/__init__.py
new file mode 100644
diff --git a/Django_REST_API/mywebsite/myapp/migrations/__init__.py b/Django_REST_API/mywebsite/myapp/migrations/__init__.py
new file mode 100644
diff --git a/Django_REST_API/mywebsite/mywebsite/__init__.py b/Django_REST_API/mywebsite/mywebsite/__init__.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/Fixture_Scope.py b/python and Python_Interview_Questions/Pytest/automation/Fixture_Scope.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_Capture_output.py b/python and Python_Interview_Questions/Pytest/automation/pytest_Capture_output.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/Parallel_Test_Execution.py b/python and Python_Interview_Questions/Pytest/automation/Parallel_Test_Execution.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_skipping.py b/python and Python_Interview_Questions/Pytest/automation/pytest_skipping.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_parameterise.py b/python and Python_Interview_Questions/Pytest/automation/pytest_parameterise.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_fixture.py b/python and Python_Interview_Questions/Pytest/automation/pytest_fixture.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_Hooks.py b/python and Python_Interview_Questions/Pytest/automation/pytest_Hooks.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/Skipping_and_Marking.py b/python and Python_Interview_Questions/Pytest/automation/Skipping_and_Marking.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/Fixture_Finalization.py b/python and Python_Interview_Questions/Pytest/automation/Fixture_Finalization.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_monkeypatching.py b/python and Python_Interview_Questions/Pytest/automation/pytest_monkeypatching.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_assertions.py b/python and Python_Interview_Questions/Pytest/automation/pytest_assertions.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/Skipping_testing_Dynamically.py b/python and Python_Interview_Questions/Pytest/automation/Skipping_testing_Dynamically.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_Selective_test_execution.py b/python and Python_Interview_Questions/Pytest/automation/pytest_Selective_test_execution.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Pytest/automation/pytest_parameterise_fixture.py b/python and Python_Interview_Questions/Pytest/automation/pytest_parameterise_fixture.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/threading.py b/python and Python_Interview_Questions/Modules/threading.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/datetime module.py b/python and Python_Interview_Questions/Modules/datetime module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/itertools.py b/python and Python_Interview_Questions/Modules/itertools.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/collections.py b/python and Python_Interview_Questions/Modules/collections.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/socket module.py b/python and Python_Interview_Questions/Modules/socket module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/subprocess module.py b/python and Python_Interview_Questions/Modules/subprocess module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/sys module.py b/python and Python_Interview_Questions/Modules/sys module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/re module.py b/python and Python_Interview_Questions/Modules/re module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Argparse module.py b/python and Python_Interview_Questions/Modules/Argparse module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/random module.py b/python and Python_Interview_Questions/Modules/random module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/matplotlib module.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/matplotlib module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/Tensorflow.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/Tensorflow.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/Django module.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/Django module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/PyTourch.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/PyTourch.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/requests module.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/requests module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/numpy module.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/numpy module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/Flask module.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/Flask module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Third-Party Modules/pandas module.py b/python and Python_Interview_Questions/Modules/Third-Party Modules/pandas module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Standard Library Modules/multiprocessing module.py b/python and Python_Interview_Questions/Modules/Standard Library Modules/multiprocessing module.py
new file mode 100644
diff --git a/python and Python_Interview_Questions/Modules/Standard Library Modules/email module.py b/python and Python_Interview_Questions/Modules/Standard Library Modules/email module.py
new file mode 100644
